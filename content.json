[{"title":"【并发】Redis穿透、击穿、雪崩和数据一致性","date":"2019-09-27T11:15:31.000Z","path":"article/20190927.html","text":"1. 缓存穿透访问一个不存在的key，缓存不起作用，请求会穿透到DB，流量大时DB会挂掉。 解决方案： 采用布隆过滤器（bloomfilter就类似于一个hash set），使用一个足够大的bitmap，用于存储可能访问的key，不存在的key直接被过滤； 访问key未在DB查询到值，也将空值写进缓存，但可以设置较短过期时间。 接口限流与熔断、降级 使用互斥锁排队（分布式环境中要使用分布式锁，单机的话用普通的锁（synchronized、Lock）） 2. 缓存雪崩大量的key设置了相同的过期时间，导致在缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。 解决方案 可以给缓存设置过期时间时加上一个随机值时间，使得每个key的过期时间分布开来，不会集中在同一时刻失效。 建立备份缓存，缓存A和缓存B，A设置超时时间，B不设值超时时间，先从A读缓存，A没有读B，并且更新A缓存和B缓存; 加锁排队，实现同上; 3. 缓存击穿一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到DB，造成瞬时DB请求量大、压力骤增。 解决方案 在访问key之前，采用SETNX（set if not exists）来设置另一个短期key来锁住当前key的访问，访问结束再删除该短期key。 4. 缓存并发竞争多个redis的client同时set key引起的并发问题（例如：多客户端同时并发写一个key，一个key的值是1，本来按顺序修改为2,3,4，最后是4，但是顺序变成了4,3,2，最后变成了2） 解决方案 如果对这个key操作，不要求顺序：准备一个分布式锁，大家去抢锁，抢到锁就做set操作即可。 如果对这个key操作，要求顺序： 分布式锁+时间戳（假设系统B先抢到锁，将key1设置为{ValueB 7:05}。接下来系统A抢到锁，发现自己的key1的时间戳早于缓存中的时间戳（7:00&lt;7:05），那就不做set操作了） 利用消息队列（把Redis.set操作放在队列中使其串行化,必须的一个一个执行） 5. 缓存和数据库一致性解决方案5.1 并发量、一致性要求都不是很高的场景 写流程：先淘汰缓存，再写数据库，之后再异步将数据刷回缓存 读流程：先读缓存，如果缓存没读到，则去读DB，之后再异步将数据刷回缓存 优点：实现起来简单，异步刷新，补缺补漏 缺点：容灾不足，并发问题，一个比较大的缺陷在于刷新缓存有可能会失败，而失败之后缓存中数据就一直会处于错误状态，所以它并不能保证数据的最终一致性 5.2 业务简单，读写QPS比较低的场景（QPS每秒查询率(Query Per Second)） 写流程：先淘汰缓存，再写数据库，监听从库binlog，通过解析binlog来刷新缓存 读流程：第一步先读缓存，如果缓存没读到，则去读DB，之后再异步将数据刷回缓存 优点：容灾 缺点：只适合简单业务，复杂业务容易发生并发问题（例如：读/写的时候，缓存中的数据已失效，此时又发生了更新） 5.3 业务只需要达到“最终一致性”要求的场景 写流程：先淘汰缓存，再写数据库，监听从库binlog，通过分析binlog我们解析出需要需要刷新的数据标识，然后将数据标识写入MQ，接下来就消费MQ，解析MQ消息来读库获取相应的数据刷新缓存。 读流程：第一步先读缓存，如果缓存没读到，则去读DB，之后再异步将数据标识写入MQ（这里MQ与写流程的MQ是同一个），接下来就消费MQ，解析MQ消息来读库获取相应的数据刷新缓存。 优点：容灾完善，无并发问题 缺点：只能达到”最终一致性” 5.4 强一致性的场景 写流程：我们把修改的数据通过Cache_0标记“正在被修改”，如果标记成功，写数据库，删除缓存，监听从库binlog，通过分析binlog我们解析出需要需要刷新的数据标识，然后将数据标识写入MQ，接下来就消费MQ，解析MQ消息来读库获取相应的数据刷新缓存； 那如果标记失败，则要放弃这次修改。 读流程：先读Cache_0，看看要读的数据是否被标记，如果被标记，则直接读主库；如果没有被标记，读缓存，如果缓存没读到，则去读DB，之后再异步将数据标识写入MQ（这里MQ与写流程的MQ是同一个），接下来就消费MQ，解析MQ消息来读库获取相应的数据刷新缓存。 优点：容灾完善，无并发问题 缺点：增加Cache_0强依赖，复杂度是比较高的（涉及到Databus、MQ、定时任务等等组件）","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"并发","slug":"concurrent","permalink":"http://chaooo.github.io/tags/concurrent/"},{"name":"Redis","slug":"Redis","permalink":"http://chaooo.github.io/tags/Redis/"}]},{"title":"【并发】深入学习Redis及集群","date":"2019-09-20T08:19:26.000Z","path":"article/20190920.html","text":"Redis本质上是一个Key-Value类型的内存数据库，整个数据库统统加载在内存当中进行操作，定期通过异步操作把数据库数据flush到硬盘上进行保存。因为是纯内存操作，Redis的性能非常出色，每秒可以处理超过10万次读写操作，是已知性能最快的Key-Value DB。Redis的出色之处不仅仅是性能，Redis最大的魅力是支持保存多种数据结构，此外单个value的最大限制是1GB。另外Redis也可以对存入的Key-Value设置expire时间。 Redis的主要缺点是数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。 1. Redis数据结构及命令操作1.1 基本概念及操作 默认16个数据库，类似数组下表从零开始，初始默认使用零号库； 统一密码管理，16个库都是同样密码，要么都OK要么一个也连接不上，redis默认端口是6379； select命令切换数据库：select 0-15； dbsize：查看当前数据库的key的数量； flushdb：清空当前库； flushall；通杀全部库； 1.2 Redis数据结构redis存储的是：key-value格式的数据，其中key都是字符串，value有5种不同的数据结构:String、Hash、List、Set、Zset(Sorted Set) String：set, get, del, append, strlen Hash：hset, hget, hdel, hmset(批量设值), hmget, hgetall List：lpush, rpush, lrange, lpop(删除), rpop, lindex Set：sadd, smembers, srem(根据可以移除member), sismember(判断是否为key的成员) ZSet：zadd, zrange, zrem 1.3 Redis键(key)–常用命令介绍 keys *：查看所有 key ； exists key的名字：判断某个 key 是否存在； move key dbID（0-15）： 当前库就没有了，被移除了； expire key 秒钟： 为给定的 key 设置过期时间； ttl key： 查看还有多少秒过期，-1表示永不过期，-2表示已过期； type key： 查看你的 key 是什么类型； 2. Redis持久化Redis作为一个键值对内存数据库(NoSQL)，数据都存储在内存当中，在处理客户端请求时，所有操作都在内存当中进行，为了避免内存中数据丢失，Redis提供了RDB和AOF两种不同的数据持久化方式。 2.1 RDB（Redis DataBase）RDB是一种快照存储持久化方式，具体就是将Redis某一时刻的内存数据保存到硬盘的文件当中，默认保存的文件名为dump.rdb，而在Redis服务器启动时，会重新加载dump.rdb文件的数据到内存当中恢复数据。 开启RDB持久化方式一：save命令，或bgsave(异步) 开启方式二：在Redis配置文件redis.conf配置，配置完后启动时加载：redis-server redis.conf 123save 900 1 # 900s内至少达到一条写命令save 300 10 # 300s内至少达至10条写命令save 60 10000 # 60s内至少达到10000条写命令 RDB的几个优点 与AOF方式相比，通过rdb文件恢复数据比较快。 rdb文件非常紧凑，适合于数据备份。 通过RDB进行数据备，由于使用子进程生成，所以对Redis服务器性能影响较小。 RDB的几个缺点 如果服务器宕机的话，采用RDB的方式会造成某个时段内数据的丢失，比如我们设置10分钟同步一次或5分钟达到1000次写入就同步一次，那么如果还没达到触发条件服务器就死机了，那么这个时间段的数据会丢失。 使用save命令会造成服务器阻塞，直接数据同步完成才能接收后续请求。 使用bgsave命令在forks子进程时，如果数据量太大，forks的过程也会发生阻塞，另外，forks子进程会耗费内存。 2.2 AOF(Append-only file)与RDB存储某个时刻的快照不同，AOF持久化方式会记录客户端对服务器的每一次写操作命令（以日志的形式），并将这些写操作以Redis协议追加保存到以后缀为aof文件末尾，在Redis服务器重启时，会加载并运行aof文件的命令，以达到恢复数据的目的。 开启方式：在Redis配置文件redis.conf配置 123456appendonly yes # 开启aof机制appendfilename &quot;appendonly.aof&quot; # aof文件名# 写入策略,always表示每个写操作都保存到aof文件中,也可以是everysec(每秒写入一次)或no(操作系统处理)appendfsync alwaysno-appendfsync-on-rewrite no # 默认不重写aof文件dir ~/redis/ # 保存目录 aof文件太大，加载aof文件恢复数据时，就会非常慢，为了解决，Redis通过重写aof，可以生成一个恢复当前数据的最少命令集，两种方式：配置no-appendfsync-on-rewrite(默认no)，或者客户端向服务器发送bgrewriteaof命令 AOF的优点：AOF只是追加日志文件，因此对服务器性能影响较小，速度比RDB要快，消耗的内存较少。 AOF的缺点：AOF方式生成的日志文件太大，即使通过AFO重写，文件体积仍然很大。恢复数据的速度比RDB慢。 当RDB与AOF两种方式都开启时，Redis会优先使用AOF日志来恢复数据，因为AOF保存的文件比RDB文件更完整。 2.2.1 AOF文件修复 备份被写坏的AOF文件 运行redis-check-aof –fix进行修复 用diff -u来看下两个文件的差异，确认问题点 重启redis，加载修复后的AOF文件 3. Redis的高并发和快速原因 redis是基于内存的，内存的读写速度非常快； redis是单线程的，省去了很多上下文切换线程的时间； redis使用多路复用技术，可以处理并发的连接。非阻塞IO 内部实现采用epoll，采用了epoll+自己实现的简单的事件框架。epoll中的读、写、关闭、连接都转化成了事件，然后利用epoll的多路复用特性，绝不在io上浪费一点时间。 另外，数据结构也帮了不少忙，Redis全程使用hash结构，读取速度快，还有一些特殊的数据结构，对数据存储进行了优化，如压缩表，对短数据进行压缩存储，再如，跳表，使用有序的数据结构加快读取的速度。 还有一点，Redis采用自己实现的事件分离器，效率比较高，内部采用非阻塞的执行方式，吞吐能力比较大。 4. Redis利用哨兵(Sentinel)，复制(Replication)这两个功能来保证高可用 哨兵(Sentinel)：可以管理多个Redis服务器，它提供了监控，提醒以及自动的故障转移的功能。 集群监控：负责监控Redis master和slave进程是否正常工作 消息通知：如果某个Redis实例有故障，那么哨兵负责发送消息作为报警通知给管理员 故障转移：如果master node挂掉了，会自动转移到slave node上 配置中心：如果故障转移发生了，通知client客户端新的master地址 复制(Replication)：则是负责让一个Redis服务器可以配备多个备份的服务器。 从数据库向主数据库发送sync(数据同步)命令。 主数据库接收同步命令后，会保存快照，创建一个RDB文件。 当主数据库执行完保持快照后，会向从数据库发送RDB文件，而从数据库会接收并载入该文件。 主数据库将缓冲区的所有写命令发给从服务器执行。 以上处理完之后，之后主数据库每执行一个写命令，都会将被执行的写命令发送给从数据库。 5. Redis 主从复制、哨兵和集群这三个有什么区别主从复制是为了数据备份，哨兵是为了高可用，Redis主服务器挂了哨兵可以切换，集群则是因为单实例能力有限，搞多个分散压力。 主从模式：读写分离，备份，一个Master可以有多个Slaves。 哨兵entinel：监控，自动转移，哨兵发现主服务器挂了后，就会从slave中重新选举一个主服务器。 集群Cluster：为了解决单机Redis容量有限的问题，将数据按一定的规则分配到多台机器，内存/QPS不受限于单机，可受益于分布式集群高扩展性。 6. Redis Cluster集群Redis Cluster，是Redis 3.0开始引入的分布式存储方案。集群由多个节点(Node)组成，Redis的数据分布在这些节点中。集群中的节点分为主节点和从节点：只有主节点负责读写请求和集群信息的维护；从节点只进行主节点数据和状态信息的复制。 集群的作用： 数据分区：数据分区(或称数据分片)是集群最核心的功能。 高可用：集群支持主从复制和主节点的自动故障转移（与哨兵类似）；当任一节点发生故障时，集群仍然可以对外提供服务。 6.1 Redis Cluster集群的搭建可以分为四步： 启动节点：将节点以集群模式启动，此时节点是独立的，并没有建立联系； 节点握手：让独立的节点连成一个网络； 分配槽：将16384个槽分配给主节点； 指定主从关系：为从节点指定主节点。 6.2 Redis Cluster工作原理 客户端与Redis节点直连,不需要中间Proxy层，直接连接任意一个Master节点 根据公式HASH_SLOT=CRC16(key) mod 16384，计算出映射到哪个分片上，然后Redis会去相应的节点进行操作 12345 CRC16(key) | 0~5460 | &lt;--Slot--|Redis(M)|&lt;---|Redis(S可多个从) mode 16384 |Client --------------&gt; | 5461~10922| &lt;--Slot--|Redis(M)|&lt;---|Redis(S可多个从) | |10923~10383| &lt;--Slot--|Redis(M)|&lt;---|Redis(S可多个从) 6.3 Redis Cluster优点: 无需Sentinel哨兵监控，如果Master挂了，Redis Cluster内部自动将Slave切换Master 可以进行水平扩容 支持自动化迁移，当出现某个Slave宕机了，那么就只有Master了，这时候的高可用性就无法很好的保证了，万一master也宕机了，咋办呢？ 针对这种情况，如果说其他Master有多余的Slave ，集群自动把多余的Slave迁移到没有Slave的Master 中。 6.4 Redis Cluster缺点: 批量操作是个坑（不同的key会划分到不同的slot中，因此直接使用mset或者mget等操作是行不通） 资源隔离性较差，容易出现相互影响的情况。 6.5 Redis Cluster总结： Redis Cluster集群架构，不同的key是有可能分配在不同的Redis节点上的，在这种情况下Redis的事务机制是不生效。 单机下的redis可以支持16个数据库（db0 ~ db15），在Redis Cluster集群架构下只有一个数据库空间，即db0。 不同的key会划分到不同的slot中，因此直接使用mset或者mget等操作是行不通。 如果Hash对象非常大，是不支持映射到不同节点的！只能映射到集群中的一个节点上。 Redis集群模式下进行批量操作：如果执行的key数量比较少，就用串行get操作； 如果需要执行的key很多，就使用Hashtag保证这些key映射到同一台redis节点上。 Redis Cluster的架构，是属于分片集群的架构，不做读写分离，因为redis本身在内存上操作，不会涉及IO吞吐，即使读写分离也不会提升太多性能，Redis在生产上的主要问题是考虑容量，单机最多10-20G，key太多降低redis性能.因此采用分片集群结构，已经能保证了我们的性能。其次，用上了读写分离后，还要考虑主从一致性，主从延迟等问题，徒增业务复杂度。","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"并发","slug":"concurrent","permalink":"http://chaooo.github.io/tags/concurrent/"},{"name":"Redis","slug":"Redis","permalink":"http://chaooo.github.io/tags/Redis/"}]},{"title":"【数据库】MySQL索引的使用及优化","date":"2019-09-05T09:04:12.000Z","path":"article/20190905.html","text":"1. 索引的基本概念索引是一种数据结构。对数据库表中一列或多列的值进行排序的数据结构。根据数据库的功能，可以在数据库设计器中创建三种索引：唯一索引、主键索引和聚集索引。提示：尽管唯一索引有助于定位信息，但为获得最佳性能结果，建议改用主键或唯一约束。 索引的作用 快速检索数据，降低数据库的IO成本； 保证数据记录的唯一性； 实现表与表之间的参照完整性； 在使用order by、group by子句进行数据检索时，利用索引可以减少排序和分组的时间，降低CPU的消耗； 索引的缺点 索引的缺点是创建和维护索引需要耗费时间和空间 索引可以提高查询速度，会减慢写入速度 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。 2. 索引的适用场景2.1 适合建索引的场景 主键自动建立唯一索引 频繁作为查询条件的字段应该创建索引 查询中与其他表关联的字段，外键关联建立索引 频繁更新的字段不适合创建索引（更新字段不仅要更新数据本身，而且还要更新索引树） where条件里用不到的字段不创建索引 单键/组合索引的选择问题（在高并发下倾向创建组合索引） 查询中排序的字段，排序的字段若通过索引去访问将大大提高排序速度（索引主要干两件事：检索、排序。） 查询中统计或者分组的字段 2.2 不适合建索引的场景 表记录太少（300万左右性能开始逐渐下降，虽然官方文档说撑得住5-8百万以上，但是根本也不能等到这个时候再去优化，性能肯定会受到影响） 经常增删改的表（why：提高了查询速度，同事却会降低了更新表的速度，入队表进行INSERT,UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存下索引文件）。 数据重复切分布平均的表字段，因此应该只为最经常查询和最经常排序的数据建立索引。注意，如果某个数据列包括许多重复的内容，为他建立索引就没有太大的实际效果了。（加入一个表有10万行的记录，有一个字段A只有True和False两个值，且每个值的分布概率大约为50%，那么对这种表的A字段建立索引一般不会提高数据库的查询速度。再比如对银行卡建立索引，毕竟银行卡没有重复的。索引的选择性是指索引列中不同值的数据与表中的记录数的比，如果一个表中有2000条记录，表索引列就有1980个不同的值，那么这个索引的选择性就是1980/2000=0.99。一个索引的选择性越接近于1，这个索引的效率就越高。） 3. MySQl中索引的结构（B+树）3.1 基本概念： 二叉树：一个节点最多两个子节点，一个节点只存储一个关键字，等于则命中，小于走左节点，大于走右节点； B树：多路搜索树，每个节点存储M/2到M个关键字，所有关键字在整颗树中出现，且只出现一次，非叶子节点可以命中； B+树：在B树基础上，为叶子节点增加链表指针，所有关键字都在叶子节点中出现(有序)，叶子节点才命中； B*树：在B+树基础上，为非叶子节点也增加兄弟链表指针，将节点的最低利用率从1/2提高到2/3； 3.2 B+树的特性： 所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的； 不可能在非叶子结点命中； 非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层； 更适合文件索引系统； 3.3 B+树的三个特点： 关键字数和子树相同 在 B+ 树中，节点的关键字代表子树的最大值，因此关键字数等于子树数。 非叶子节点仅用作索引，它的关键字和子节点有重复元素 除叶子节点外的所有节点的关键字，都在它的下一级子树中同样存在，最后所有数据都存储在叶子节点中。 根节点的最大关键字其实就表示整个 B+ 树的最大元素。 叶子节点用指针连在一起 叶子节点包含了全部的数据，并且按顺序排列，B+ 树使用一个链表将它们排列起来，这样在查询时效率更快。 由于 B+ 树的中间节点不含有实际数据，只有子树的最大数据和子树指针，因此磁盘页中可以容纳更多节点元素，也就是说同样数据情况下，B+ 树会 B 树更加“矮胖”，因此查询效率更快。B+ 树的查找必会查到叶子节点，更加稳定。有时候需要查询某个范围内的数据，由于 B+ 树的叶子节点是一个有序链表，只需在叶子节点上遍历即可，不用像 B 树那样挨个中序遍历比较大小。 3.4 B+ 树的三个优点： 层级更低，IO 次数更少 每次都需要查询到叶子节点，查询性能稳定 叶子节点形成有序链表，范围查询方便 4. 索引的优化4.1 优化法则（口诀）： 全值匹配我最爱，最左前缀要遵守 带头大哥不能死，中间兄弟不能断 索引列上无计算，范围之后全失效 like百分写最右，覆盖索引不写星 不等控制还有or，索引失效要少用 var引号不能丢，SQL优化也不难 4.2 具体描述 全值匹配 怎么建索引就怎么用索引，where后面的条件越来越多精度越来越高，精度越来越高带来的就是长度和花费的代价也就越来越多 最佳左前缀法则 指的是查询从索引的最左前列开始并且不跳过索引中的列。 例如：复合索引A-&gt;B-&gt;C，如果把开头A去掉的话，B，C也就都失效了（带头大哥不能死）；如果把中间B去掉的话，则只会走索引A，而C就失效了（中间兄弟不能断）。 不在索引列上做任何操作(计算、函数、(自动or手动)类型转换)，会导致索引失效而转向全表扫描 存储引擎不能使用索引中范围条件右面的列 例如：select t from test where A=1 and B&gt;2 and C=3，那么B&gt;2后的查询条件失效。 尽量使用覆盖索引————只访问索引的查询（索引列和查询列一致），减少 SELECT *。 MySQL在使用不等于(!= 或&lt;&gt;)的时候无法使用索引会导致全表扫描 is null，is not null 也无法使用索引 like以通配符开头(&#39;%abc...&#39;)mysql索引失效回变成全表扫描的操作（使用覆盖索引可解决），只有通配符在右面(&#39;abc...%&#39;)的才能避免索引失效。 字符串不加单引号索引失效 少用or，用它来连接时会索引失效 5. in 和 exists区别及应用场景5.1 in 和 exists的区别: 如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用in, 反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用exists。 其实我们区分in和exists主要是造成了驱动顺序的改变(这是性能变化的关键)，如果是exists，那么以外层表为驱动表，先被访问，如果是IN，那么先执行子查询，所以我们会以驱动表的快速返回为目标，那么就会考虑到索引及结果集的关系了 ，另外IN时不对NULL进行处理。 in 是把外表和内表作hash 连接，而exists是对外表作loop循环，每次loop循环再对内表进行查询。一直以来认为exists比in效率高的说法是不准确的。 5.2 not in 和not exists 如果查询语句使用了not in 那么内外表都进行全表扫描，没有用到索引； 而not extsts 的子查询依然能用到表上的索引。 所以无论那个表大，用not exists都比not in要快 6. order by 和 group by 优化索引的主要作用就是查找和排序，ORDER BY 子句尽量使用Index方式排序，能避免使用FileSort方式排序，尽可能在索引列上外城排序操作，遵照索引键的最佳左前缀。 6.1 提高ORDER BY速度的技巧 ORDER BY时不要使用SELECT *，只查需要的字段。 增大sort_buffer_size参数大小（根据系统能力去提高，因为这个参数是针对每个进程的） 增大max_length_for_sort_data参数大小 6.2 GROUP BY的优化 GROUP BY实质上是先排序后进行分组，遵照索引的最佳左前缀。 当无法使用索引列，考虑增大max_length_for_sort_data和sort_buffer_size的参数设置。 WHERE 高于 HAVING，能写在WHERE解决的条件就不要去HAVING限定了。 注意：group by 表面上叫分组，但是分组之前比排序。所以说group by和order by两者排序的法则和索引优化的原则几乎是一致的。当然也有不一样的地方，group by 还有having的存在。如果group by错乱，会导致临时表的产生。(就是说group by的顺序不对，建好的索引我用不上，我内部使用了内排序产生了filesort，为了把这些数据挪出来内部建了一张临时表来进行分组) 一般性建议： 对于单值索引，尽量选择针对query过滤性更好的索引 在选择组合索引的时候，当前Query中过滤性最好的字段在索引字段的顺序中，位置越靠左越好。 在选择组合索引的时候，尽量选择可能包含当前query中的where子句中更多字段的索引 尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的。 参考链接：https://www.zhihu.com/people/hen-six-49/activities","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"数据库","slug":"db","permalink":"http://chaooo.github.io/tags/db/"}]},{"title":"【数据库】MySQL慢日志查询分析","date":"2019-08-28T16:26:43.000Z","path":"article/20190829.html","text":"同大多数关系型数据库一样，日志文件是MySQL数据库的重要组成部分。MySQL有几种不同的日志文件，通常包括错误日志文件，二进制日志，通用日志，慢查询日志，等等。这些日志可以帮助我们定位mysqld内部发生的事件，数据库性能故障，记录数据的变更历史，用户恢复数据库等等。 错误日志：记录启动、运行或停止mysqld时出现的问题。 通用日志：记录建立的客户端连接和执行的语句。 更新日志：记录更改数据的语句。该日志在MySQL 5.1中已不再使用。 二进制日志：记录所有更改数据的语句。还用于复制。 慢查询日志：记录所有执行时间超过long_query_time秒的所有查询或不使用索引的查询 Innodb日志：InnoDB redo log(记录了事务的行为，可以很好的通过其对页进行“重做”操作) 1. 开启慢查询日志开启慢查询日志，可以让MySQL记录下查询超过指定时间的语句，通过定位分析性能的瓶颈，才能更好的优化数据库系统的性能。通过show variables like &#39;slow_query%&#39;;查询是否开了慢查询(默认禁用OFF) 1234567mysql&gt; show variables like '%slow_query_log%';+---------------------+------------------------------------------------------+| Variable_name | Value |+---------------------+------------------------------------------------------+| slow_query_log | OFF || slow_query_log_file | D:\\mysql-5.7.27-winx64\\data\\DESKTOP-E9F062A-slow.log |+---------------------+------------------------------------------------------+ slow_query_log 慢查询开启状态 OFF 未开启 ON 为开启slow_query_log_file 慢查询日志存放的位置（这个目录需要MySQL的运行帐号的可写权限，一般设置为MySQL的数据存放目录） 开启慢查询，需要设置slow_query_log参数。当然，如果不是调优需要的话，一般不建议开启该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志写入文件。 12mysql&gt; set global slow_query_log = 1; //设置开启或者关闭，0为关闭，1为开启mysql&gt; set global long_query_time = 3; //设置慢的阙值时间，默认10秒 如果通过终端命令设定的话，需要重新连接或新开一个会话才能看到修改值 使用set global slow_query_log 命令开启慢查询日志，只对当前数据库生效，如果Mysql重启后则会失效。如果要永久生效，必须修改my.cnf配置文件(其他系统变量也是如此) 123456[mysqld]slow_query_log = 1 #开启slow_query_log_file = /mysql-5.7.27-winx64/data/mysql-slow.log #默认host_name_show.loglong_query_time = 3 #默认10秒（查询超过多少秒才记录）log-queries-not-using-indexes = on #如果值设置为ON，则会记录所有没有利用索引的查询，一般在性能调优的时候会暂时开启。log_output = 'FILE,TABLE' #输出的格式(FILE:文本, TABLE:表中, FILE,TABLE:同时输出到文本和表中) 插入一条测试慢查询 1mysql&gt; select sleep(5); 通过MySQL命令查看有多少慢查询 123456mysql&gt; show global status like '%Slow_queries%';+---------------+-------+| Variable_name | Value |+---------------+-------+| Slow_queries | 1 |+---------------+-------+ 2. 慢查询日志分析工具 工具 一般统计 高级统计 语言 优势 针对log mysqldumpslow √ × perl mysql官方自带 slow myprofi √ × php 简单 slow mysql-log-filter √ 部分√ python 简单 slow mysql-explain-slow-log √ × perl 无 slow mysqlbinlog √ × 二进制 mysql官方自带 binary log mysqlsla √ √ perl 总能强大，使用简单，自定义能力强 所有日志，包括自定义日志 pt-query-digest √ √ perl 总能强大，使用简单，自定义能力强 所有日志，包括自定义日志 2.1 mysqldumpslow MySQL自带的慢查询日志分析工具mysqldumpslow主要功能是, 统计不同慢sql的: 出现次数(Count), 执行最长时间(Time), 累计总耗费时间(Time), 等待锁的时间(Lock), 发送给客户端的行总数(Rows), 扫描的行总数(Rows), 用户以及sql语句本身(抽象了一下格式, 比如 limit 1, 20 用 limit N,N 表示).安装后基本使用：1234mysqldumpslow -s r -t 10 /data/mysql/mysql-slow.log //得到返回记录集最多的10个SQLmysqldumpslow -s c -t 10 /data/mysql/mysql-slow.log //得到访问次数最多的10个SQL mysqldumpslow -s t -t 10 -g \"left join\" /data/mysql/mysql-slow.log //得到按照时间排序的前10条里面含有做了连接的查询SQLmysqldumpslow -s r -t 10 /data/mysql/mysql-slow.log | more //另外建议在使用这些命令时结合|和more使用，否则有可能出现爆屏情况 2.2 mysqlslahackmysql.com推出的一款日志分析工具(该网站还维护了 mysqlreport, mysqlidxchk 等比较实用的mysql工具) 整体来说, 功能非常强大. 数据报表,非常有利于分析慢查询的原因, 包括执行频率, 数据量, 查询消耗等. 安装后基本使用方法： 1mysqlsla -lt slow -sort t_sum -top 1000 /tmp/slow_query.log 结果选项说明： 总查询次数 (queries total), 去重后的sql数量 (unique), 输出报表的内容排序(sorted by), 最重大的慢sql统计信息(包括 平均执行时间, 等待锁时间, 结果行的总数, 扫描的行总数) Count, sql的执行次数及占总的slow log数量的百分比. Time, 执行时间, 包括总时间, 平均时间, 最小, 最大时间, 时间占到总慢sql时间的百分比. 95% of Time, 去除最快和最慢的sql, 覆盖率占95%的sql的执行时间. Lock Time, 等待锁的时间. 95% of Lock , 95%的慢sql等待锁时间. Rows sent, 结果行统计数量, 包括平均, 最小, 最大数量. Rows examined, 扫描的行数量. Database, 属于哪个数据库 Users, 哪个用户,IP, 占到所有用户执行的sql百分比 Query abstract, 抽象后的sql语句 Query sample, sql语句 mysqlsla常用参数说明： -log-type (-lt) type logs:通过这个参数来制定log的类型，主要有slow, general, binary, msl, udl,分析slow log时通过制定为slow -sort:t_sum:按总时间排序(默认)，c_sum:按总次数排序c_sum_p: sql语句执行次数占总执行次数的百分比。 -top:显示sql的数量，默认是10,表示按规则取排序的前多少条 –statement-filter (-sf) [+-][TYPE]:过滤sql语句的类型，比如select、update、drop，[TYPE] 有SELECT, CREATE, DROP, UPDATE, INSERT，例如”+SELECT,INSERT”，不出现的默认是-，即不包括。 -db：要处理哪个库的日志： 123# 举个例子，只取funsion数据库的select语句，并按照总时间排序，取前1000条数据# 保存到当前目录下的 slow_query.pretty.log文件中mysqlsla -lt slow -sort t_sum -sf \"+select\" -db funsion -top 1000 /tmp/slow_query.log &gt; ./slow_query.pretty.log 深度使用可参考： MySQL日志分析神器之mysqlsla 2.3 pt-query-digestpt-query-digest是用于分析mysql慢查询的一个工具，它可以分析binlog、General log、slowlog，也可以通过SHOWPROCESSLIST或者通过tcpdump抓取的MySQL协议数据来进行分析。可以把分析结果输出到文件中，分析过程是先对查询语句的条件进行参数化，然后对参数化以后的查询进行分组统计，统计出各查询的执行时间、次数、占比等，可以借助分析结果找出问题进行优化。 12# 分析最近12小时内的查询：pt-query-digest --since=12h slow.log &gt; slow_report2.log pt-query-digest语法及重要选项12345678910111213pt-query-digest [OPTIONS] [FILES] [DSN] --create-review-table 当使用--review参数把分析结果输出到表中时，如果没有表就自动创建。 --create-history-table 当使用--history参数把分析结果输出到表中时，如果没有表就自动创建。 --filter 对输入的慢查询按指定的字符串进行匹配过滤后再进行分析 --limit 限制输出结果百分比或数量，默认值是20,即将最慢的20条语句输出，如果是50%则按总响应时间占比从大到小排序，输出到总和达到50%位置截止。 --host mysql服务器地址 --user mysql用户名 --password mysql用户密码 --history 将分析结果保存到表中，分析结果比较详细，下次再使用--history时，如果存在相同的语句，且查询所在的时间区间和历史表中的不同，则会记录到数据表中，可以通过查询同一CHECKSUM来比较某类型查询的历史变化。 --review 将分析结果保存到表中，这个分析只是对查询条件进行参数化，一个类型的查询一条记录，比较简单。当下次使用--review时，如果存在相同的语句分析，就不会记录到数据表中。 --output 分析结果输出类型，值可以是report(标准分析报告)、slowlog(Mysql slow log)、json、json-anon，一般使用report，以便于阅读。 --since 从什么时间开始分析，值为字符串，可以是指定的某个”yyyy-mm-dd [hh:mm:ss]”格式的时间点，也可以是简单的一个时间值：s(秒)、h(小时)、m(分钟)、d(天)，如12h就表示从12小时前开始统计。 --until 截止时间，配合—since可以分析一段时间内的慢查询。 分析pt-query-digest输出结果 总体统计结果 Overall：总共有多少条查询 Time range：查询执行的时间范围 unique：唯一查询数量，即对查询条件进行参数化以后，总共有多少个不同的查询 total：总计 min：最小 max：最大 avg：平均 95%：把所有值从小到大排列，位置位于95%的那个数，这个数一般最具有参考价值 median：中位数，把所有值从小到大排列，位置位于中间那个数 查询分组统计结果 Rank：所有语句的排名，默认按查询时间降序排列，通过–order-by指定 Query ID：语句的ID，（去掉多余空格和文本字符，计算hash值） Response：总的响应时间 time：该查询在本次分析中总的时间占比 calls：执行次数，即本次分析总共有多少条这种类型的查询语句 R/Call：平均每次执行的响应时间 V/M：响应时间Variance-to-mean的比率 Item：查询对象 每一种查询的详细统计结果 由下面查询的详细统计结果，最上面的表格列出了执行次数、最大、最小、平均、95%等各项目的统计。 ID：查询的ID号，和上图的Query ID对应 Databases：数据库名 Users：各个用户执行的次数（占比） Query_time distribution ：查询时间分布, 长短体现区间占比，本例中1s-10s之间查询数量是10s以上的两倍。 Tables：查询中涉及到的表 Explain：SQL语句 3. explain查看执行计划在上面的慢查询中，我们已经将查询时间超过阀值的sql语句过滤了出来，explain+查询语句具体分析是哪里出了问题。MySQL 提供了一个 Explain 命令, 它可以对 select 语句进行分析, 并输出 select 执行的详细信息, 以供开发人员针对性优化. 123456789101112131415mysql&gt; explain select * from user_info where id = 2\\G*************************** 1. row *************************** id: 1 select_type: SIMPLE table: user_info partitions: NULL type: constpossible_keys: PRIMARY key: PRIMARY key_len: 8 ref: const rows: 1 filtered: 100.00 Extra: NULL1 row in set, 1 warning (0.06 sec) 各列的含义如下: id: SELECT 查询的标识符. 每个 SELECT 都会自动分配一个唯一的标识符. select_type: SELECT 查询的类型. SIMPLE, 表示此查询不包含 UNION 查询或子查询 PRIMARY, 表示此查询是最外层的查询 UNION, 表示此查询是 UNION 的第二或随后的查询 DEPENDENT UNION, UNION 中的第二个或后面的查询语句, 取决于外面的查询 UNION RESULT, UNION 的结果 SUBQUERY, 子查询中的第一个 SELECT DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果. table: 查询的是哪个表 partitions: 匹配的分区 type: join 类型 type字段比较重要, 它提供了判断查询是否高效的重要依据依据. 通过type字段, 我们判断此次查询是 全表扫描 还是 索引扫描 等. system: 表中只有一条数据. 这个类型是特殊的 const 类型. const: 针对主键或唯一索引的等值查询扫描, 最多只返回一行数据. const 查询速度非常快, 因为它仅仅读取一次即可. eq_ref: 此类型通常出现在多表的 join 查询, 表示对于前表的每一个结果, 都只能匹配到后表的一行结果. 并且查询的比较操作通常是 =, 查询效率较高. ref: 此类型通常出现在多表的 join 查询, 针对于非唯一或非主键索引, 或者是使用了 最左前缀 规则索引的查询. range: 表示使用索引范围查询, 通过索引字段范围获取表中部分数据记录. 这个类型通常出现在 =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, IN() 操作中. index: 表示全索引扫描(full index scan), 和 ALL 类型类似, 只不过 ALL 类型是全表扫描, 而 index 类型则仅仅扫描所有的索引, 而不扫描数据. ALL: 表示全表扫描, 这个类型的查询是性能最差的查询之一. 通常来说, 我们的查询不应该出现 ALL 类型的查询, 因为这样的查询在数据量大的情况下, 对数据库的性能是巨大的灾难. possible_keys: 此次查询中可能选用的索引 表示 MySQL 在查询时, 能够使用到的索引. 注意, 即使有些索引在 possible_keys 中出现, 但是并不表示此索引会真正地被 MySQL 使用到. MySQL 在查询时具体使用了哪些索引, 由 key 字段决定. key: 此字段是 MySQL 在当前查询时所真正使用到的索引. key_len: 表示查询优化器使用了索引的字节数. 这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到. ref: 哪个字段或常数与 key 一起被使用 rows: 显示此查询一共扫描了多少行. 这个是一个估计值. rows 也是一个重要的字段. MySQL 查询优化器根据统计信息, 估算 SQL 要查找到结果集需要扫描读取的数据行数, 这个值非常直观显示 SQL 的效率好坏, 原则上 rows 越少越好. filtered: 表示此查询条件所过滤的数据的百分比 extra: EXplain 中的很多额外的信息会在 Extra 字段显示 Using filesort: 当 Extra 中有 Using filesort 时, 表示 MySQL 需额外的排序操作, 不能通过索引顺序达到排序效果. 一般有 Using filesort, 都建议优化去掉, 因为这样的查询 CPU 资源消耗大. Using index: “覆盖索引扫描”, 表示查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明性能不错 Using temporary: 查询有使用临时表, 一般出现于排序, 分组和多表 join 的情况, 查询效率不高, 建议优化. type 类型的性能比较通常来说, 不同的 type 类型的性能关系如下: ALL &lt; index &lt; range ~ index_merge &lt; ref &lt; eq_ref &lt; const &lt; system ALL 类型因为是全表扫描, 因此在相同的查询条件下, 它是速度最慢的. 而 index 类型的查询虽然不是全表扫描, 但是它扫描了所有的索引, 因此比 ALL 类型的稍快. 后面的几种类型都是利用了索引来查询数据, 因此可以过滤部分或大部分数据, 因此查询效率就比较高了. 4. MySQL性能分析语句show profileQuery Profile是MySQL自带的一种Query诊断分析工具，可以完整的显示一条sql执行的各方面的详细信息，默认关闭; 看看当前的MySQL版本是否支持: show variables like &#39;profiling&#39;;或show variables like &#39;profiling%&#39;; 1234567mysql&gt; show variables like 'profiling%';+------------------------+-------+| Variable_name | Value |+------------------------+-------+| profiling | OFF || profiling_history_size | 15 |+------------------------+-------+ 使用前需要开启: set profiling = 1; (1:开 / 0:关) 1mysql&gt; set profiling = 1; 运行sql后，查询结果show profiles; 1234567891011121314151617mysql&gt; SHOW PROFILES\\G*************************** 1. row ***************************Query_ID: 1Duration: 0.02949950 Query: explain select * from user*************************** 2. row ***************************Query_ID: 2Duration: 0.03405350 Query: select * from housedemo*************************** 3. row ***************************Query_ID: 3Duration: 0.07813800 Query: select * from house*************************** 4. row ***************************Query_ID: 4Duration: 0.00018150 Query: show prifiles 诊断SQL, show profile Type io for query Query_ID LIMIT部分的用法与SELECT中LIMIT子句一致，不赘述。 Type是可选的，取值范围可以如下： ALL 显示所有性能信息 BLOCK IO 显示块IO操作的次数 CONTEXT SWITCHES 显示上下文切换次数，不管是主动还是被动 CPU 显示用户CPU时间、系统CPU时间 IPC 显示发送和接收的消息数量 MEMORY [暂未实现] PAGE FAULTS 显示页错误数量 SOURCE 显示源码中的函数名称与位置 SWAPS 显示SWAP的次数 1234567891011121314151617181920mysql&gt; show profile cpu,block io for query 3;+----------------------+----------+----------+------------+--------------+---------------+| Status | Duration | CPU_user | CPU_system | Block_ops_in | Block_ops_out |+----------------------+----------+----------+------------+--------------+---------------+| starting | 0.000077 | 0.000000 | 0.000000 | NULL | NULL || checking permissions | 0.000013 | 0.000000 | 0.000000 | NULL | NULL || Opening tables | 0.031992 | 0.000000 | 0.000000 | NULL | NULL || init | 0.000059 | 0.000000 | 0.000000 | NULL | NULL || System lock | 0.000016 | 0.000000 | 0.000000 | NULL | NULL || optimizing | 0.000007 | 0.000000 | 0.000000 | NULL | NULL || statistics | 0.000017 | 0.000000 | 0.000000 | NULL | NULL || preparing | 0.008535 | 0.000000 | 0.000000 | NULL | NULL || executing | 0.000016 | 0.000000 | 0.000000 | NULL | NULL || Sending data | 0.037234 | 0.000000 | 0.000000 | NULL | NULL || end | 0.000011 | 0.000000 | 0.000000 | NULL | NULL || query end | 0.000012 | 0.000000 | 0.000000 | NULL | NULL || closing tables | 0.000014 | 0.000000 | 0.000000 | NULL | NULL || freeing items | 0.000108 | 0.000000 | 0.000000 | NULL | NULL || cleaning up | 0.000030 | 0.000000 | 0.000000 | NULL | NULL |+----------------------+----------+----------+------------+--------------+---------------+ 从图中可以看到开始，打开表，加载，关闭表，释放资源、记录日志，清理的你工作，在这完全可以看到一条SQL的完整生命周期。 日常开发需要注意 如果show profile … for query id；出现了如下四个，则必须优化这条sql。 converting HEAP to MyISAM 查询结果太大， 内存都不够用了网磁盘上搬了 Creating tmp table 创建临时表 拷贝数据到临时表：假设要查询两百万数据，刚好匹配的条件有一百万，恰巧要把这一百万的数据拷贝到临时表，然后再把数据推送给用户，最后再把临时表删掉，这个时候就是导致SQL变慢的罪魁祸首 用完再删除 Copying to tmp table on disk 把内存中临时表复制到磁盘，危险！！！ locked 5. 全局查询日志切记：永远不要再生产环境开启这个功能。全局查询日志有时也能帮助我们来调SQL。但是，切记，这家伙只能在测试环境使用，绝不可以在生产环境使用。 命令启用 12mysql&gt; set global general_log=1; #开启后会把所有的SQL偷偷的记录mysql&gt; set global log_output='TABLE'; 配置启用, 在MySQL的my.cnf中，设置如下： 123456#开启general_log=1#记录日志文件的路径general_log_file=/path/logfile#输出格式log_output=file 此后，你所编写的SQL语句，将会记录到MySQL库里的general_log表，可以用下面的命令查看。 1select * from mysql.general_log; 场景：如果需要做系统的定案分析(今天下午2点-3点出的故障），如果要观察和复现的话，可以在测试环境下模拟一遍，然后把所有的问题复现一下。那么用general_log这个表来收集什么时间段发生了什么样的SQL，帮助我们定位收集。","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"数据库","slug":"db","permalink":"http://chaooo.github.io/tags/db/"}]},{"title":"【Java知识梳理】深入JVM(三)-内存模型JMM 与 锁机制","date":"2019-08-27T09:30:45.000Z","path":"article/20190827.html","text":"Java内存模型(Java Memory Model)Java Memory Model(JMM)描述了Java程序中各种变量(线程共享变量)的访问规则，以及在JVM中将变量存储到内存中和从内存中读取变量这样的底层细节(可见性,有序性,原子性)。 所有的变量都存储在主内存中 每个线程都有自己的独立的工作内存，里面保存该线程使用到的变量的副本(来自主内存的拷贝) JMM规定： 线程对共享变量的所有操作都必须在自己的工作内存中进行，不能直接从主内存中读写。 不同线程之间无法直接访问其他线程工作内存中的变量，线程间变量值的传递需要通过主内存来完成。 1. JMM-同步八种操作JMM模型下,线程间通信必须要经过主内存。JMM数据原子操作:lock -&gt; read -&gt; load -&gt; use -&gt; assign -&gt; store -&gt; write -&gt; unlock lock（锁定）：将主内存变量加锁，标识为线程独占状态 read（读取）：从主内存读取数据到工作内存 load（载入）：将读取的数据写入工作内存 use（使用）：将工作内存数据传递给执行引擎来计算 assign（赋值）：将计算好的值赋值给工作内存的变量 store（存储）：把工作内存数据存储到主内存 write（写入）：把store过来的变量值赋值给主内存的变量 unlock（解锁）：将主内存变量解锁，释放后的变量才可以被其他线程锁定。 在执行上述八种基本操作时，必须满足如下规则： 从主复制到工作,必须按顺序执行read-&gt;load操作; 从工作同步到主内存,必须按顺序执行store-&gt;write操作; 但不保证必须是连续执行 不允许read-&gt;load、store-&gt;write操作之一单独出现 assign操作改变数据后必须同步到主内存,不允许把没有发生过assign操作的数据同步到主内存 一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量 一个变量在同一时刻只允许一条线程对其进行lock操作,lock和unlock必须成对出现 lock操作会清空工作内存中此变量的值，执行引擎使用前需要重新执行load或assign操作初始化变量的值 不允许去unlock一个未被锁定 或 被其他线程锁定的变量 unlock之前，必须先同步到主内存中（执行store和write操作） 2. JMM-原子性和数据库事务中的原子性一样，满足原子性特性的操作是不可中断的，要么全部执行成功要么全部执行失败。Synchronized能够实现：原子性(同步) 和 可见性 JMM关于synchronized的两条规定： 线程解锁前，必须把共享变量的最新值刷新到主内存中 线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从内存中重新读取最新的值（注意：加锁与解锁需要是同一把锁） 线程执行互斥代码的过程： 获得互斥锁 清空工作内存 从主内存拷贝变量的最新副本到工作内存 执行代码 将更改后的共享变量的值刷新到主内存 释放互斥锁 2. JMM-可见性多个线程访问同一个共享变量时，其中一个线程对这个共享变量值的修改，其他线程能够立刻获得修改以后的值。volatile能够实现可见性，但不保证原子性 深入来说：通过加入内存屏障和禁止重排序优化来实现的。 对volatile变量执行写操作时，会在写操作后加入一条store屏蔽指令 对volatile变量执行读操作时，会在读操作前加入一条load屏蔽指令 通俗地讲：volatile变量在每次被线程访问时，都强迫从主内存中重读该变量的值，而当该变量发生变化时，又会强迫线程将最新的值刷新到主内存。这样任何时刻，不同的线程总能看到该变量的最新值。 线程写volatile变量的过程： 改变线程工作内存中volatile变量副本的值 将改变后的副本的值从工作内存刷新到主内存 线程读volatile变量的过程： 从主内存中读取volatile变量的最新值到线程的工作内存中 从工作内存中读取volatile变量的副本 2.1 happens-before规则在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这2个操作之间必须要存在happens-before关系。 定义: 如果一个操作在另一个操作之前发生(happens-before),那么第一个操作的执行结果将对第二个操作可见, 而且第一个操作的执行顺序排在第二个操作之前。 两个操作之间存在happens-before关系，并不意味着一定要按照happens-before原则制定的顺序来执行。如果重排序之后的执行结果与按照happens-before关系来执行的结果一致，那么这种重排序并不非法。 happens-before规则： 程序次序规则：在一个线程内一段代码的执行结果是有序的。就是还会指令重排，但是随便它怎么排，结果是按照我们代码的顺序生成的不会变！ 锁定规则：一个unLock操作先行发生于后面对同一个锁的lock操作；论是单线程还是多线程，必须要先释放锁，然后其他线程才能进行lock操作 volatile变量规则：就是如果一个线程先去写一个volatile变量，然后一个线程去读这个变量，那么这个写操作的结果一定对读的这个线程可见。 传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C 线程启动规则：在主线程A执行过程中，启动子线程B，那么线程A在启动子线程B之前对共享变量的修改结果对线程B可见 线程终止规则：在主线程A执行过程中，子线程B终止，那么线程B在终止之前对共享变量的修改结果在线程A中可见。 线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程代码检测到中断事件的发生，可以通过Thread.interrupted()检测到是否发生中断 对象终结规则：这个也简单的，就是一个对象的初始化的完成，也就是构造函数执行的结束一定 happens-before它的finalize()方法。 3. JMM-有序性编译器和处理器为了优化程序性能而对指令序列进行重排序，也就是你编写的代码顺序和最终执行的指令顺序是不一致的，重排序可能会导致多线程程序出现内存可见性问题。 我们编写的源代码到最终执行的指令，会经过三种重排序: 源代码–&gt;编译器优化重排序–&gt;指令级并行重排序–&gt;内存系统重排序–&gt;最终执行的指令 3.1 as-if-serial语义as-if-serial语义：不管怎么重排序(编译器和处理器为了提高并行度做的优化),(单线程)程序的执行结果不会改变。编译器、runtime和处理器都必须遵守as-if-serial语义。多线程中程序交错执行时, 重排序可能造成内存可见性问题, 可能会改变程序的执行结果。 有序性规则表现在以下两种场景: 线程内和线程间 线程内: 指令会按照一种“串行”(as-if-serial)的方式执行，此种方式已经应用于顺序编程语言。 线程间: 一个线程“观察”到其他线程并发地执行非同步的代码时，任何代码都有可能交叉执行。唯一起作用的约束是：对于同步方法，同步块以及volatile字段的操作仍维持相对有序。 As-if-serial只是保障单线程不会出问题，所以有序性保障，可以理解为把As-if-serial扩展到多线程，那么在多线程中也不会出现问题 从底层的角度来看，是借助于处理器提供的相关指令内存屏障来实现的 对于Java语言本身来说，Java已经帮我们与底层打交道，我们不会直接接触内存屏障指令，java提供的关键字synchronized和volatile，可以达到这个效果，保障有序性（借助于显式锁Lock也是一样的，Lock逻辑与synchronized一致） 3.2 著名的双检锁(double-checked locking)模式实现单例1234567891011121314151617public class Singleton &#123; // volatile保证happens-before规则,重排序被禁止 private volatile static Singleton INSTANCE = null; private Singleton() &#123;&#125; public Singleton getInstance() &#123; // 实例没创建,才进入内部的synchronized代码块 if (null == INSTANCE) &#123; synchronized (Singleton.class) &#123; // 判断其他线程是否已经创建实例 if (null == INSTANCE) &#123; INSTANCE = new Singleton(); &#125; &#125; &#125; return INSTANCE; &#125;&#125; 如果不用volatile修饰INSTANCE,可能造成访问的是一个初始化未完成的对象; 使用了volatile关键字后，重排序被禁止，所有的写（write）操作都将发生在读（read）操作之前。 4. 锁机制 锁的状态总共有四种：无锁状态、偏向锁、轻量级锁和重量级锁。随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级的重量级锁（但是锁的升级是单向的，也就是说只能从低到高升级，不会出现锁的降级）。 锁的状态是通过对象监视器在对象头中的字段来表明的。 四种状态会随着竞争的情况逐渐升级，而且是不可逆的过程，即不可降级。 这四种状态都不是Java语言中的锁，而是Jvm为了提高锁的获取与释放效率而做的优化(使用synchronized时)。 4.1 对象头Mark Mark Word,对象头的标记,32位: 描述对象的hash,锁信息,垃圾回收标记,分代年龄 指向锁记录的指针 指向monitor的指针 GC标记 偏向锁线程ID 4.2 偏向锁Java偏向锁(Biased Locking)是Java6引入的一项多线程优 大部分情况锁是没有竞争的,所以可以通过偏向锁来提高性能; 所谓偏向,就是偏心,即锁会偏向于当前已经占有锁的线程,总是由同一线程多次获得; 会在对象头和栈帧中的锁记录里存储锁偏向的线程ID 只要没有竞争,获得偏向锁的线程,在将来进入同步块,不需要做同步 当其他线程请求相同的锁时,偏向模式结束 -XX:+UseBiasedLocking(默认开启) 在竞争激烈的场合,偏向锁会增加系统负担 4.3 轻量级锁轻量级锁是指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。 普通的锁处理性能不够理想,轻量级锁是一种快速的锁定方法. 过程: 如果对象没有被锁定: 将对象头的Mark指针保存到锁对象中 将对象头设置为指向锁的指针(在线程栈空间中) 如果轻量级锁失败,表示存在竞争,升级为重量级锁(常规锁) 在没有锁竞争的情况下,减少传统锁使用OS互斥量产生的性能损耗 在竞争激烈的场合,轻量级锁会多做很多额外操作,导致性能下降 4.4 自旋锁自旋锁是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU。 当竞争存在时,如果线程可以很快获得锁,那么可以不在OS层挂起线程,让线程做几个空操作(自旋) 如果同步块很长,自旋失败,会降低系统性能 如果同步块很短,自旋成功,节省线程挂起切换时间,提升系统性能 4.5 重量级锁重量级锁是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让其他申请的线程进入阻塞，性能降低。 4.6 synchronized的执行过程： 检测Mark Word里面是不是当前线程的ID，如果是，表示当前线程处于偏向锁 如果不是，则使用CAS将当前线程的ID替换Mard Word，如果成功则表示当前线程获得偏向锁，置偏向标志位1 如果失败，则说明发生竞争，撤销偏向锁，进而升级为轻量级锁。 当前线程使用CAS将对象头的Mark Word替换为锁记录指针，如果成功，当前线程获得锁 如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。 如果自旋成功则依然处于轻量级状态。 如果自旋失败，则升级为重量级锁。 以上几种锁都是JVM自己内部实现，当我们执行synchronized同步块的时候jvm会根据启用的锁和当前线程的争用情况，决定如何执行同步操作； 5. Java语言层面对锁的优化 减少锁持有时间 不需要同步执行的代码，能不放在同步快里面执行就不要放在同步快内，可以让锁尽快释放； 减少锁的粒度 它的思想是将物理上的一个锁，拆成逻辑上的多个锁，增加并行度，从而降低锁竞争。它的思想也是用空间来换时间； java中很多数据结构都是采用这种方法提高并发操作的效率： ConcurrentHashMap: 使用Segment数组,Segment继承自ReenTrantLock，所以每个Segment就是个可重入锁，每个Segment 有一个HashEntry&lt; K,V &gt;数组用来存放数据，put操作时，先确定往哪个Segment放数据，只需要锁定这个Segment，执行put，其它的Segment不会被锁定；所以数组中有多少个Segment就允许同一时刻多少个线程存放数据，这样增加了并发能力。 LongAdder:实现思路也类似ConcurrentHashMap，LongAdder有一个根据当前并发状况动态改变的Cell数组，Cell对象里面有一个long类型的value用来存储值;开始没有并发争用的时候或者是cells数组正在初始化的时候，会使用cas来将值累加到成员变量的base上，在并发争用的情况下，LongAdder会初始化cells数组，在Cell数组中选定一个Cell加锁，数组有多少个cell，就允许同时有多少线程进行修改，最后将数组中每个Cell中的value相加，在加上base的值，就是最终的值；cell数组还能根据当前线程争用情况进行扩容，初始长度为2，每次扩容会增长一倍，直到扩容到大于等于cpu数量就不再扩容，这也就是为什么LongAdder比cas和AtomicInteger效率要高的原因，后面两者都是volatile+cas实现的，他们的竞争维度是1，LongAdder的竞争维度为“Cell个数+1”为什么要+1？因为它还有一个base，如果竞争不到锁还会尝试将数值加到base上； 拆锁的粒度不能无限拆，最多可以将一个锁拆为当前cup数量个锁即可； 锁粗化 大部分情况下我们是要让锁的粒度最小化，锁的粗化则是要增大锁的粒度(如:循环内的操作); 锁分离 使用读写锁: ReentrantReadWriteLock 是一个读写锁，读操作加读锁，可以并发读，写操作使用写锁，只能单线程写； 读写分离: CopyOnWriteArrayList 、CopyOnWriteArraySet CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器 CopyOnWrite并发容器用于读多写少的并发场景，因为，读的时候没有锁，但是对其进行更改的时候是会加锁的，否则会导致多个线程同时复制出多个副本，各自修改各自的； LinkedBlockingQueue: LinkedBlockingQueue也体现了这样的思想，在队列头入队，在队列尾出队，入队和出队使用不同的锁，相对于LinkedBlockingArray只有一个锁效率要高； 锁消除 在即时编译时,如果发现不可能被共享的对象,则可以消除对象的锁操作 无锁(如CAS) 如果需要同步的操作执行速度非常快，并且线程竞争并不激烈，这时候使用CAS效率会更高，因为加锁会导致线程的上下文切换，如果上下文切换的耗时比同步操作本身更耗时，且线程对资源的竞争不激烈，使用volatiled+CAS操作会是非常高效的选择； 消除缓存行的伪共享 除了我们在代码中使用的同步锁和jvm自己内置的同步锁外，还有一种隐藏的锁就是缓存行，它也被称为性能杀手。在多核cup的处理器中，每个cup都有自己独占的一级缓存、二级缓存，甚至还有一个共享的三级缓存，为了提高性能，cpu读写数据是以缓存行为最小单元读写的；32位的cpu缓存行为32字节，64位cup的缓存行为64字节，这就导致了一些问题。 6. CAS与原子类CAS即Compare and Swap翻译过来就是比较并替换, 它体现了一种乐观锁的思想 (synchronized为悲观锁思想); 结合CAS和volatile可以实现无锁并发(非阻塞同步),适用于竞争不激烈,多核CPU的场景下(竞争激烈,重试频繁发生会影响效率); CAS算法涉及到三个操作数: 内存值V, 旧值A, 新值B; 当且仅当V==A时，CAS用新值B来更新V，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个自旋操作，即不断的重试。 CAS底层依赖一个Unsafe类来直接调用操作系统底层的CAS指令; 6.1 Unsafe类java中CAS操作依赖于Unsafe类，Unsafe类所有方法都是native的，直接调用操作系统底层资源执行相应任务，它可以像C一样操作内存指针，是非线程安全的。 Unsafe里的CAS 操作相关实现: compareAndSwapObject,compareAndSwapInt,compareAndSwapLong12345//第一个参数o为给定对象，offset为对象内存的偏移量，通过这个偏移量迅速定位字段并设置或获取该字段的值，//expected表示期望值，x表示要设置的值，下面3个方法都通过CAS原子指令执行操作。public final native boolean compareAndSwapObject(Object o, long offset,Object expected, Object x);public final native boolean compareAndSwapInt(Object o, long offset,int expected,int x);public final native boolean compareAndSwapLong(Object o, long offset,long expected,long x); 6.2 原子操作类并发包JUC(java.util.concurrent)中的原子操作类(Atomic系列),底层是基于CAS + volatile实现的. AtomicBoolean：原子更新布尔类型 AtomicInteger：原子更新整型 AtomicLong：原子更新长整型 下面看AtomicInteger类的部分源码： 1234567891011121314public class AtomicInteger extends Number implements java.io.Serializable&#123; //获取指针类Unsafe private static final Unsafe unsafe = Unsafe.getUnsafe(); //省略...获取内存偏移量等 //如果当前值为expect，则设置为update(当前值指的是value变量) public final boolean compareAndSet(int expect, int update) &#123; return unsafe.compareAndSwapInt(this, valueOffset, expect, update); &#125; //当前值加1返回旧值，底层CAS操作 public final int getAndIncrement() &#123; return unsafe.getAndAddInt(this, valueOffset, 1); &#125; //省略...其他方法&#125; AtomicInteger基本是基于Unsafe类中CAS相关操作实现的，是无锁操作。再看Unsafe类中的getAndAddInt()方法，该方法执行一个CAS操作，保证线程安全。 12345678//Unsafe类中的getAndAddInt方法(JDK8)public final int getAndAddInt(Object o, long offset, int delta) &#123; int v; do &#123; v = getIntVolatile(o, offset); &#125; while (!compareAndSwapInt(o, offset, v, v + delta)); return v;&#125; 可看出getAndAddInt通过一个while循环不断的重试更新要设置的值，直到成功为止，调用的是Unsafe类中的compareAndSwapInt方法，是一个CAS操作方法。 6.3 CAS操作中可能会带来的ABA问题ABA问题是指在CAS操作时，其他线程将变量值A改为了B，但是又被改回了A，等到本线程使用期望值A与当前变量进行比较时，发现变量A没有变，于是CAS就将A值进行了交换操作，但是实际上该值已经被其他线程改变过，这与乐观锁的设计思想不符合。 无法正确判断这个变量是否已被修改过，一般称这种情况为ABA问题。 ABA问题一般不会有太大影响，产生几率也比较小。但是并不排除极特殊场景下会造成影响，因此需要解决方法： AtomicStampedReference类 AtomicMarkableReference类 AtomicStampedReference类: 一个带有时间戳的对象引用，每次修改时，不但会设置新的值，还会记录修改时间。在下一次更新时，不但会对比当前值和期望值，还会对比当前时间和期望值对应的修改时间，只有二者都相同，才会做出更新。解决了反复读写时，无法预知值是否已被修改的窘境。 底层实现为：一个键值对Pair存储数据和时间戳，并构造volatile修饰的私有实例；两者都符合预期才会调用Unsafe的compareAndSwapObject方法执行数值和时间戳替换。 AtomicMarkableReference类: 一个boolean值的标识，true和false两种切换状态表示是否被修改。不靠谱。","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"java","slug":"java","permalink":"http://chaooo.github.io/tags/java/"}]},{"title":"【Java知识梳理】深入JVM(二)-类文件结构 与 类加载机制","date":"2019-08-25T11:29:48.000Z","path":"article/20190825.html","text":"1. 类文件结构Class文件是一组以 8 位字节为基础单位的二进制流，各个数据严格按照顺序紧凑的排列在 Class 文件中，中间无任何分隔符，这使得整个 Class 文件中存储的内容几乎全部都是程序运行的必要数据，没有空隙存在。当遇到需要占用 8 位字节以上空间的数据项时，会按照高位在前的方式分割成若干个 8 位字节进行存储。Java 虚拟机规范规定 Class 文件格式采用一种类似与 C 语言结构体的微结构体来存储数据，这种伪结构体中只有两种数据类型：无符号数和表。 无符号数：属于基本数据类型，以u1、u2、u4、u8来代表1个字节、2个字节、4个字节、8个字节的无符号数， 无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成字符串值。 表：由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性地以「_info」结尾。表用于描述有层次关系的复合结构的数据，整个 Class 文件就是一张表。 根据 Java 虚拟机规范，类文件由单个 ClassFile 结构组成： 123456789101112131415161718ClassFile &#123; u4 magic; //Class文件的标志(魔数) u2 minor_version; //Class的小版本号 u2 major_version; //Class的大版本号 u2 constant_pool_count; //常量池的数量 cp_info constant_pool[constant_pool_count-1];//常量池 u2 access_flags; //Class的访问标记 u2 this_class; //当前类 u2 super_class; //父类 u2 interfaces_count; //接口 u2 interfaces[interfaces_count];//一个类可以实现多个接口 u2 fields_count; //Class文件的字段属性 field_info fields[fields_count]; //一个类会可以有个字段 u2 methods_count; //Class文件的方法数量 method_info methods[methods_count];//一个类可以有个多个方法 u2 attributes_count; //此类的属性表中的属性数 attribute_info attributes[attributes_count];//属性表集合&#125; 1.1 魔数 (Magic Number) Class文件的0~3字节(前四个字节: ca fe ba be) 作用: 确定这个文件是否为一个能被虚拟机接收的Class文件 1.2 Class文件版本 4~7字节, 其中45次版本号,67主版本号(如jdk8主版本号是: 00 34) 1.3 常量池 8~9字节表示16进制常量池数量,其后紧跟具体常量池, 常量池的数量是 constant_pool_count-1（常量池计数器是从1开始计数的，将第0项常量空出来是有特殊考虑的，索引值为0代表“不引用任何一个常量池项”） 常量池主要存放两大常量: 字面量和符号引用 字面量: Java语言层面的常量概念(String,final等) 符号引用: 编译原理方面的概念(类和接口的全限定名\\字段的名称和描述符\\方法的名称和描述符) 常量池中每一项常量都是一个表，这14种表有一个共同的特点：开始的第一位是一个 u1 类型的标志位 -tag 来标识常量的类型，代表当前这个常量属于哪种常量类型 .class文件可以通过javap -v class类名 指令来看一下其常量池中的信息(javap -v class类名-&gt; temp.txt ：将结果输出到 temp.txt 文件) 1.4 类的访问标志与继承信息 在常量池结束之后，紧接着的两个字节代表访问标志，这个标志用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口，是否为 public 或者 abstract 类型，如果是类的话是否声明为 final 等等. access_flags中一共有16个标志位可以使用，当前之定义了其中的8个，没用使用到的标志位要求一律为0。 1.5 当前类索引(this),父类索引(super)与接口索引集合(interfaces) 类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名，由于 Java 语言的单继承，所以父类索引只有一个，除了 java.lang.Object 之外，所有的 java 类都有父类，因此除了 java.lang.Object 外，所有 Java 类的父类索引都不为 0。 接口索引集合用来描述这个类实现了那些接口，这些被实现的接口将按implents(如果这个类本身是接口的话则是extends) 后的接口顺序从左到右排列在接口索引集合中。 1.6 成员变量信息(Feild) 字段表（field info）用于描述接口或类中声明的变量。字段包括类级变量以及实例变量，但不包括在方法内部声明的局部变量。 字段信息包括：字段的作用域（public、private、protected修饰符）、是实例变量还是类变量（static修饰符）、可变性（final）、并发可见性（volatile修饰符，是否强制从主内存读写）、可否被序列化（transient修饰符）、字段数据类型（基本类型、对象、数组）、字段名称，以上修饰符都是布尔类型。 方法和字段的描述符作用是用来描述字段的数据类型、方法的参数列表（包括数量、类型以及顺序）和返回值。 根描述规则，基本数据类型（byte、char、double、float、int、long、short、boolean）以及代表无返回值的void类型都用一个大写字符来表示，对象类型使用字符L加对象的全限定名来表示。 B: 基本类型byte C: 基本类型char D: 基本类型double F: 基本类型float I: 基本类型 J: 基本类型long S: 基本类型short Z: 基本类型boolean V: 特殊类型void L: 对象类型，如Ljava/lang/Object 1.7 方法信息(Method) methods_count 表示方法的数量，而 method_info 表示的方法表。 Class 文件存储格式中对方法的描述与对字段的描述几乎采用了完全一致的方式。方法表的结构如同字段表一样，依次包括了访问标志、名称索引、描述符索引、属性表集合几项。 1.8 附加属性信息 attributes_count表示属性表中的属性个数, attribute_info 表示属性表 在 Class 文件，字段表，方法表中都可以携带自己的属性表集合，以用于描述某些场景专有的信息。与 Class 文件中其它的数据项目要求的顺序、长度和内容不同，属性表集合的限制稍微宽松一些，不再要求各个属性表具有严格的顺序，并且只要不与已有的属性名重复，任何人实现的编译器都可以向属性表中写 入自己定义的属性信息，Java 虚拟机运行时会忽略掉它不认识的属性。 2. 字节码指令Java字节码指令就是Java虚拟机能够识别、可执行的指令，可以说是Jvm的最小执行单元。javac命令会将Java源文件编译成字节码文件，即.class文件，其中就包含了大量的字节码指令，javap命令可以解析字节码(.class文件)，将字节码内部逻辑以可读的方式呈现出来 (javap -v -p HelloWorld)。 按指令的功能分为如下几类： 存储和加载类指令：主要包括load系列(将一个局部变量加载到操作数栈)、store系列(将一个数值从操作数栈存储到局部变量表)和ldc/push/const系列(将一个常量加载到操作数栈)，主要用于在局部变量表、操作数栈和常量池三者之间进行数据调度； 例如: iload_0表示从当前栈帧局部变量表中0号位置取int类型的数值加载到操作数栈 对象操作指令（创建与读写访问）：比如我们刚刚的putfield和getfield就属于读写访问的指令，此外还有putstatic/getstatic，还有new系列指令，以及instanceof等指令。 操作数栈管理指令：如pop和dup，他们只对操作数栈进行操作。 类型转换指令和运算指令：如add(加)/sub(减)/mul(乘)/div(除)/l2i/d2f等系列指令，实际上这类指令一般也只对操作数栈进行操作。 控制跳转指令：这类里包含常用的if系列指令以及goto类指令。 方法调用和返回指令：主要包括invoke系列指令和return系列指令。这类指令也意味这一个方法空间的开辟和结束，即invoke会唤醒一个新的java方法小宇宙（新的栈和局部变量表），而return则意味着这个宇宙的结束回收。 从指令操作的数据类型来讲：指令开头或尾部的一些字母，就往往表明了它所能操作的数据类型： a对应对象，表示指令操作对象性数据，比如aload和astore、areturn等等。 i对应整形。也就有iload，istore等i系列指令。 f对应浮点型，l对应long，b对应byte，d对应double，c对应char。 ia对应int array，aa对应object array，da对应double array。 3. 编译期处理(语法糖)语法糖: 指Java编译器把.java源码编译为.class字节码过程中,自动生成和转换的一些代码. 如:默认构造器,自动拆装箱等. 默认构造器: public class Candy{} 编译后为: public class Candy{public Candy(){super();}} 自动拆装箱: Integer x=1;int y=x; 编译后为: Integer x=Integer.valueOf(1);int y=x.intValue(); 泛型擦除: 擦除的是字节码上的泛型信息. 泛型反射: 通过反射获得泛型信息 可变参数: String... args 可以是一个String[] args foreach: 集合相当于获取迭代器Iterator switch: Jdk7开始可以配合String和枚举 switch-String: 执行了两遍switch,第一遍根据字符串的hashCode和equals将字符串转换为相应的byte类型,第二遍利用byte执行比较. switch-枚举: 会为当前类生成一个静态内部类(合成类,仅JVM使用,对我们不可见),用来映射枚举类的枚举编号(从0开始)与数组元素的关系,数组大小即为枚举元素的个数,里面存储case用来对比的数字,根据这个数字执行switch 枚举类: 继承Enum并且用final修饰类,构造方法私有,枚举量被编译成本类的final类变量,定义私有静态枚举量数组$VALUES,静态方法values()用来返回定义的枚举量数组的clone(),静态方法valueOf()调用父类valueOf(本类.class,名称)根据类型和名称得到相应实例 try-with-resources: 无论try块的异常还是关闭资源时的异常都不会丢。可以在 try-with-resources 语句中同时处理多个资源。 在 Java 7/8 ，try-with-resources 语句中必须声明要关闭的资源。通过这种方式声明的资源属于隐式 final。 Java 9 中甚至能使用预先创建的资源，只要所引用的资源声明为 final 或者是 effective final。 在幕后施展魔法的是 AutoCloseable 或者 Closeable 接口，它们与 try-with-resources 语句协同工作。 重写桥接: 子类重写方法返回值可以是父类返回值的子类,JVM内部使用了桥接方法(synthetic bridge修饰)重写父类方法并返回子类重写的同名方法,并且没有命名冲突,仅对jvm可见. 匿名内部类: 内部创建了final修饰的实现类, 匿名内部类引用局部变量时,局部变量必须是final的:因为内部创建实现类时,将值赋给其对象的valx属性,valx属性没有机会再跟着一起变化. 4. 类加载阶段 隐式加载：new 显式加载：loadClass、forName等(需要调用Class的newInstance方法获取实例) 类的装载阶段：加载 --&gt; 链接 --&gt; 初始化 加载：通过Classloader加载class文件字节码，生成class对象 链接：校验–&gt;准备–&gt;解析 校验：检查加载的Class的正确性和安全性 准备：为变量分配存储空间并设置类变量初始值 解析：JVM将常量池内的符号引用转换为直接引用 初始化：执行类变量赋值和静态代码块 4.1 加载 将类的字节码载入方法区中,内部采用C++的instanceKlass描述java类, 它的重要field有: _java_mirror:Java类的镜像, _super:父类, _field:成员变量, _methods:方法, _constants:常量池, _class_loader:类加载器, _vtable:虚方法表, _itable:接口方法表 如果这个类还有父类没加载,先加载父类 加载和链接可能是交替运行的 instanceKlass这样的元数据是存储在方法区(元空间),但_java_mirror存储在堆中; 可通过HSDB工具查看. 4.2 链接 验证: 验证类是否符合JVM规范,安全性检查 准备: 为static变量分配空间,设置默认值 jdk7开始, static变量存储于_java_mirror末尾, jdk7之前是instanceKlass末尾. static变量分配空间和赋值是两个步骤, 分配空间在准备阶段完成,赋值在初始化阶段完成 如果static变量是final的基本类型或字符串常量,那么编译阶段值就确定了,赋值在准备阶段完成 如果static变量是final的引用类型,那么赋值还是会在初始化阶段完成 解析: 将常量池中的符号引用解析为直接引用(确切知道类,方法,属性在内存中的位置) 4.3 初始化 初始化即调用&lt;cinit&gt;()V方法,虚拟机会保证这个类的[构造方法]线程安全 发生的时机: 概括的说,类初始化是[懒惰的] main方法所在的类的,总会被首先初始化 首次访问这个类的静态变量或静态方法时 子类初始化, 如果父类没有初始化,会引发 子类访问父类静态变量, 只会触发父类的初始化 Class.forName 和 new操作 导致初始化 不会导致类初始化的情况 访问类的static final 静态常量(基本类型和字符串常量)不会触发初始化 类对象.class 不会 创建该类的数组 不会 类加载器的loadClass方法 不会 Class.forName的第二个参数为false时 不会 4.4 应用实例-懒惰初始化单例模式(线程安全)1234567891011class Singleton&#123; private Singleton()&#123;&#125; // 内部类中保存单例 private static class LazyHolder&#123; private static final Singleton SINGLETON = new Singleton(); &#125; // 第一次调用getInstance,才会导致内部类加载和初始化其静态成员 public static Singleton getInstance()&#123; return LazyHolder.SINGLETON; &#125;&#125; 5. 类加载器以JDK8为例: 名称 加载哪的类 说明 Bootstrap ClassLoader JAVA_HOME/jre/lib 启动类加载器, 最顶层, 打印显示为null Extension ClassLoader JAVA_HOME/jre/lib/ext 扩展类加载器, 第二级, 打印显示为$ExtClassLoader Application ClassLoader classpath 应用程序类加载器, 第三级, 打印显示为$AppClassLoader 自定义类加载器 自定义 上级为Application 5.1 类加载器-双亲委派机制 类加载器在接到加载类的请求时，首先将加载任务委托给上级加载器，依次递归，如果上级加载器可以完成类加载任务，就成功返回；只有上级加载器无法完成此加载任务时，才自己去加载。 这种双亲委派模式的好处，一个可以避免类的重复加载，另外也避免了java的核心API被篡改。 12345678910111213141516171819202122232425262728293031323334353637383940414243/** * loadClass方法的实现方式 */protected Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException&#123; synchronized (getClassLoadingLock(name)) &#123; // First, check if the class has already been loaded //【1】 检查该类是否已经加载 Class c = findLoadedClass(name); if (c == null) &#123; long t0 = System.nanoTime(); try &#123; if (parent != null) &#123; //【2】 有上级的话,委派上级 loadClass c = parent.loadClass(name, false); &#125; else &#123; //【3】 如果没有上级了(ExtClassLoader),则委派BootstrapClassLoader c = findBootstrapClassOrNull(name); &#125; &#125; catch (ClassNotFoundException e) &#123; // ClassNotFoundException thrown if class not found // from the non-null parent class loader &#125; if (c == null) &#123; // If still not found, then invoke findClass in order to find the class. long t1 = System.nanoTime(); //【4】 每一级都找不到,调用findClass(每个类加载器自己扩展)来加载 c = findClass(name); // this is the defining class loader; record the stats sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); &#125; &#125; if (resolve) &#123; resolveClass(c); &#125; return c; &#125;&#125; 5.2 线程上下文类加载器 Java 提供了很多服务提供者接口(Service Provider Interface，SPI),允许第三方为这些接口提供实现(常见的 SPI 有 JDBC、JCE、JNDI、JAXP 和 JBI 等)。 SPI接口中的代码经常需要加载具体的实现类; SPI的接口由Java核心库来提供，实现类可能是作为Java应用所依赖的jar包被包含进来，可以通过类路径（CLASSPATH）来找到。 SPI的接口是Java核心库的一部分，是由引导类加载器来加载的；引导类加载器是无法找到SPI的实现类的,这时候需要抛弃双亲委派加载链模式，使用线程上下文里的类加载器加载类。 类 java.lang.Thread中的方法 getContextClassLoader()和 setContextClassLoader(ClassLoader cl)用来获取和设置线程的上下文类加载器。 Java默认的 线程上下文类加载器 是 应用程序类加载器(AppClassLoader)。 5.3 何时使用Thread.getContextClassLoader()? 总的说来动态加载资源时，一般只有两种选择，当前类加载器和线程上下文类加载器。当前类加载器是指当前方法所在类的加载器。这个类加载器是运行时类解析使用的加载器，Class.forName(String)和Class.getResource(String)也使用该类加载器。代码中X.class的写法使用的类加载器也是这个类加载器。 该如何选择类加载器？ 如若代码是限于某些特定框架，这些框架有着特定加载规则，则不要做任何改动，让框架开发者来保证其工作（比如应用服务器提供商，尽管他们并不能总是做对）。如在Web应用和EJB中，要使用Class.gerResource来加载资源。 在其他情况下，我们可以自己来选择最合适的类加载器。可以使用策略模式来设计选择机制。其思想是将“总是使用上下文类加载器”或者“总是使用当前类加载器”的决策同具体实现逻辑分离开。往往设计之初是很难预测何种类加载策略是合适的，该设计能够让你可以后来修改类加载策略。 一般来说，上下文类加载器要比当前类加载器更适合于框架编程，而当前类加载器则更适合于业务逻辑编程。 5.4 类加载器与Web容器以 Apache Tomcat 来说，每个 Web 应用都有一个对应的类加载器实例。该类加载器也使用代理模式，所不同的是它是首先尝试去加载某个类，如果找不到再代理给父类加载器。这与一般类加载器的顺序是相反的。这是 Java Servlet 规范中的推荐做法，其目的是使得 Web 应用自己的类的优先级高于 Web 容器提供的类。这种代理模式的一个例外是：Java 核心库的类是不在查找范围之内的。这也是为了保证 Java 核心库的类型安全。 绝大多数情况下，Web 应用的开发人员不需要考虑与类加载器相关的细节。下面给出几条简单的原则： 每个 Web 应用自己的 Java 类文件和使用的库的 jar 包，分别放在 WEB-INF/classes和 WEB-INF/lib目录下面。 多个应用共享的 Java 类文件和 jar 包，分别放在 Web 容器指定的由所有 Web 应用共享的目录下面。 当出现找不到类的错误时，检查当前类的类加载器和当前线程的上下文类加载器是否正确。 5.5 自定义类加载器 什么时候需要自定义类加载器 加载非classpath路径的任意路径类文件 都是通过接口来使用实现,希望解耦时,常用于框架设计 这些类希望予以隔离,不同应用的同名类都可以加载,不冲突,常见于tomcat容器 如何自定义类加载器 继承ClassLoader类 重写findClass(String className)方法 读取(加载)类文件的字节码。 调用ClassLoader超类的defineClass方法，向虚拟机提供字节码。 使用者调用该自定义类加载器的loadClass方法 1234567891011121314151617181920212223import java.io.IOException;import java.nio.file.Files;import java.nio.file.Paths;public class MyClassLoader extends ClassLoader &#123; /** * @param name 类名称 */ @Override protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123; try &#123; String cname = \"E:\\\\myclasspath\\\\\" + name.replace('.', '/') + \".class\"; byte[] classBytes = Files.readAllBytes(Paths.get(cname)); Class&lt;?&gt; cl = defineClass(name, classBytes, 0, classBytes.length); if (cl == null) &#123; throw new ClassNotFoundException(name); &#125; return cl; &#125; catch (IOException e) &#123; System.out.print(e); throw new ClassNotFoundException(name); &#125; &#125;&#125; 6. 运行期JVM自动优化Java程序最初是通过解释器进行解释执行的，当程序需要迅速启动和执行时，解释器可以首先发挥作用，省去编译时间，立即执行；当程序运行后，随着时间的推移，编译器逐渐发挥作用，把越来越多的代码编译成本地代码，获得更高的执行效率。解释执行节约内存，编译执行提升效率。 同时，解释器可以作为编译器激进优化时的一个“逃生门”，让编译器根据概率选择一些大多数时候都能提升运行速度的优化手段，当激进优化的假设不成立，则通过逆优化退回到解释状态继续执行。HotSpot虚拟机中内置了两个即时编译器，分别称为Client Compiler(C1编译器)和Server Compiler(C2编译器)，默认采用Interpreter(解释器)与其中一个编译器直接配合的方式工作，使用哪个编译器取决于虚拟机运行的模式，也可以自己去指定。 分层编译策略, JVM将执行状态分成了5个层次: 0层, 解释执行 1层, 使用C1即时编译器编译执行(不带profiling) 2层, 使用C1即时编译器编译执行(带基本的profiling) 3层, 使用C1即时编译器编译执行(带完全的profiling) 4层, 使用C2即时编译器编译执行 profiling是指在运行过程中收集一些程序执行状态的数据,例如[方法的调用次数],[循环的回边次数]等 即时编译器(JIT)与解释器的区别 解释器是将字节码解释为机器码,下次即便遇到相同的字节码,仍会执行重复的解释 JIT是将一些字节码编译为机器码并存入CodeCache,下次遇到相同的代码,直接执行,无需再编译 解释器是将字节码解释为针对所有平台都通用的机器码 JIT会根据平台类型,生成平台特定的机器码 对于占据大部分的不常用的代码,我们无需耗费时间将其编译成机器码,而是采用解释执行的方式运行;另一方面,对于占据小部分的热点代码,我们则可以将其编译成机器码,以达到理想的运行速度; 执行效率: Interpreter &lt; C1 &lt; C2, 总的目标是发现热点代码(hotpot名称的由来)优化之. 6.1 公共子表达式消除如果一个表达式E已经计算过了，并且先前的计算到现在E中所有变量的值都没有发生变化，那么E的这次出现就成为了公共表达式，可以直接用之前的结果替换。例：int d = (c * b) * 12 + a + (a + b * c) =&gt; int d = E * 12 + a + (a + E) 6.2 数组边界检查消除Java语言中访问数组元素都要进行上下界的范围检查，每次读写都有一次条件判定操作，这无疑是一种负担。编译器只要通过数据流分析就可以判定循环变量的取值范围永远在数组长度以内，那么整个循环中就可以把上下界检查消除，这样可以省很多次的条件判断操作。 6.3 方法内联方法内联能去除方法调用的成本，同时也为其他优化建立了良好的基础，因此各种编译器一般会把内联优化放在优化序列的最靠前位置，然而由于Java对象的方法默认都是虚方法，在编译期无法确定方法版本，就无法内联。 因此方法调用都需要在运行时进行多态选择，为了解决虚方法的内联问题，Java虚拟机团队引入了“类型继承关系分析(CHA)”的技术。 在内联时，若是非虚方法，则可以直接内联 遇到虚方法，首先根据CHA判断此方法是否有多个目标版本，若只有一个，可以直接内联，但是需要预留一个“逃生门”，称为守护内联，若在程序的后续执行过程中，加载了导致继承关系发生变化的新类，就需要抛弃已经编译的代码，退回到解释状态执行，或者重新编译。 若CHA判断此方法有多个目标版本，则编译器会使用“内联缓存”，第一次调用缓存记录下方法接收者的版本信息，并且每次调用都比较版本，若一致则可以一直使用，若不一致则取消内联，查找虚方法表进行方法分派。 6.4 逃逸分析分析对象动态作用域，当一个方法被定以后，它可能被外部方法所引用，称为方法逃逸，甚至还有可能被外部线程访问到，称为线程逃逸。 若能证明一个对象不会逃逸到方法或线程之外，这可以通过栈上分配、同步消除、标量替换来进行优化。 栈上分配：如果确定一个对象不会逃逸，则可以让它分配在栈上，对象所占用的内存空间就可以随栈帧出栈而销毁。这样可以减小垃圾收集系统的压力。 同步消除：线程同步相对耗时，如果确定一个变量不会逃逸出线程，那这个变量的读写不会有竞争，则对这个变量实施的同步措施也就可以消除掉。 标量替换：如果逃逸分析证明一个对象不会被外部访问，并且这个对象可以被拆散的话，那么程序真正执行的时候可以不创建这个对象，改为直接创建它的成员变量，这样就可以在栈上分配。 7. 反射机制简单说，反射机制是程序在运行时能够获取自身的信息。在java中，只要给定类的名字，那么就可以通过反射机制来获得类的所有信息。Class反射对象描述的是类的语义结构，通过class对象，可以获取构造器，成员变量，方法等类元素的反射对象，并且可以用编程的方法通过这些反射对象对目标对象进行操作。这些反射类在java.lang.reflect包中定义，下面是最主要的三个类： Constructor：类的构造函数反射类： 通过Class#getConstructors()方法可以获得类的所有构造函数的反射对象数组。 其中最主要的方法是newInstance(Object[] args),通过该方法可以创建一个对象类的实例，功能和new一样。在jdk5.0之后，提供了newInstance(Object…args)更为灵活。 Method：类方法的反射类。 通过Class#getDeclaredMethods()方法可以获取所有方法的反射类对象数组Method[].其中最主要的方法是: invoke(String name,class parameterTypes),和invoke(Object obj,Object…args)。同时也还有很多其他方法 Class getReturnType（）：获取方法的返回值类型 Class[] getParameterTypes（）：获取方法的参数数组 Field：类成员变量的反射类， 通过Class#getDeclareFields（）可以获取类成员变量反射的数组。 Class#getDeclareField（String name）获取某特定名称的反射对象。 最主要的方法是：set(Object obj,Object value),为目标对象的成员变量赋值。如果是基础类型还可以这样赋值setInt(),setString()… java还提供了包的反射类和注解的反射类。 总结:java反射体系保证了通过程序化的方式访问目标对象的所有元素，对于private 和protected成员变量或者方法，也是可以访问的。 7.1 反射中，Class.forName和classloader的区别 Class.forName()得到的Class是完成初始化的 而ClassLoader.loadClass()得到的Class是还没有链接的。 Spring IoC为了加快初始化速度，因此大量使用了延时加载技术。而使用classloader不需要执行类中的初始化代码，可以加快加载速度，把类的初始化工作留到实际使用到这个类的时候。 7.2 哪里用到反射机制？ JDBC中，利用反射动态加载了数据库驱动程序。 Web服务器中利用反射调用了Sevlet的服务方法。 Eclispe等开发工具利用反射动态刨析对象的类型与结构，动态提示对象的属性和方法。 很多框架都用到反射机制，注入属性，调用方法，如Spring。 7.3 反射机制的优缺点？优点：可以动态执行，在运行期间根据业务功能动态执行方法、访问属性，最大限度发挥了java的灵活性。缺点：对性能有影响，这类操作总是慢于直接执行java代码。","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"java","slug":"java","permalink":"http://chaooo.github.io/tags/java/"}]},{"title":"【Java知识梳理】深入JVM(一)-运行时数据区 与 垃圾回收机制","date":"2019-08-23T15:15:19.000Z","path":"article/20190823.html","text":"Java虚拟机运行时数据区 程序计数器（Program Counter Register） 本地方法栈（Native Method Stack） Java虚拟机栈（VM Stack） Java堆（Heap）（线程共享） 方法区（Method Area）（线程共享） Java运行过程 Java源代码 经过Javac编译成 字节码（bytecode).class文件; 在运行时，通过 虚拟机(JVM)内嵌的解释器 将字节码转换成为最终的机器码。 常见的JVM，都提供了 JIT(Just-In-Time)编译器，也就是通常所说的动态编译器，JIT能够在运行时将热点代码编译成机器码，所以准确的说Java代码会解释执行或编译执行。 1.程序计数器（Program Counter Register） 线程私有 不会内存溢出 作用：记住下一条JVM指令的执行地址。 2.Java虚拟机栈（VM Stack） 线程私有 LIFO（后进先出） 存储栈帧，支撑Java方法的调用、执行和退出 可能出现OutOfMemoryError异常（如果被设计成动态扩展，而扩展又未申请到足够的内存抛出）和StackOverflowError异常（如线程请求的栈深度大于最大深度抛出） 2.1 栈帧（Frame） Java虚拟机栈中存储的内容，它被用于存储数据和部分过程结构的数据结构，同时也被用来处理动态链接、方法返回值 和 异常分派 一个完整的栈帧包含：局部变量表、操作数栈、动态连接信息、方法正常完成和异常完成的信息 每个栈由多个栈帧组成，对应着每次方法调用时所占用的内存 每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法 2.2 局部变量表 由若干个Slot组成，长度由编译期决定 单个Slot可以储存一个类型为boolean、byte、char、short、float、reference、returnAddress 的数据，两个Slot可以存储一个类型为long或double的数据 局部变量表用于方法间参数的传递，以及方法执行过程中存储基础数据类型的值和对象的引用 2.3 操作数栈 一个后进先出栈，由若干个Entry组成，长度由编译期决定 单个Entry即可以存储一个Java虚拟机中定义的任意数据类型的值，包括long和double类型，但是存储long和double类型的Entry深度为2，其他类型深度为1 在方法执行过程中，栈帧用于存储计算参数和计算结果；在方法调用时，操作数栈也用来准备调用方法的参数以及接收方法返回结果 2.4 栈的内存溢出（StackOverflowError） 栈帧过多导致内存溢出（方法的递归调用） 栈帧过大导致内存溢出 JSON数据转换可能导致内存溢出（可用@JsonIgnore忽略不能转换的属性） 2.5 线程诊断 案例1：cpu占用过高 Linux下，top打印所有进程，筛选cpu占用高的进程号，如：32655 用ps H -eo pid,tid,%cpu | grep 32655打印32655的所有线程，定位到具体cpu占用过高的线程 jstack 进程id打印该线程的所有线程详情 将线程id换算成16进制，对比打印出的线程详情，定位到具体线程，进一步定位到源代码具体代码行号。 案例2：程序运行很长时间没有结果 前面步骤同上，jstack 进程id打印该线程的所有线程详情 在最后一段找到了 Found one Java-level deadlock，定位死锁的具体行号。 3.本地方法栈（Native Method Stack） 线程私有 LIFO（后进先出） 支撑Native方法的调用、执行和退出 可能出现OutOfMemoryError异常 和 StackOverflowError异常 有一些虚拟机（如HotSpot）将Java虚拟机栈和本地方法栈合并实现 3.1 Java虚拟机栈和本地方法栈可能发生的异常情况： 如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量时，Java虚拟机将会抛出一个StackOverflowError异常 如果Java虚拟机栈可以动态扩展，并且扩展的动作已经尝试过，但是目前无法申请到足够的内存去完成扩展，或者在建立新的线程时没有足够的内存去创建对应的虚拟机栈，那么Java虚拟机将会抛出一个OutOfMemoryError异常。 4.Java堆（Heap） 全局共享 通常是Java虚拟机中最大的一块内存区域 作用是作为Java对象的主要存储区域（通过new创建的对象都会使用堆内存） 有垃圾回收机制 4.1 Java堆可能发生的异常 如果实际所需的堆超过了自动内存管理系统能提供的最大容量，那Java虚拟机将会抛出一个OutOfMemoryError异常。 4.2 堆内存诊断 jps工具：查看当前系统中有哪些Java进程 jmap工具：查看堆内存占用情况jmap -head 进程id jconsole工具：图形界面，多功能的监测工具，可以连续监测 案例：垃圾回收后，内存占用仍然很高 jps工具定位进程，jmap -head 进程id查看堆使用情况， 可以用jconsole工具手动执行GC 用jvirsualvm抓取堆dump(快照，抓取堆里面有哪些类型的对象及个数等信息) 4.3 字符串常量池 (StringTable) 在JDK6.0及之前版本，字符串常量池是放在Perm Gen区(也就是方法区)中； 在JDK7.0版本，字符串常量池被移到了堆中 字符串手动入池: 调用String.intern() 5.方法区（Method Area） 全局共享 作用是存储Java类的结构信息 JVMS不要求该区域实现自动内存管理，但是商用Java虚拟机都能够自动管理该区域内存 在JDK1.8后，方法区由元空间实现 方法区内存溢出场景：spring、mabatis等动态加载类的场景使用不当会导致方法区内存溢出 5.1 运行时常量池 全局共享 是方法区的一部分 作用是存储Java类文件常量池中的符号信息 可能出现OutOfMemoryError异常 5.2 永久代与方法区 在JDK1.2~6，HotSpot使用永久代实现方法区 在JDK1.7，开始移除（符号表被到Native Heap，字符串常量和类的静态引用被移到Java Head中） 在JDK1.8，永久代被元空间（Metaspace）所替代 6.直接内存 全局共享 并非JVMS定义的标准Java运行时内存区域, 属于操作系统内存 JDK1.4引入NIO，目的是避免Java堆 和 Native堆 中来回 复制数据 带来的性能损耗。 能被自动管理，但是在检测手段上可能会由一些简陋 可能出现OutOfMemoryError异常 常用于NIO操作时，用于数据缓冲区 分配回收成本高，但读写性能高，不受JVM内存回收管理 7.可回收对象的判定 引用计数法：给对象添加一个引用计数器，每当有一个地方引用它时，计数器就+1，当引用失效就-1，任何时候计数器为0时就是可回收对象。 可达性分析：通过一系列名为GC Roots的对象作为起始点，从这些根节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain)，当一个对象到GC Roots没有任何引用链相连时，则称该对象是不可达的。 目前主流Java虚拟机中并没有选用引用计数法，其中最重要的原因是它很难解决循环引用问题 7.1 Java语言中的GC Roots 在虚拟机栈（栈帧中的本地变量表）中的引用的对象。 在方法区中的类静态属性引用的对象。 在方法区中的常量引用的对象。 在本地方法栈中JNI（即一般说的Native方法）的引用对象。 7.2 Java引用类型 强引用：Java中默认声明的就是强引用 垃圾回收器将永远不会回收被【强引用】对象，哪怕内存不足时，JVM也会直接抛出OutOfMemoryError，不会去回收。可以赋值为null中断强引用。 软引用（SoftReference）：用来描述一些非必需但仍有用的对象，用java.lang.ref.SoftReference类来表示软引用 垃圾回收后，在内存不足时会再次触发垃圾回收，回收【软引用】对象，仍不足，才会抛出内存溢出异常。可以配合引用队列来释放软引用自身。 弱引用（WeakReference）：用 java.lang.ref.WeakReference 来表示弱引用 垃圾回收器将永远都会回收被【弱引用】对象，无论内存是否足够。可以配合引用队列来释放弱引用自身。 虚引用（PhantomReference）：最弱的一种引用关系，用 PhantomReference 类来表示 必须配合引用队列使用，主要配合ByteBuffer使用，被引用对象回收时，会将虚引用入队，由Reference Handler线程调用虚引用相关方法释放直接内存。 8.垃圾回收算法 标记清除算法（Mark-Sweep） 标记整理算法(Mark-Compact) 复制算法（copying） 8.1 分代垃圾回收（Java堆分为新生代和老年代） 对象首先分配在新生代的Eden区 新生代空间不足时，触发 Minor GC，Eden区和From幸存区(Survivor)存活的对象使用coping复制到To幸存区中，存活的年龄+1 并且交换From和To。 Minor GC会引发 STW(Stop the world)，暂停其他用户的线程，等垃圾回收结束后，用户线程才恢复运行 当对象寿命超过阈值时，会晋升至老年代，最大寿命15(4bit) 当老年代空间不足，会先尝试触发 Minor GC，如果之后空间仍不足，那么触发 Full GC，STW的时间更长 8.2 相关JVM参数 堆初始大小： -Xms 堆最大大小： -Xmx 或 -XX:MaxHeapSize=size 新生代大小： -Xmn 或 (-XX:NewSize=size + -XX:MaxNewSize=size) 幸存区比例（动态）： -XX:InitialSurvivorRatio=ratio 和 -XX:+UseAdaptiveSizePolicy 幸存区比例： -XX:SurvivorRatio=ratio 晋升阈值： -XX:MaxTenuringThreshold=threshold 晋升详情： -XX:+PrintTenuringDistribution GC详情： -XX:+PrintGCDetils -verbose:gc FullGC 前 MinorGC： -XX:+ScavengeBeforeFullGC 9.垃圾回收器 串行（开启：-XX:+UseSerialGC=Serial + SerialOld） 单线程 适合堆内存较小，适合个人电脑 吞吐量优先 多线程 堆内存较大，多核CPU 让单位时间内，总STW的时间最短 响应时间优先 多线程 堆内存较大，多核CPU 尽量让单次STW的时间最短 9.1 吞吐量优先（并行）回收器 开启(默认开启)： -XX:+UseParallelGC ~ -XX:+UseParallelOldGC 动态调整堆大小：-XX:+UseAdaptiveSizePolicy 目标吞吐量：-XX:GCTimeRatio=ratio 最大暂停时间的目标值：-XX:MaxGCPauseMillis=ms 线程数：-XX:ParallelGCThreads=n 9.2 响应时间优先（并发）回收器可以和用户线程并发执行，工作在老年代 开启：-XX:+UseConcMarkSweepGC 配合 -XX:UseParNewGC ~ SerialOld 并行和并发线程数：-XX:ParallelGCThreads=n ~ -XX:ConsGCThreads=threads 回收时机（内存占比）:-XX:CMSInitiatingOccupancyFraction=percent 重新标记前对新生代先做垃圾回收：-XX:+CMSScavengeBeforeRemark 9.3 G1（Garbage First）（并发） G1回收器 适用场景 同时注重 吞吐量(Throughput)和低延迟(Low latency)，默认暂停目标是200ms 超大堆内存，会将堆划分为多个大小相等的区域(Region) 整体上是标记+整理算法，两个区域之间是复制算法 相关JVM参数 开启（JDK9默认）：-XX:+UseG1GC 区域大小：-XX:G1HeapRegionSize=size 最大暂停时间：-XX:MaxGCPauseMillis=time G1垃圾回收阶段（三个阶段循环） Young Collection：新生代GC（会STW） Young Collection + Concurrent Mark： 在YoungGC时会进行GC Root的初始标记 老年代占用堆空间比例达到阈值值，进行并发标记(不会STW)，由下面的JVM参数决定 -XX:InitiatingHeadOccupancyPercent=percent(默认45%) Mixed Collection：会对Eden、Survivor、Old进行全面垃圾回收 最终标记(Remark)会STW 拷贝存活(Evacuation)会STW 为达到最大暂停时间短的目标，Old区是优先回收垃圾最多的区域 9.4 Minor GC 和 Full GC SerialGC 新生代内存不足：Minor GC 老年代内存不足：Full GC ParallelGC 新生代内存不足：Minor GC 老年代内存不足：Full GC CMS 新生代内存不足：Minor GC 老年代内存不足：分两种情况（回收速度高于内存产生速度不会触发Full GC） G1 新生代内存不足：Minor GC 老年代内存不足：分两种情况（回收速度高于内存产生速度不会触发Full GC） Minor GC：当Eden区满时，触发Minor GC Full GC： System.gc()方法的调用 老年代空间不足 方法区空间不足 通过Minor GC后进入老年代的平均大小大于老年代的可用内存 由Eden区、From幸存区 向 To幸存区 复制时，对象大小大于To区可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小 10.垃圾回收调优 调优领域：内存、锁竞争、CPU占用、IO 调优目标：【低延迟】还是【高吞吐量】（高吞吐量:ParallelGC，低延迟:CMS,G1,ZGC） 最快的GC是不发生GC：查看Full GC前后的内存占用（内存数据太多？数据表示太臃肿？内存泄漏？） 新生代调优：new操作内存分配廉价、死亡对象回收代价是零、大部分对象用过即死、MinorGC时间远低于FullGC 10.1 新生代调优 理想情况：新生代能容纳所有【并发量*(请求-响应)】的数据 幸存区大到能够保留【当前活跃对象+需要晋升对象】 【晋升阈值配置】得当，让长时间存活的对象尽快晋升 调整最大晋升阈值：-XX:MaxTenuringThreshold=threshold 打印晋升详情：-XX:+PrintTenuringDistribution 10.2 老年代调优以CMS为例： CMS的老年代内存越大越好（避免浮动垃圾引起的并发失败） 先尝试不做调优，如果没有FullGC那么已经OK，否则先尝试调优新生代 观察发生Full GC时老年代内存占用，将老年代内存预设调大1/4~1/3 -XX:CMSInitiatingOccupancyPercent=percent 10.3 调优案例 案例1：FullGC 和 MinorGC频繁 可能原因：空间紧张，若业务高峰期时，新生代空间紧张，幸存区的晋升阈值会降低，大量本来生存短对象晋升老年区，进一步触发老年代FullGC的频繁发生 解决方法：经过分析，观察堆空间大小，先试着增大新生代内存，同时增大幸存区的空间以及晋升阈值。 案例2：请求高峰期发生了FullGC，单次暂停时间特别长（CMS） 查看日志，看CMS哪个阶段暂停时间长（重新标记阶段），解决：打开开关参数CMSScavengeBeforeRemark 重新标记前对新生代先做垃圾回收：-XX:+CMSScavengeBeforeRemark 10.4 G1调优最佳实践 不要设置新生代和老年代的大小 G1收集器在运行的时候会调整新生代和老年代的大小。通过改变代的大小来调整对象晋升的速度以及晋升年龄，从而达到我们为收集器设置的暂停时间目标。设置了新生代大小相当于放弃了G1为我们做的自动调优。我们需要做的只是设置整个堆内存的大小，剩下的交给G1自己去分配各个代的大小。 不断调优暂停时间指标 通过XX:MaxGCPauseMillis=x可以设置启动应用程序暂停的时间，G1在运行的时候会根据这个参数选择CSet来满足响应时间的设置。一般情况下这个值设置到100ms或者200ms都是可以的(不同情况下会不一样)，但如果设置成50ms就不太合理。暂停时间设置的太短，就会导致出现G1跟不上垃圾产生的速度。最终退化成Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态。 关注Evacuation Failure Evacuation Failure类似于CMS里面的晋升失败，堆空间的垃圾太多导致无法完成Region之间的拷贝，于是不得不退化成Full GC来做一次全局范围内的垃圾收集。","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"java","slug":"java","permalink":"http://chaooo.github.io/tags/java/"}]},{"title":"【Java知识梳理】网络协议","date":"2019-08-15T13:04:33.000Z","path":"article/20190815.html","text":"1. 分层网络协议 OSI七层网络协议：物理层，数据链路层，网络层，传输层(TCP/UDP)，会话层，表示层，应用层 TCP/IP协议分层(可以理解为OSI的一种实现)：网络接口层，网络层，传输层(TCP/UDP)，应用层 2. TCP通信协议简介： 面向连接的、可靠的、基于字节流的 传输层通信协议 将应用层的数据流分割成报文段并发送给目标节点的TCP层 数据包都有序号，对方收到则发送ACK确认，未收到则重传 使用校验和来校验数据在传输过程中是否有误 报文头中的ACK(确认序号标志)，SYN(同步序号，用于建立连接过程) 3. TCP建立连接的三次握手 第一次：建立连接时，客户端发送SYN包(syn=j)到服务器，并进入SYS_SEND状态，等待服务器确认； 第二次：服务器收到SYN包，必须确认客户的SYN(ack=j+1)，同时自己也发送一个SYN包(syn=k)，即 SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次：客户端收到SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务端进入ESTABLISHED状态，完成三次握手。 4. 为什么需要三次握手 为了初始化Sequence Number的初始值（通信双方要互相通知对方自己的Sequence Number，要作为以后数据通信的序号，以保证接收到的数据不会因为网络传输问题而乱序，TCP会用这个序号拼接数据） 5. 首次握手的隐患—SYN超时 服务端收到客户端的SYN，回复SYN-ACK的时候未收到ACK确认 服务端不断尝试(重发SYN-ACK)直至超时，Linux默认等待63秒才断开连接(默认重试5次，重试间隔1s开始，每次翻倍，即1+2+4+8+16+32=63) 可能遭受SYN Flood的风险(syn攻击，又称为ddos攻击) 6. 什么是SYN Flood攻击 客户端恶意的向某个服务器端口发送大量的SYN包，则可以使服务器打开大量的半开连接，分配TCB，从而消耗大量的服务器资源，同时也使得正常的连接请求无法被相应。而攻击发起方的资源消耗相比较可忽略不计。 SYN Flood是当前最流行的DoS（拒绝服务攻击）与DDoS（分布式拒绝服务攻击）的方式之一。 7. Linux针对SYN Flood的防护措施 SYN队列满后，通过tcp_syncookies参数回发SYN Cookies 若为正常连接则客户端会回发SYN Cookies，直接建立连接 8. 建立连接后，客户端出现故障怎么办（保活机制） 向对方发送保活探测报文，如果未收到响应则继续发送 尝试次数达到保活探测树仍未收到响应则中断连接 9. TCP终止连接的四次挥手（以客户端主动为例） 第一次：客户端发送一个FIN(seq=u)，用来关闭客户端到服务器的数据传送，客户端进入FIN_WAIT_1状态； 第二次：服务器收到FIN，发回一个ACK(ack=u+1)，确认序号为收到的序号+1(和SYN一样，一个FIN将占用一个序号)，服务端进入CLOSE_WAIT状态； 第三次：服务端发送一个FIN(seq=w)，用来关闭服务端到客户端的数据传送，服务端进入LAST_ACK状态； 第四次：客户端收到FIN，发回一个ACK(ack=w+1)，将确认序号设置为收到序号+1，客户端进入TIME_WAIT状态，服务端进入CLOSED状态，完成四次挥手。 10. 存在TIME_WAIT状态的原因 保证TCP全双工连接的可靠释放，确保有足够时间让对方收到ACK包 避免新旧来凝结混淆，使旧数据包在网络中因过期而失效 11. 为什么需要四次挥手 因为全双工，发送方和接收方都需要FIN报文和ACK报文 12. 服务器出现大量CLOSE_WAIT状态的原因 对方关闭socket连接，我方忙于读或写，没有及时关闭连接 检查代码，特别是释放资源的代码 检查配置，特别是处理请求的线程配置 13. UDP简介 面向非连接 不维护连接状态，支持同时向多个客户端传输相同消息 数据包报头只有8个字节，额外开销小 吞吐量只受限于数据生成速率、传输速率以及机器性能 尽最大努力交付，不保证可靠性，不需要维持复杂的链接状态表 面向报文，不对应用程序提交的报文信息进行拆分或者合并 14. TCP和UDP的区别 面向连接 vs 无连接 可靠性和有序性 vs 不保证 全双工的字节流 vs 全双工的数据报 效率低 vs 速度快 重量级 vs 轻量级 15. Http协议简介 基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等），Hyper Text Transfer Protocol（超文本传输协议）的缩写。 简单快速：客户向服务器请求服务时，只需传送请求方法(GET、HEAD、POST等)和路径。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。 无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。 无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快 支持B/S及C/S模式。 16. HTTP 请求/响应的步骤 客户端连接到Web服务器 一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，https://chaooo.github.io。 发送HTTP请求 通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。 服务器接受请求并返回HTTP响应 Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。 释放连接TCP连接 若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求; 客户端浏览器解析HTML内容 客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。 17. 在浏览器地址栏键入URL，按下回车之后会经历以下流程： 浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址; 解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接; 浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器; 服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器; 释放 TCP连接; 浏览器将该 html 文本并显示内容; 18. HTTP之状态码 状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别: 1xx：指示信息–表示请求已接收，继续处理 2xx：成功–表示请求已被成功接收、理解、接受 3xx：重定向–要完成请求必须进行更进一步的操作 4xx：客户端错误–请求有语法错误或请求无法实现 5xx：服务器端错误–服务器未能实现合法的请求 常见状态码： 200 OK //客户端请求成功 400 Bad Request //客户端请求有语法错误，不能被服务器所理解 401 Unauthorized //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 403 Forbidden //服务器收到请求，但是拒绝提供服务 404 Not Found //请求资源不存在，eg：输入了错误的URL 500 Internal Server Error //服务器发生不可预期的错误 503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常 19. HTTPS和HTTP的区别： https协议需要到CA申请证书(收费)，http不需要。 https密文传输，http明文传输。 http使用80端口，https默认使用443端口。 https = http + 加密 + 认证 + 完整性保护 20. Socket简介 Socket是对TCP/IP协议的抽象，是操作系统对外开发的接口 基于tcp协议的编程模型 服务器： 创建ServerSocket类型的对象并提供端口号； 等待客户端的连接请求，调用accept方法； 使用输入输出流进行通信； 关闭Socket； 客户端： 创建Socket类型的对象并提供服务器的通信地址和端口号； 使用输入输出流进行通信； 关闭Socket； 基于udp协议的编程模型 主机A(接收方): 创建DatagramSocket类型的对象，并提供端口号； 创建DatagramPacket类型的对象，用于接收发来的数据； 从Socket中接收数据，调用receive()方法； 关闭Socket并释放有关的资源； 主机B(发送方) 创建DatagramSocket类型的对象； 创建DatagramPacket类型的对象，并提供接收方的IP地址和端口号； 通过Socket发送数据，调用send()方法； 关闭Socket并释放有关的资源；","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"java","slug":"java","permalink":"http://chaooo.github.io/tags/java/"}]},{"title":"【安全认证】JSON Web Token 入门","date":"2019-08-06T07:50:53.000Z","path":"article/20190806.html","text":"JSON Web TokenJSON Web Token（缩写 JWT）基于JSON格式信息一种Token令牌，是目前最流行的跨域认证解决方案。 JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户。 此后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。 服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。 1. JWT数据结构它是一个很长的字符串，中间用点（.）分隔成三个部分。 例如：eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJjaGFvIiwidWlkIjoyOSwiZXhwIjoxNTY3OTM2NzgwfQ.6zvimBNs_MCiov4MOkkUodgKmRFBS2dVhmhIb1MV6m4。 JWT 的三个部分(Header.Payload.Signature)依次如下: Header（头部） Payload（负载） Signature（签名） 1.1 Header（头部）Header 部分是一个 JSON 对象，描述 JWT 的元数据。 1234&#123; \"alg\": \"HS256\", \"typ\": \"JWT\"&#125; alg：签名的算法（algorithm），默认是 HMAC SHA256（写成HS256） typ：表示这个令牌（token）的类型（type），JWT令牌统一写为JWT。 最后，将上面的 JSON 对象使用 Base64URL算法转成字符串。 1.2 Payload（负载）Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段(Reserved claims)，供选用。标准中建议使用这些字段，但不强制。 iss (issuer)：签发人 exp (expiration time)：过期时间 sub (subject)：主题 aud (audience)：受众 nbf (Not Before)：生效时间 iat (Issued At)：签发时间 jti (JWT ID)：编号，JWT唯一标识，能用于防止JWT重复使用 除了官方字段，还有公共声明的字段（见：http://www.iana.org/assignments/jwt/jwt.xhtml）也可以定义私有字段，如： 12345&#123; \"sub\": \"1234567890\", \"name\": \"John Doe\", \"admin\": true&#125; 注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。 这个 JSON 对象也要使用 Base64URL算法转成字符串。 1.3 Signature（签名）Signature 部分是对前两部分的签名，防止数据篡改。该签名信息是通过header和payload，加上secret，通过算法加密生成。 首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。 HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret) 算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。 2. Base64URL算法前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。 JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。 3. JWT 的使用方式及特点 认证原理： 客户端向服务器申请授权，服务器认证以后，生成一个token字符串并返回给客户端，此后客户端在请求受保护的资源时携带这个token，服务端进行验证再从这个token中解析出用户的身份信息。 JWT的使用方式： 客户端收到服务器返回的JWT，存储在浏览器（Cookie或localStorage） 此后，客户端每次与服务器通信，都要带上这个JWT。 一种做法是放在HTTP请求的头信息Authorization字段里面，格式如下： Authorization: &lt;token&gt; 需要将服务器设置为接受来自所有域的请求，用Access-Control-Allow-Origin: * 另一种做法是，跨域的时候，JWT就放在POST请求的数据体里面。 对JWT实现token续签的做法： 额外生成一个refreshToken用于获取新token，refreshToken需存储于服务端，其过期时间比JWT的过期时间要稍长。 用户携带refreshToken参数请求token刷新接口，服务端在判断refreshToken未过期后，取出关联的用户信息和当前token。 使用当前用户信息重新生成token，并将旧的token置于黑名单中，返回新的token。 JWT 的几个特点 JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。 JWT 不加密的情况下，不能将秘密数据写入JWT。 JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。 JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。 JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。 为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。 4. Java中JWT的使用java-jwt工具包提供了JWT算法的封装 导入java-jwt，选择一种算法（HMAC256为例） Algorithm algorithm = Algorithm.HMAC256(&quot;secret&quot;); 算法定义了一个令牌是如何被签名和验证的。 创建一个签名的JWT token（通过调用jwt.create()创建一个JWTCreator实例） String token = JWT.create().withIssuer(&quot;auth0&quot;).sign(algorithm); 如果Claim不能转换为JSON，或者在签名过程中使用的密钥无效，那么将会抛出JWTCreationException异常 验证令牌（调用jwt.require()和传递算法实例来创建一个JWTVerifier实例。方法build()返回的实例是可重用的，因此可以定义一次，并使用它来验证不同的标记。最后调用verifier.verify()来验证token） JWTVerifier verifier = JWT.require(algorithm).withIssuer(&quot;auth0&quot;).build(); verifier.verify(token); 如果令牌有一个无效的签名，或者没有满足Claim要求，那么将会抛出JWTVerificationException异常 jwt时间的验证（当验证一个令牌时，时间验证会自动发生；JWT令牌可能包括可用于验证的DateNumber字段） &quot;iat&quot; &lt; TODAY：这个令牌发布了一个过期的时间 &quot;exp&quot; &gt; TODAY：这个令牌还没过期 &quot;nbf&quot; &gt; TODAY：这个令牌已经被使用了 解码一个jwt令牌 DecodedJWT jwt = JWT.decode(token); jwt.getAlgorithm();:返回jwt的算法值,如果没有定义则返回null jwt.getType();:返回jwt的类型值，如果没有定义则返回null（多数情况类型值为jwt） 如果令牌有无效的语法，或者消息头或有效负载不是JSONs，那么将会抛出JWTDecodeException异常 5. Java中JWT的使用实例封装一个JWT工具类： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import java.util.Date;import java.util.HashMap;import java.util.Map;import com.auth0.jwt.JWT; //导入java-jwtimport com.auth0.jwt.algorithms.Algorithm;import com.auth0.jwt.interfaces.DecodedJWT;import com.auth0.jwt.interfaces.JWTVerifier;import com.entity.User; //引入User实体类public class JwtUtil &#123; //设置过期时间，这里设置15分钟 private static final long EXPIRE_TIME = 15 * 60 * 1000; //服务端的私钥secret,在任何场景都不应该流露出去 private static final String TOKEN_SECRET = \"zhengchao\"; /** * 生成签名 * @param **User** * @param **password** * @return */ public static String createToken(User user) &#123; try &#123; // 设置过期时间 Date date = new Date(System.currentTimeMillis() + EXPIRE_TIME); // 私钥和加密算法 Algorithm algorithm = Algorithm.HMAC256(TOKEN_SECRET); // 设置头部信息 Map&lt;String, Object&gt; header = new HashMap&lt;&gt;(2); header.put(\"typ\", \"JWT\"); header.put(\"alg\", \"HS256\"); // 返回token字符串 return JWT.create() .withHeader(header) .withClaim(\"aud\", user.getName()) .withClaim(\"uid\", user.getId()) .withExpiresAt(date) .sign(algorithm); &#125; catch (Exception e) &#123; e.printStackTrace(); return null; &#125; &#125; /** * 检验token是否正确 * @param **token** * @return */ public static boolean isVerify(String token)&#123; try &#123; Algorithm algorithm = Algorithm.HMAC256(TOKEN_SECRET); JWTVerifier verifier = JWT.require(algorithm).build(); verifier.verify(token); return true; &#125; catch (Exception e)&#123; return false; &#125; &#125; /** *从token解析出uid信息,用户ID * @param token * @param key * @return */ public static int parseTokenUid(String token) &#123; DecodedJWT jwt = JWT.decode(token); return jwt.getClaim(\"uid\").asInt(); &#125; /** *从token解析出aud信息,用户名 * @param token * @param key * @return */ public static String parseTokenAud(String token) &#123; DecodedJWT jwt = JWT.decode(token); return jwt.getClaim(\"aud\").asString(); &#125;&#125; 登录成功后，生成token给浏览器，存储在浏览器（Cookie或localStorage） 1String token = JwtUtil.createToken(user); 此后，客户端每次与服务器通信（需权限的资源），都要带上这个JWT。 一种做法是放在HTTP请求的头信息Authorization字段里面，格式如下： Authorization: &lt;token&gt; 需要将服务器设置为接受来自所有域的请求，用Access-Control-Allow-Origin: * 另一种做法是，跨域的时候，JWT就放在POST请求的数据体里面。 jwt 适合做简单的 restful api 认证，颁发一个固定有效期的 jwt，降低 jwt 暴露的风险，尽量不要对 jwt 做服务端的状态管理，这样才能体现出 jwt 无状态的优势。 附：java-jwt已经实现的算法 JWS 算法 介绍 HS256 HMAC256 HMAC with SHA-256 HS384 HMAC384 HMAC with SHA-384 HS512 HMAC512 HMAC with SHA-512 RS256 RSA256 RSASSA-PKCS1-v1_5 with SHA-256 RS384 RSA384 RSASSA-PKCS1-v1_5 with SHA-384 RS512 RSA512 RSASSA-PKCS1-v1_5 with SHA-512 ES256 ECDSA256 ECDSA with curve P-256 and SHA-256 ES384 ECDSA384 ECDSA with curve P-384 and SHA-384 ES512 ECDSA512 ECDSA with curve P-521 and SHA-512","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"安全认证","slug":"ssafe","permalink":"http://chaooo.github.io/tags/ssafe/"}]},{"title":"【安全认证】MD5算法加盐实现用户密码加密","date":"2019-07-28T13:49:28.000Z","path":"article/20190728.html","text":"1. MD5加密算法介绍MD5的全称是Message-Digest Algorithm 5（信息-摘要算法 第五版），经MD2、MD3和MD4发展而来的一种加密算法，是典型的消息摘要算法，属Hash算法一类。作用是让大容量信息在用数字签名软件签署私人密匙前被”压缩”成一种保密的格式（就是把一个任意长度的字节串变换成一定长的大整数）。通过MD5算法进行加密获得一个随机长度的信息并产生一个128位的信息摘要。如果将这个128位的二进制摘要信息换算成十六进制，可以得到一个32位的字符串，因此我们加密完成后的16进制的字符串长度为32位。 2. MD5加密算法特点： 压缩性：任意长度的数据，算出的MD5值长度都是固定的。 容易计算：从原数据计算出MD5值很容易。 抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。 强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。 3. 盐（Salt）在密码学中，是指通过在密码任意固定位置插入特定的字符串，让散列后的结果和使用原始密码的散列结果不相符，这种过程称之为“加盐”。 4. java.security.MessageDigest类JDK中的java.security.MessageDigest用于为应用程序提供信息摘要算法的功能，如 MD5 或 SHA 算法。 MessageDigest 通过其getInstance系列静态函数来进行实例化和初始化。 MessageDigest 对象通过使用 update 方法处理数据。任何时候都可以调用 reset 方法重置摘要。一旦所有需要更新的数据都已经被更新了，应该调用 digest 方法之一完成哈希计算并返回结果。 对于给定数量的更新数据，digest 方法只能被调用一次。digest 方法被调用后，MessageDigest 对象被重新设置成其初始状态。 5. 封装一个MD5加密工具类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import java.security.MessageDigest;import java.util.UUID;public class MD5Util &#123; /** * md5加密 * @param s：待加密字符串 * @return 加密后16进制字符串 */ public static String md5(String s) &#123; try &#123; //实例化MessageDigest的MD5算法对象 MessageDigest md = MessageDigest.getInstance(\"MD5\"); //通过digest方法返回哈希计算后的字节数组 byte[] bytes = md.digest(s.getBytes(\"utf-8\")); //将字节数组转换为16进制字符串并返回 return toHex(bytes); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; &#125; /** * 获取随即盐 * @return */ public static String salt()&#123; //利用UUID生成随机盐 UUID uuid = UUID.randomUUID(); //返回a2c64597-232f-4782-ab2d-9dfeb9d76932 String[] arr = uuid.toString().split(\"-\"); return arr[0]; &#125; /** * 字节数组转换为16进制字符串 * @param bytes数组 * @return 16进制字符串 */ private static String toHex(byte[] bytes) &#123; final char[] HEX_DIGITS = \"0123456789ABCDEF\".toCharArray(); StringBuilder ret = new StringBuilder(bytes.length * 2); for (int i=0; i&lt;bytes.length; i++) &#123; ret.append(HEX_DIGITS[(bytes[i] &gt;&gt; 4) &amp; 0x0f]); ret.append(HEX_DIGITS[bytes[i] &amp; 0x0f]); &#125; return ret.toString(); &#125;&#125; 6. 使用封装的MD5工具类完成用户注册(主要代码)12345678910111213141516public Object register(String name, String password) &#123; //添加用户信息 user = new User(); //设置用户名 user.setName(name); //密码加密后再保存 String salt = MD5Util.salt(); String md5Password = MD5Util.md5(password+salt); //存入MD5加密后的密码 user.setPassword(md5Password); //随机盐存入数据库，用于登录校验 user.setSalt(salt); //最后将用户数据数据存入数据库 int row = userDao.insert(user); return ...&#125; 7. 使用封装的MD5工具类完成用户登录(主要代码)123456789101112public Object login(String name, String password) &#123; //根据用户名在数据库查找用户 User user = userDao.selectByName(name); //取出用户信息比对 String dbPassword = user.getPassword(); String salt = user.getSalt(); //通过密码+盐 重新生成 MD5密码 String md5Password = MD5Util.md5(password+salt); if(md5Password.equals(dbPassword)) &#123; //登录成功 &#125;&#125; 8. 扩展：MessageDigest类常用方法8.1 构造方法摘要MessageDigest(String algorithm) –创建具有指定算法名称的MessageDigest 实例对象。 MessageDigest类是一个工厂类，其构造器是受保护的，不允许直接使用new MessageDigist( )来创建对象，而必须通过其静态方法getInstance( )生成MessageDigest对象。其中传入的参数指定计算消息摘要所使用的算法，常用的有”MD5”，”SHA”等。 8.2 成员方法摘要： 返回值 方法名 描述 Object clone() 如果实现是可复制的，则返回一个副本。 byte[] digest() 通过执行诸如填充之类的最终操作完成哈希计算。 byte[] digest(byte[] input) 使用指定的字节数组对摘要进行最后更新，然后完成摘要计算。 int digest(byte[] buf, int offset, int len) 通过执行诸如填充之类的最终操作完成哈希计算。 String getAlgorithm() 返回标识算法的独立于实现细节的字符串。 int getDigestLength() 返回以字节为单位的摘要长度，如果提供程序不支持此操作并且实现是不可复制的，则返回 0。 static MessageDigest getInstance(String algorithm) 生成实现指定摘要算法的 MessageDigest 对象。 static MessageDigest getInstance(String algorithm, Provider provider) 生成实现指定提供程序提供的指定算法的 MessageDigest 对象，如果该算法可从指定的提供程序得到的话。 static MessageDigest getInstance(String algorithm, String provider) 生成实现指定提供程序提供的指定算法的 MessageDigest 对象，如果该算法可从指定的提供程序得到的话。 Provider getProvider() 返回此信息摘要对象的提供程序。 static boolean isEqual(byte[] digesta, byte[] digestb) 比较两个摘要的相等性。 void reset() 重置摘要以供再次使用。 String toString() 返回此信息摘要对象的字符串表示形式。 void update(byte input) 使用指定的字节更新摘要。 void update(byte[] input) 使用指定的字节数组更新摘要。 void update(byte[] input, int offset, int len) 使用指定的字节数组，从指定的偏移量开始更新摘要。 void update(ByteBuffer input) 使用指定的 ByteBuffer 更新摘要。 ★ 编程思路：java.security包中的MessageDigest类提供了计算消息摘要（即生成散列码）的方法，首先生成对象，执行其update( )方法可以将原始数据传递给该对象，然后执行其digest( )方法即可得到消息摘要。","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"安全认证","slug":"ssafe","permalink":"http://chaooo.github.io/tags/ssafe/"}]},{"title":"【数据库】嵌入式SQL语言","date":"2019-07-16T06:32:28.000Z","path":"article/20190716.html","text":"概述 交互式SQL语言有很多优点：记录集合操作、非过程性操作、一条语句就可实现复杂查询的结果， 然而，交互式SQL本身也有很多局限： 从使用者角度：专业人员可熟练写出SQL语句，但大部分的普通用户并非可以 从SQL本身角度：特别复杂的检索结果难以用一条交互式SQL语句完成，此时需要结合高级语言中经常出现的顺序、分支和循环结构来帮助处理 因此，高级语言+SQL语言： 既继承高级语言的过程控制性 又结合SQL语言的复杂结果集操作的非过程性 同时又为数据库操作者提供安全可靠的操作方式：通过应用程序进行操作 嵌入式SQL语言 将SQL语言嵌入到某一种高级语言中使用 这种高级语言，如C/C++, Java, PowerBuilder等，又称宿主语言(Host Language) 嵌入在宿主语言中的SQL与前面介绍的交互式SQL有一些不同的操作方式 目录： 变量声明与数据库连接 事务Transaction 数据集与游标 状态捕获及错误处理机制 动态SQL 数据字典与SQLDA ODBC简介 JDBC简介 嵌入式SQL-ODBC-JDBC三者比较 1. 变量声明与数据库连接 以宿主语言C语言为例，对比交互式SQL语言与嵌入式SQL语言 交互式SQL:select Sname, Sage from Student where Sname=&#39;张三&#39;; 嵌入式SQL:exec sql select Sname, Sage into :vSname, :vSage from Student where Sname=&#39;张三&#39;; 典型特点 exec sql引导SQL语句: 提供给C编译器，以便对SQL语句预编译成C编译器可识别的语句 增加一 into子句: 该子句用于指出接收SQL语句检索结果的程序变量 由冒号引导的程序变量,如: ‘:vSname’, ‘:vSage’ 1.1 变量的声明与使用 在嵌入式SQL语句中可以出现宿主语言语句所使用的变量，这些变量需要特殊的声明： 1234exec sql begin declare section; char vSname[10], specName[10]=\"张三\"; int vSage;exec sql end declare section; 变量声明和赋值中，要注意： 宿主程序的字符串变量长度应比字符型字段的长度多1个。因宿主程序的字符串尾部多一个终止符为’\\0’，而程序中用双引号来描述。 宿主程序变量类型与数据库字段类型之间有些是有差异的,有些DBMS可支持自动转换，有些不能。 声明的变量，可以在宿主程序中赋值，然后传递给SQL语句的where等子句中，以使SQL语句能够按照指定的要求(可变化的)进行检索。 嵌入式比交互式SQL语句灵活了一些：只需改一下变量值，SQL语句便可反复使用，以检索出不同结果。 示例： 12345678exec sql begin declare section; char vSname[10], specName[10]=\"张三\"; int vSage;exec sql end declare section;//用户可在此处基于键盘输入给specName赋值exec sql select Sname, Sage into :vSname, :vSage from Student where Sname = :specName;//比较相应的交互式SQL语句：select Sname, Sage from Student where Sname = '张三'; 1.2 程序与数据库的连接和断开1.2.1 数据库的连接connect在嵌入式SQL程序执行之前，首先要与数据库进行连接, 不同DBMS，具体连接语句的语法略有差异 SQL标准中建议的连接语法为： execsql connecttotarget-server asconnect-name useruser-name; 或 execsql connecttodefault; Oracle中数据库连接: execsql connect:user_name identified by :user_pwd; DB2 UDB中数据库连接: execsql connecttomydb user:user_name using:user_pwd; 1.2.1 数据库的断开disconnect在嵌入式SQL程序执行之后，需要与数据库断开连接 SQL标准中建议的断开连接的语法为： exec sql disconnect connect-name; 或 exec sql disconnect current; Oracle中断开连接: exec sql commit release; 或 exec sql rollback release; DB2 UDB中断开连接: exec sql connect reset; exec sql disconnect current; 1.3 SQL执行的提交与撤消SQL语句在执行过程中，必须有提交和撤消语句才能确认其操作结果 SQL执行的提交： execsql commitwork; SQL执行的撤消： execsql rollbackwork; 为此，很多DBMS都设计了捆绑提交/撤消与断开连接在一起的语句,以保证在断开连接之前使用户确认提交或撤消先前的工作，例如Oracle中： execsql commitrelease; 或 execsql rollbackrelease; 2. 事务Transaction 从应用程序员角度：事务是一个存取或改变数据库内容的程序的一次执行，或者说一条或多条SQL语句的一次执行被看作一个事务 从微观角度，或者从DBMS角度：事务是数据库管理系统提供的控制数据操作的一种手段，通过这一手段，应用程序员将一系列的数据库操作组合在一起作为一个整体进行操作和控制，以便数据库管理系统能够提供一致性状态转换的保证。 简单来说：事务是作为单个逻辑工作单元执行的一系列操作；多个操作作为一个整体向系统提交，要么都执行，要么都不执行；事务是一个不可分割的工作逻辑单元。 2.1 事务的特性: ACID 原子性Atomicity : DBMS能够保证事务的一组更新操作是原子不可分的，即对DB而言，要么都执行，要么都不执行 一致性Consistency: DBMS保证事务的操作状态是正确的，符合一致性的操作规则，它是进一步由隔离性来保证的 隔离性Isolation: DBMS保证并发执行的多个事务之间互相不受影响。例如两个事务T1和T2, 即使并发执行，也相当于或者先执行了T1,再执行T2;或者先执行了T2, 再执行T1。 持久性Durability: DBMS保证已提交事务的影响是持久的，被撤销事务的影响是可恢复的。 换句话说：具有ACID特性的若干数据库基本操作的组合体被称为事务。 3. 数据集与游标读取单行结果处理与多行结果处理的差异：Into子句与游标(Cursor) 检索单行结果，可将结果直接传送到宿主程序的变量中(Into) 示例：exec sql select Sname,Sage into :vSname,:vSage from Student where Sname = :specName; 检索多行结果，则需使用游标(Cursor) 游标是指向某检索记录集的指针 通过这个指针的移动，每次读一行，处理一行，再读一行… , 直至处理完毕 读一行操作是通过Fetch…into语句实现的：每一次Fetch, 都是先向下移动指针，然后再读取 记录集有结束标识EOF, 用来标记后面已没有记录了 游标(Cursor)的使用需要先定义、再打开(执行)、接着一条接一条处理，最后再关闭 游标可以定义一次，多次打开(多次执行)，多次关闭 3.1 游标的使用方法 Cursor的定义：declare cursor 123456789EXEC SQL DECLARE cursor_name CURSOR FOR Subquery [ORDER BY result_column [ASC | DESC][, result_column …] [FOR [ READ ONLY | UPDATE [OF columnname [, columnname…]]]];//示例:exec sql declare cur_student cursor for select Sno, Sname, Sclass from Student where Sclass= :vClass order by Sno for read only ; Cursor的打开和关闭：open cursor //close cursor EXEC SQL OPEN cursor_name; EXEC SQL CLOSE cursor_name; Cursor的数据读取：Fetch 1234567891011EXEC SQL FETCH cursor_name INTO host-variable , [host-variable, …];//示例:exec sql declare cur_student cursor for select Sno, Sname, Sclass from Student where Sclass= :vClass order by Sno for read only ;exec sql open cur_student;…exec sql fetch cur_student into :vSno, :vSname, :vSage…exec sql close cur_student; 3.2 可滚动游标 ODBC支持的可滚动Cursor 标准的游标始终是自开始向结束方向移动的，每fetch一次，向结束方向移动一次；一条记录只能被访问一次；再次访问该记录只能关闭游标后重新打开 ODBC(OpenDataBase Connectivity)是一种跨DBMS的DB操作平台，它在应用程序与实际的DBMS之间提供了一种通用接口 许多实际的DBMS并不支持可滚动游标，但通过ODBC可以使用该功能 可滚动游标是可使游标指针在记录集之间灵活移动、使每条记录可以反复被访问的一种游标 可滚动游标移动时需判断是否到结束位置，或到起始位置 可通过判断是否到EOF位置(最后一条记录的后面),或BOF位置(起始记录的前面) 如果不需区分，可通过whenevernotfound语句设置来检测 123456789EXEC SQL DECLARE cursor_name [INSENSITIVE] [SCROLL] CURSOR[WITH HOLD] FOR Subquery[ORDER BY result_column [ASC | DESC][, result_column …][FOR READ ONLY | FOR UPDATE OF columnname [,columnname ]…];EXEC SQL FETCH[ NEXT | PRIOR | FIRST | LAST| [ABSOLUTE | RELATIVE] value_spec ]FROM cursor_name INTO host-variable [, host-variable …]; NEXT向结束方向移动一条； PRIOR向开始方向移动一条； FIRST回到第一条； LAST移动到最后一条； ABSOLUTvalue_spec定向检索指定位置的行,value_spec由1至当前记录集最大值； RELATIVEvalue_spec相对当前记录向前或向后移动，value_spec为正数向结束方向移动，为负数向开始方向移动 3.3 数据库记录的增删改 数据库记录的删除 一种是查找删除(与交互式DELETE语句相同)，一种是定位删除 1234567891011121314EXEC SQL DELETE FROM tablename [corr_name] WHERE search_condition | WHERE CURRENT OF cursor_name;//示例：查找删除exec sql delete from customers c where c.city = ‘Harbin’ and not exists ( select * from orders o where o.cid = c.cid);//示例：定位删除exec sql declare delcust cursor for select cid from customers c where c.city =‘harbin’ and not exists ( select * from orders o where o.cid = c.cid) for update of cid;exec sql open delcustWhile (TRUE) &#123; exec sql fetch delcust into :cust_id; exec sql delete from customers where current of delcust ; &#125; 数据库记录的更新 一种是查找更新(与交互式Update语句相同)，一种是定位更新 1234567891011121314EXEC SQL UPDATE tablename [corr_name] SET columnname = expr [, columnname = expr …] [ WHERE search_condition ] | WHERE CURRENT OF cursor_name;//示例：查找更新exec sql update student s set sclass = ‘035102’ where s.sclass = ‘034101’// 示例：定位更新exec sql declare stud cursor for select * from student s where s.sclass =‘034101’ for update of sclass;exec sql open studWhile (TRUE) &#123; exec sql fetch stud into :vSno, :vSname, :vSclass; exec sql update student set sclass = ‘035102’ where current of stud ; &#125; 数据库记录的插入 只有一种类型的插入语句 12345678EXEC SQL INSERT INTO tablename [ (columnname [,columnname, …] )] [ VALUES (expr [ , expr , …] ) | subqurey ] ;//示例：插入语句exec sql insert into student ( sno, sname, sclass) values (‘03510128’, ‘张三’, ‘035101’) ;//示例：插入语句exec sql insert into masterstudent ( sno, sname, sclass) select sno, sname, sclass from student; 4. 状态捕获及错误处理机制4.1 基本机制 状态，是嵌入式SQL语句的执行状态，尤其指一些出错状态；有时程序需要知道这些状态并对这些状态进行处理 嵌入式 SQL程序中，状态捕获及处理有三部分构成 设置SQL通信区:一般在嵌入式SQL程序的开始处便设置 exec sql include sqlca; 设置状态捕获语句:在嵌入式SQL程序的任何位置都可设置；可多次设置；但有作用域 exec sql whenever sqlerror goto report_error; 状态处理语句:某一段程序以应对SQL操作的某种状态 report_error: exec sql rollback; SQL通信区: SQLCA SQLCA是一个已被声明过的具C语言的结构形式的内存信息区，其中的成员变量用来记录SQL语句执行的状态，便于宿主程序读取与处理 SQLCA是DBMS(执行SQL语句)与宿主程序之间交流的桥梁之一 状态捕获语句: exec sql whenever condition action; Whenever语句的作用是设置一个“条件陷阱”, 该条语句会对其后面的所有由Exec SQL语句所引起的对数据库系统的调用自动检查它是否满足条件(由condition指出). SQLERROR: 检测是否有SQL语句出错。其具体意义依赖于特定的DBMS NOT FOUND: 执行某一SQL语句后，没有相应的结果记录出现 SQLWARNING: 不是错误，但应引起注意的条件 如果满足condition, 则要采取一些动作(由action指出) CONTINUE: 忽略条件或错误，继续执行 GOTO 标号: 转移到标号所指示的语句，去进行相应的处理 STOP: 终止程序运行、撤消当前的工作、断开数据库的连接 DO函数或 CALL函数: 调用宿主程序的函数进行处理，函数返回后从引发该condition的Exec SQL语句之后的语句继续进行 状态捕获语句Whenever的作用范围是其后的所有Exec SQL语句，一直到程序中出现另一条相同条件的Whenever语句为止，后面的将覆盖前面的。 1234567891011int main() &#123; exec sql whenever sqlerror stop; … … goto s1 … … exec sql whenever sqlerror continue; s1: exec sql update agents set percent = percent + 1; … …&#125;//S1标号指示的语句受第二个Whenever语句约束。//注意：作用域是语句在程序中的位置，而不是控制流程(因是预编译程序处理条件陷阱) 状态捕获语句Whenever的使用容易引发无限循环 123456789101112int main() &#123; exec sql whenever sqlerror goto handle_error; exec sql create table customers(cid char(4) not null, cname varchar(13), … … ); … … handle_error: exec sql whenever sqlerror continue;// 控制是否无限循环：无，则可能；有，则不会 exec sql drop customers; exec sql disconnect; fprintf(stderr,”could not create customers table\\n”); return -1;&#125; 4.2 状态信息典型DBMS系统记录状态信息的三种方法 状态记录: sqlcode: 典型DBMS都提供一个sqlcode变量来记录其执行sql语句的状态，但不同DBMS定义的sqlcode值所代表的状态意义可能是不同的。 sqlcode== 0, successful call; sqlcode &lt; 0, error, e.g., from connect, database does not exist , –16; sqlcode &gt; 0, warning, e.g., no rows retrieved from fetch sqlca.sqlcode: 支持SQLCA的产品一般要在SQLCA中填写sqlcode来记录上述信息; 除此而外，sqlca还有其他状态信息的记录 sqlstate: 有些DBMS提供的记录状态信息的变量是sqlstate或sqlca.sqlstate 当我们不需明确知道错误类型，而只需知道发生错误与否，则我们只要使用前述的状态捕获语句即可，而无需关心状态记录变量(隐式状态处理) 但我们程序中如要自行处理不同状态信息时，则需要知道以上信息，但也需知道正确的操作方法(显式状态处理) 4.3 程序自身进行错误信息的处理正确的显式状态处理示例: 1234567891011exec sql begin declar section; char SQLSTATE[6];exec sql end declare section;exec sql whenever sqlerror goto handle_error;… …exec sql whenever sqlerror continue;exec sql create table custs (cid char(4) not null, cname varchar(13), … … );if (strcmp(SQLSTATE, “82100”)==0) &lt;处理82100错误的程序&gt; … … 上述的if语句是能被执行的，因为createtable发生错误时是继续向下执行的。 5. 动态SQL5.1 动态SQL的概念动态SQL是相对于静态SQL而言的 静态SQL特点：SQL语句在程序中已经按要求写好，只需要把一些参数通过变量(高级语言程序语句中不带冒号) 传送给嵌入式SQL语句即可(嵌入式SQL语句中带冒号) 动态SQL特点：SQL语句可以在程序中动态构造，形成一个字符串，然后再交给DBMS执行，交给DBMS执行时仍旧可以传递变量 5.2 动态SQL的两种执行方式如SQL语句已经被构造在host-variable字符串变量中,则： 立即执行语句: 运行时编译并执行 EXEC SQL EXECUTE IMMEDIATE :host-variable; Prepare-Execute-Using语句:PREPARE语句先编译，编译后的SQL语句允许动态参数，EXECUTE语句执行，用USING语句将动态参数值传送给编译好的SQL语句 EXEC SQL PREPARE sql_temp FROM :host-variable; EXEC SQL EXECUTE sql_temp USING :cond-variable 6. 数据字典与SQLDA6.1 数据字典的概念数据字典(Data dictionary)，又称为系统目录(System Catalogs) 是系统维护的一些表或视图的集合，这些表或视图存储了数据库中各类对象的定义信息，这些对象包括用Create语句定义的表、列、索引、视图、权限、约束等,这些信息又称数据库的元数据–关于数据的数据。 不同DBMS术语不一样：数据字典(DataDictionary(Oracle))、目录表(DB2UDB)、系统目录(INFORMIX)、系统视图(X/Open) 不同DBMS中系统目录存储方式可能是不同的,但会有一些信息对DBA公开。这些公开的信息,DBA可以使用一些特殊的SQL命令来检索。 6.2 数据字典的内容构成数据字典通常存储的是数据库和表的元数据，即模式本身的信息： 与关系相关的信息 关系名字 每一个关系的属性名及其类型 视图的名字及其定义 完整性约束 用户与账户信息，包括密码 统计与描述性数据：如每个关系中元组的数目 物理文件组织信息： 关系是如何存储的(顺序/无序/散列等) 关系的物理位置 索引相关的信息 6.3 数据字典的结构 也是存储在磁盘上的关系 专为内存高效访问设计的特定的数据结构 可能的字典数据结构 Relation_metadata = (relation_name, number_of_attributes, storage_organization, location) Attribute_metadata = (attribute_name, relation_name, domain_type, position, length) User_metadata = (user_name, encrypted_password, group) Index_metadata = (index_name, relation_name, index_type, index_attributes) View_metadata = (view_name, definition) 6.4 X/Open标准的系统目录 X/Open标准中有一个目录表Info_Schem.Tables, 该表中的一行是一个已经定义的表的有关信息 Table_Schem：表的模式名(通常是表所有者的用户名) Table_Name：表名 Table_Type：&#39;Base_Table&#39;或&#39;View&#39; 可以使用SQL语句来访问这个表中的信息，比如了解已经定义了哪些表，可如下进行： Select Table_Name From Tables; 模式的含义是指某一用户所设计和使用的表、索引及其他与数据库有关的对象的集合，因此表的完整名应是：模式名.表名。这样做可允许不同用户使用相同的表名，而不混淆。 一般而言，一个用户有一个模式。可以使用CreateSchema语句来创建模式(用法参见相关文献)，在CreateTable等语句可以使用所定义的模式名称。 6.5 Oracle的数据字典 Oracle数据字典由视图组成，分为三种不同形式，由不同的前缀标识 USER_ :用户视图，用户所拥有的对象，在用户模式中 ALL_ :扩展的用户视图，用户可访问的对象 DBA_ :DBA视图(所有用户都可访问的DBA对象的子集) Oracle数据字典中定义了三个视图USER_Tables,ALL_Tables,和DBA_Tables供DBA和用户使用数据字典中关于表的信息 同样,Oracle数据字典中也定义了三个视图USER_TAB_Columns,ALL_TAB_Columns(Accessible_Columns),和DBA_TAB_Columns供DBA和用户使用数据字典中关于表的列的信息 可以使用SQL语句来访问这些表中的信息： Select Column_Name From ALL_TAB_Columns Where Table_Name = ‘STUDENT’; Oracle数据字典中还定义了其他视图 TABLE_PRIVILEDGE(或ALL_TAB_GRANTS) COLUMN_PRIVILEDGE(或ALL_COL_GRANTS)可访问表的权限，列的权限 CONSTRAINT_DEFS(或ALL_CONSTRAINTS)可访问表的各种约束 可以使用下述命令获取Oracle定义的所有视图信息 Select view_name from all_views where owner = ‘SYS’ and view_name like ‘ALL_%’ or view_name like ‘USER_%’; 如果用户使用Oracle,可使用其提供的SQL*PLUS进行交互式访问 动态SQL: 表和列都已知，动态构造检索条件。 动态SQL:检索条件可动态构造，表和列也可动态构造。 6.6 SQLDA构造复杂的动态SQL需要了解数据字典及SQLDA，已获知关系模式信息 SQLDA: SQLDescriptorArea,SQL描述符区域。 SQLDA是一个内存数据结构，内可装载关系模式的定义信息，如列的数目，每一列的名字和类型等等 通过读取SQLDA信息可以进行更为复杂的动态SQL的处理 不同DBMS提供的SQLDA格式并不是一致的。 7. ODBC简介7.1 ODBC定义ODBC：Open DataBase Connection，ODBC是一种标准—不同语言的应用程序与不同数据库服务器之间通讯的标准。 一组API(应用程序接口)，支持应用程序与数据库服务器的交互 应用程序通过调用ODBC API, 实现 与数据服务器的连接 向数据库服务器发送SQL命令 一条一条的提取数据库检索结果中的元组传递给应用程序的变量 具体的DBMS提供一套驱动程序，即Driver库函数，供ODBC调用，以便实现数据库与应用程序的连接。 ODBC可以配合很多高级语言来使用，如C,C++, C#, Visual Basic, PowerBuilder等等； 7.2 通过ODBC连接数据库 ODBC应用前，需要确认具体DBMS Driver被安装到ODBC环境中 当应用程序调用ODBC API时，ODBC API会调用具体DBMS Driver库函数，DBMS Driver库函数则与数据库服务器通讯，执行相应的请求动作并返回检索结果 ODBC应用程序首先要分配一个SQL环境，再产生一个数据库连接句柄 应用程序使用SQLConnect()，打开一个数据库连接，SQLConnect()的具体参数: connection handle, 连接句柄 the server，要连接的数据库服务器 the user identifier，用户 password ，密码 SQL_NTS 类型说明前面的参数是空终止的字符串 示例12345678910111213141516int ODBCexample()&#123; RETCODE error; /* 返回状态吗 */ HENV env; /* 环境变量 */ HDBC conn; /* 连接句柄 */ SQLAllocEnv(&amp;env); SQLAllocConnect(env, &amp;conn); //分配数据库连接环境 SQLConnect(conn, \"aura.bell-labs.com\", SQL_NTS, \"avi\", SQL_NTS, avipasswd\", SQL_NTS); //打开一个数据库连接 &#123; …. Do actual work … &#125; //与数据库通讯 SQLDisconnect(conn); SQLFreeConnect(conn); SQLFreeEnv(env); //断开连接与释放环境&#125; 7.3 通过ODBC与数据库服务器进行通讯 应用程序使用SQLExecDirect()向数据库发送SQL命令； 使用SQLFetch()获取产生的结果元组； 使用SQLBindCol()绑定C语言变量与结果中的属性 当获取一个元组时，属性值会自动地传送到相应的C语言变量中 SQLBindCol()的参数： ODBC定义的stmt变量,查询结果中的属性位置 SQL到C的类型变换,变量的地址. 对于类似字符数组一样的可变长度类型，应给出 •变量的最大长度 •当获取到一个元组后，实际长度的存储位置. •注:当返回实际长度为负数，说明是一个空值。 示例123456789101112131415161718192021char branchname[80]; float balance;int lenOut1, lenOut2;HSTMT stmt;SQLAllocStmt(conn, &amp;stmt);//分配一个与指定数据库连接的新的语句句柄char * sqlquery = \"select branch_name, sum (balance) from account group by branch_name\";error = SQLExecDirect(stmt, sqlquery, SQL_NTS);//执行查询，stmt句柄指向结果集合if (error == SQL_SUCCESS) &#123;SQLBindCol(stmt, 1, SQL_C_CHAR, branchname , 80, &amp;lenOut1);SQLBindCol(stmt, 2, SQL_C_FLOAT, &amp;balance, 0 , &amp;lenOut2);//绑定高级语言变量与stmt句柄中的属性while (SQLFetch(stmt) &gt;= SQL_SUCCESS) &#123;//提取一条记录，结果数据被存入高级语言变量中 printf (\" %s %g\\n\", branchname, balance); &#125;&#125;SQLFreeStmt(stmt, SQL_DROP);//释放语句句柄 7.4 ODBC的其他功能 动态SQL语句的预编译-动态参数传递功能 获取元数据特性 发现数据库中的所有关系的特性 以及 发现每一个查询结果的列的名字和类型等； 默认, 每一条SQL语句都被作为一个独立的能够自动提交的事务来处理。 应用程序可以关闭一个连接的自动提交特性 SQLSetConnectOption(conn, SQL_AUTOCOMMIT, 0)} 此时事务要显式地给出提交和撤销的命令 SQLTransact(conn, SQL_COMMIT) or SQLTransact(conn, SQL_ROLLBACK) 8. JDBC简介8.1 JDBC定义JDBC：Java DataBase Connection，JDBC是一组Java版的应用程序接口API，提供了Java应用程序与数据库服务器的连接和通讯能力。 JDBCAPI分成两个程序包： Java.sql 核心API –J2SE(Java2标准版)的一部分。使用java.sql.DriverManager类、java.sql.Driver和java.sql.Connection接口连接到数据库 Javax.sql 可选扩展API–J2EE(Java2企业版)的一部分。包含了基于JNDI(JavaNamingandDirectoryInterface,Java命名和目录接口)的资源，以及管理连接池、分布式事务等，使用DataSource接口连接到数据库。 8.2 JDBC的功能 java.sql.DriverManager——处理驱动的调入并且对产生新数据库连接提供支持 Java.sql.Driver——通过驱动进行数据库访问，连接到数据库的应用程序必须具备该数据库的特定驱动。 java.sql.Connection——代表对特定数据库的连接。 Try {…} Catch {…} ——异常捕获及其处理 java.sql.Statement——对特定的数据库执行SQL语句 java.sql.PreparedStatement —— 用于执行预编译的SQL语句 java.sql.CallableStatement ——用于执行对数据库内嵌过程的调用。 java.sql.ResultSet——从当前执行的SQL语句中返回结果数据。 8.3 使用JDBC API访问数据库的过程 概念性的基本过程 打开一个连接；创建“Statement”对象，并设置查询语句；使用Statement对象执行查询，发送查询给数据库服务器和返回结果给应用程序；处理错误的例外机制 具体实施过程 •传递一个Driver给DriverManager，加载数据库驱动。 Class.forName() •通过URL得到一个Connection对象, 建立数据库连接 DriverManager.getConnection(sDBUrl) DriverManager.getConnection(sDBUrl,sDBUserID,sDBPassword) •接着创建一个Statement对象(PreparedStatement或CallableStatement)，用来查询或者修改数据库。 Statement stmt=con.createStatement() •查询返回一个ResultSet。 ResultSet rs=stmt.executeQuery(sSQL) 示例： 12345678910111213141516public static void JDBCexample(String dbid, String userid, String passwd)&#123; try &#123; //错误捕获 Class.forName (\"oracle.jdbc.driver.OracleDriver\"); Connection conn = DriverManager.getConnection( \"jdbc:oracle:thin:@db.yale.edu:1521:univdb\", userid, passwd); //加载数据库驱动，建立数据库连接 Statement stmt = conn.createStatement(); //创建一个语句对象 … Do Actual Work …. //进行SQL语句的执行与处理工作 stmt.close(); conn.close(); //关闭语句对象，关闭连接&#125; catch (SQLException sqle) &#123; System.out.println(\"SQLException : \" + sqle); &#125;&#125; 完整的示例程序 1234567891011121314151617181920212223public static void JDBCexample(String dbid, String userid, String passwd)&#123; try &#123; Class.forName (\"oracle.jdbc.driver.OracleDriver\"); Connection conn = DriverManager.getConnection( \"jdbc:oracle:thin:@db.yale.edu:1521:univdb\", userid, passwd); Statement stmt = conn.createStatement(); try &#123; stmt.executeUpdate( \"insert into instructor values (‘77987', ‘Kim', ‘Physics’,98000)\"); &#125; catch (SQLException sqle) &#123; System.out.println(\"插入错误:\" + sqle); &#125; ResultSet rset = stmt.executeQuery( \"select dept_name, avg(salary) from instructor group by dept_name\"); while ( rset.next() ) &#123; System.out.println(rset.getString(“dept_name\") + \" \" + rset.getFloat(2)); &#125; stmt.close(); conn.close();&#125; catch (SQLException sqle) &#123; System.out.println(\"SQLException:\" + sqle);&#125;&#125; 9. 嵌入式SQL-ODBC-JDBC三者比较执行一条SQL语句，读取执行的结果集合 嵌入式SQL的思维模式 建立数据库连接 声明一个游标 打开游标 读取一条记录(循环) 关闭游标 断开数据库连接 ODBC的思维模式 建立数据库连接 分配语句句柄 用句柄执行SQL 建立高级语言变量与句柄属性的对应 读取一条记录(循环) 释放语句句柄 断开数据库连接 JDBC的思维模式 建立数据库连接 创建语句对象 用语句对象执行SQL，并返回结果对象 从结果对象获取一条记录 提取对象的属性值传给高级语言变量(返回上一步) 释放语句对象 断开数据库连接 相同点: 都是建立数据库连接, 执行sql, 处理结果, 释放连接, 流程基本一致 不同点, 操作方式的不同: 嵌入式SQL按照语句进行操作 ODBC按照函数来进行操作 JDBC按照对象来进行操作","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"数据库","slug":"db","permalink":"http://chaooo.github.io/tags/db/"}]},{"title":"【数据库】数据库语言SQL","date":"2019-07-01T11:36:31.000Z","path":"article/20190701.html","text":"SQL语言概述结构化查询语言(Structured Query Language)简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。 SQL语言是集DDL、DML和DCL于一体的数据库语言 DDL语句引导词：Create(建立),Alter(修改),Drop(撤消) 模式的定义和删除，包括定义Database,Table,View,Index,完整性约束条件等，也包括定义对象(RowType行对象,Type列对象) DML语句引导词：Insert ,Delete, Update, Select 各种方式的更新与检索操作，如直接输入记录，从其他Table(由SubQuery建立)输入 各种复杂条件的检索，如连接查找，模糊查找，分组查找，嵌套查找等 各种聚集操作，求平均、求和、…等，分组聚集，分组过滤等 DCL语句引导词：Grant,Revoke 安全性控制：授权和撤消授权 目录： 利用SQL建立数据库 利用SQL简单查询 利用SQL多表联合查询 利用SQL进行增-删-改 利用SQL语言修正与撤销数据库 SQL Server介绍 SQL语言-子查询 SQL语言-结果计算与聚集计算 SQL语言-分组查询与分组过滤 SQL语言实现关系代数操作 SQL语言之视图及其应用 数据库完整性 数据库的静态完整性(约束) 数据库的动态完整性(触发器) 数据库索引 数据库序列 数据库安全性 数据库自主安全性机制 1. 利用SQL建立数据库DDL：数据定义语言（Data Definition Language)，DDL通常由DBA(数据库管理员)来使用，也有经DBA授权后由应用程序员来使用 创建数据库(DB)：Create Database 数据库(Database)是若干具有相互关联关系的Table/Relation的集合 简单语法形式：create database database 数据库名; 创建DB中的Table(定义关系模式)：Create Table Create table 表名(列名 数据类型 [Primary key|Unique] [Not null][,列名 数据类型 [Not null], …]); []表示其括起的内容可以省略，|表示其隔开的两项可取其一 Primary key: 主键约束。每个表只能创建一个主键约束 Unique: 唯一性约束(即候选键)。可以有多个唯一性约束 Not null: 非空约束。 数据类型（SQL-92标准） char(n):固定长度的字符串 varchar(n):可变长字符串 int:整数 //有时不同系统也写作integer numeric(p，q):固定精度数字，小数点左边p位，右边(p-q)位 real:浮点精度数字 //有时不同系统也写作float(n)，小数点后保留n位 date:日期 (如 2003-09-12) time:时间 (如 23:15:003) 注意: 现行商用DBMS的数据类型有时有些差异 2. 利用SQL简单查询DML：数据操纵语言（Data Manipulation Language)，DML通常由用户或应用程序员使用，访问经授权的数据库 向Table中添加数据(追加元组)：Insert into insert into insert into 表名[(列名[, 列名] …] values (值[,值], …); values值的排列，须与列名排列一致 若所有列名省略，则values值的排列须与该表存储中的列名排列一致 单表查询Select Select Select 列名[[,列名] …] From 表名[Where 检索条件]; 语义：从表名所给出的表中，查询出满足检索条件的元组，并按给定的列名及顺序进行投影显示。 相当于：Π[列名,...,列名](σ检索条件(表名)) Select语句中的select … , from… , where…, 等被称为子句，在以上基本形式基础上会增加许多构成要素，也会增加许多新的子句，满足不同的需求。 检索条件的书写Where 与选择运算σF(R)的条件F书写一样，只是其逻辑运算符用 and,or,not 来表示, 同时也要注意运算符的优先次序及括弧的使用。书写要点是注意对自然语言检索条件的正确理解。 Select Tname From Teacher Where Salary &gt; 2000 and D# = ’03’;//检索教师表中所有工资大于2000元 并且是03系的教师姓名 排重(DISTINCT) 关系模型不允许出现重复元组。但现实DBMS，却允许出现重复元组。 在Table中要求无重复元组是通过定义Primary key或Unique来保证的; 而在检索结果中要求无重复元组, 是通过DISTINCT保留字的使用来实现的。 Select DISTINCT S# From SC Where Score &gt; 80; 排序(ORDER BY) Select语句中结果排序是通过增加order by子句实现的 order by 列名 [asc|desc] 意义为检索结果按指定列名进行排序，若后跟asc或省略，则为升序；若后跟desc, 则为降序。 模糊查询(*LIKE*) _：一个字符，%：任意长度字符。 Select Sname From Student Where Sname Like &#39;张_ _&#39;;//检索名字为张某某的所有同学姓名 Select Sname From Student Where Sname Not Like &#39;张%&#39;;//检索名字不姓张的所有同学姓名 3. 利用SQL多表联合查询多表联合检索可以通过连接运算来完成，而连接运算又可以通过广义笛卡尔积后再进行选择运算来实现。 检索语句: Select 列名[[,列名] …] From 表名1,表名2,… Where 检索条件; 相当于Π[列名,...,列名](σ检索条件(表名1 × 表名2 × …)) 检索条件中要包含连接条件，通过不同的连接条件可以实现等值连接、不等值连接及各种θ-连接 θ-连接之等值连接 多表连接时，如两个表的属性名相同，则需采用表名.属性名方式来限定该属性是属于哪一个表 Select Sname From Student, SC Where Student.S#=SC.S# and SC.C#=&#39;001&#39; Order By Score DESC;//按“001”号课成绩由高到低顺序显示所有学生的姓名(二表连接) 属性重名重名处理(表别名) 连接运算涉及到重名的问题，如两个表中的属性重名，连接的两个表重名(同一表的连接)等，因此需要使用别名以便区分 Select 列名 as 列别名[[,列名 as 列别名] …] From 表名1 as 表别名1,表名2 as 表别名2,… Where Where 检索条件; 当定义了别名后，在检索条件中可以使用别名来限定属性 as 可以省略 θ-连接之不等值连接 Select T1.Tname as Teacher1, T2.Tname as Teacher2 From Teacher T1, Teacher T2 Where T1.Salary&gt;T2.Salary;//求有薪水差额的任意两位教师 实例： Select S1.S# From SC S1, SC S2 Where S1.S# = S2.S# and S1.C#=&#39;001&#39; and S2.C#=&#39;002&#39; and S1.Score &gt; S2.Score;//求“001”号课成绩比“002”号课成绩高的所有学生的学号 4. 利用SQL进行增-删-改 SQL-之更新操作 元组新增Insert：新增一个或一些元组到数据库的Table中 元组更新Update:对某些元组中的某些属性值进行重新设定 元组删除Delete：删除某些元组 SQL-DML既能单一记录操作，也能对记录集合进行批更新操作 SQL-DML之更新操作需要利用前面介绍的子查询(Subquery)的概念，以便处理“一些”、“某些”等 SQL-之INSERT 单一元组新增命令形式：插入一条指定元组值的元组 insert into 表名 [(列名[,列名]…)] values (值 [,值]…); 批数据新增命令形式：插入子查询结果中的若干条元组。待插入的元组由子查询给出。 insert into 表名 [(列名[，列名]…)] 子查询; 示例：Insert Into St (S#,Sname) Select S#,Sname From Student Where Sname like &#39;%伟&#39;;//将检索到的满足条件的同学新增到该表中 注意：当新增元组时，DBMS会检查用户定义的完整性约束条件等，如不符合完整性约束条件，则将不会执行新增动作。 SQL-之DELETE 元组删除Delete命令: 删除满足指定条件的元组 Delete From 表名 [ Where 条件表达式]; 如果Where条件省略，则删除所有的元组(清空表)。 示例：Delete From Student Where S# in ( Select S# From SC Where Score &lt; 60 Group by S# Having Count(*)&gt;= 4);//删除有四门不及格课程的所有同学 SQL-之UPDATE 元组更新Update命令: 用指定要求的值更新指定表中满足指定条件的元组的指定列的值 Update 表名 Set 列名=表达式 | (子查询) [[,列名=表达式 | (子查询) ] …] [ Where 条件表达式]; 如果Where条件省略，则更新所有的元组。 示例：Update Teacher Set Salary=Salary*1.1 Where D# in (Select D# From Dept Where Dname=&#39;计算机&#39;);//将所有计算机系的教师工资上调10% 5. 利用SQL语言修正与撤销数据库 修正基本表的定义 alter table tablename [add {colname datatype, …}] //增加新列 [drop {完整性约束名}] //删除完整性约束 [modify {colname datatype, …}] //修改列定义 示例：Alter Table Student Drop Unique(Sname);删除学生姓名必须取唯一值的约束 示例：Alter Table Student Add Saddr char[40],PID char[18];在学生表Student上增加二列Saddr, PID SQL-DDL之撤销与修改 drop table 表名; //撤消基本表 drop database 数据库名; //撤消数据库 SQL-DDL之数据库指定与关闭命令 有些DBMS提供了操作多个数据库的能力，此时在进行数据库操作时需要指定待操作数据库与关闭数据库的功能。 use 数据库名; //指定当前数据库 close 数据库名; //关闭当前数据库 6. SQL Server介绍SQL Server 是 Microsoft提供的一款关系数据库管理系统 SQL Server 的系统数据库 Master：是SQL Server中最重要的系统数据库，存储SQL Server中的元数据。 Model：模板数据库，在创建新的数据库时，SQL Server将会复制此数据库作为新数据库的基础。 Msdb：代理服务数据库，提供一个存储空间。 Tempdb：临时数据库，为所有的临时表、临时存储过程及其他临时操作提供存储空间，断开连接时，临时表与存储过程自动被删除。 SQL Server的数据库 文件：有三种文件扩展名：.mdf、.ndf、.ldf 主数据库文件：扩展名为.mdf，是存储数据库的启动信息和部分或全部数据。一个数据库可以有多个数据库文件，但主数据库文件只有一个。 辅助数据文件：扩展名为.ndf，用于放置主数据库文件中所定义数据库的其它数据，可有多个。在数据庞大时，可以帮助存储数据。 日志文件：扩展名.ldf。每个数据库至少有一个事务日志文件。 页面：是SQL Server存储的最小单位。一页为8K或8192字节。 空间(extent)：是8个连续的页面，即64K数据，是分配数据表存储空间的一种单位 6.1 SQL Server数据库的创建-删除与维护 创建数据库 语法形式：Create Database 库名 可视化操作(查询分析器)：Database(鼠标右键) -&gt; new Database… -&gt; 填写数据库名及配置 创建数据库的过程就是为数据库设计名称、设计所占用存储空间和存 放文件位置的过程。特别是在网络数据库中，对数据库的设计显得尤为重要。如估计数据可能占用的磁盘空间有多大，日志文件及其他要占用多大空间。 创建数据库的用户自动成为数据库的拥有者。 删除数据库 语法形式：Drop Database 库名 可视化操作(查询分析器)：数据库名(鼠标右键) -&gt; Delete 对不再需要的数据库，应删除以释放空间。删除的结果将是所有数据库文件都一并被删除。 当数据库处于正在使用或正在恢复状态时，不能删除。 备份数据库 可视化操作(查询分析器)：数据库名(鼠标右键) -&gt; Tasks -&gt; Back Up… 备份就是对数据库或事务日志进行备份。SQL的备份是动态的，备份的过程还可以让用户继续改写。只有系统管理员、数据库的拥有者及数据库的备份者才有权限进行数据备份。可以通过企业管理器进行数据库备份。 完全数据库备份：完全备份数据文件和日志文件。 差异备份（增量备份）：对最近一次数据库备份以来发生的数据变化进行备份。这要在完全备份的基础上进行。特点是速度快。 事务日志备份：对数据库发生的事务进行备份。包括从上次进行事务日志备份、差异备份和数据库完全备份之后，所有已经完成的事务。能尽可能的恢复最新的数据库记录。特点是所需磁盘空间小，时间少。 数据库文件和文件组备份：用在数据库相当大的情况下。 恢复数据库 可视化操作(查询分析器)：数据库名(鼠标右键) -&gt; Tasks -&gt; Restore 数据库的恢复是指将数据库备份加载到系统中的过程。在根据数据库备份文件恢复过程中，系统将自动执行安全性检查、重建数据库结构及完成填写数据库内容。 数据库的恢复是静态的。所以在恢复前，应将需要恢复的数据库访问属性设为单用户，不要让其他用户操作。 可以通过企业管理器来完成数据库恢复。 数据库授权: 语法形式：grant 权限 on 表名 to 用户名 权限有：select,update,insert,delete,exec,dri。 对被授权的用户，要先成为该数据库的使用者，即要把用户加到数据库里,才能授权. 6.2 SQL Server数据表的创建-与增/删/改/查 创建表 同一用户不能建立同一个表名的表，同一表名的表可有多个拥有者。但在使用时，需要在这些表上加上所有者的表名。 用T-SQL语句创建表，语法形式：CREATE TABLE [数据库名.所有者名.]表名 ({&lt;列名 数据类型&gt;} [缺省值][约束][是否为空] …) 注意：T-SQL是SQL Server软件的SQL语言，与标准版有些差异。但标准版SQL，一般情况下SQL Server软件也都支持 可视化操作(查询分析器)：数据库名 -&gt; Tables -&gt; New Table… 增加、修改表字段 语法形式：ALTER TABLE ADD | ALTER 字段名 &lt;类型&gt; 创建、删除与修改约束 约束是SQL提供自动保持数据库完整性的一种方法，共5种。 用T-SQL语句建立约束，语法形式：CONSTRAINT 约束名 约束类型 (列名) 约束名：在库中应该唯一，如不指定，系统会给出 约束类型 (5种)： primary key constraint (主键值) unique constraint (唯一性) check constraint (检查性) default constraint (默认) foreign key constraint (外部键) 列名：要约束的字段名 示例:Create Table Course ( C# char(3) , Cname char(12), Chours integer, Credit float(1), T# char(3) ) constraint pk primary key(C# )); 7. SQL语言-子查询 子查询：出现在Where子句中的Select语句被称为子查询(subquery) , 子查询返回了一个集合，可以通过与这个集合的比较来确定另一个查询集合。 三种类型的子查询：(NOT) IN-子查询；θ-Some/θ-All子查询；(NOT) EXISTS子查询 7.1 (NOT) IN子查询 基本语法：表达式 [not] in (子查询) 语法中，表达式的最简单形式就是列名或常数。 语义：判断某一表达式的值是否在子查询的结果中。 示例： Select * From Student Where Sname in (&#39;张三&#39;, &#39;王三&#39;);//列出张三、王三同学的所有信息 Select S#, Sname From Student Where S# in (Select S# From SC Where C#=&#39;001&#39;);//列出选修了001号课程的学生的学号和姓名 非相关子查询：内层查询独立进行，没有涉及任何外层查询相关信息的子查询前面的子查询示例都是非相关子查询 相关子查询：内层查询需要依靠外层查询的某些参量作为限定条件才能进行的子查询 外层向内层传递的参量需要使用外层的表名或表别名来限定 示例：Select Sname From Student Stud Where S# in ( Select S# From SC Where S# = Stud.S# and C#=&#39;001&#39;);//求学过001号课程的同学的姓名 注意：相关子查询只能由外层向内层传递参数，而不能反之；这也称为变量的作用域原则。 7.2 θ-Some/θ-All子查询 基本语法：表达式 θ some (子查询) / 表达式 θ all (子查询) 语法中，θ是比较运算符：&lt;, &gt;, &gt;=, &lt;=, =, &lt;&gt;。 语义：将表达式的值与子查询的结果进行比较： 如果表达式的值至少与子查询结果的某一个值相比较满足 关系，则表达式 θ some (子查询)的结果便为真 如果表达式的值与子查询结果的所有值相比较都满足 关系，则表达式 θ all (子查询)的结果便为真 示例： Select Tname From Teacher Where Salary &lt;= all ( Select Salary From Teacher);//找出工资最低的教师姓名 Select S# From SC Where C# = “001” and Score &lt; some ( Select Score From SC Where C#=&#39;001&#39;);//找出001号课成绩不是最高的所有学生的学号 在SQL标准中，也有θ-Any谓词，但由于其语义的模糊性：any,“任一”是指所有呢？还是指某一个？不清楚，所以被θ-Some替代以求更明晰。 等价性变换需要注意 表达式 = some (子查询)和表达式 in (子查询)含义相同 表达式 &lt;&gt; some (子查询)和表达式 not in (子查询)含义不同 表达式 &lt;&gt; all (子查询)和表达式 not in (子查询)含义相同 7.3 (NOT) EXISTS子查询 基本语法：[not] Exists [not] Exists (子查询) 语义：子查询结果中有无元组存在 1234567891011121314--示例：检索选修了赵三老师主讲课程的所有同学的姓名Select DISTINCT Sname From Student Where exists ( Select * From SC, Course, Teacher Where SC.C#=Course.C# and SC. S#=Student.S# and Course.T# = Teacher.T# and Tname='赵三');--示例：检索学过001号教师主讲的所有课程的所有同学的姓名Select Sname From Student Where not exists //不存在 ( Select * From Course //有一门001教师主讲课程 Where Course.T# = ‘001’ and not exists //该同学没学过 ( Select * From SC Where S# = Student.S# and C# = Course.C#));--上述语句的意思：不存在有一门001号教师主讲的课程该同学没学过 8. SQL语言-结果计算与聚集计算8.1 结果计算Select-From-Where语句中，Select子句后面不仅可是列名，而且可是一些计算表达式或聚集函数，表明在投影的同时直接进行一些运算 Select Select 列名 | expr | agfunc(列名) [[, 列名 | expr | agfunc(列名) ] … ] From 表名1 [, 表名2 … ] [ Where Where 检索条件 ]; expr可以是常量、列名、或由常量、列名、特殊函数及算术运算符构成的算术运算式。特殊函数的使用需结合各自DBMS的说明书 agfunc()是一些聚集函数 1234--示例：求有差额(差额&gt;0)的任意两位教师的薪水差额Select T1.Tname as TR1, T2.Tname as TR2, T1.Salary – T2.Salary From Teacher T1, Teacher T2 Where T1.Salary &gt; T2.Salary; 8.2 聚集函数SQL提供了五个作用在简单列值集合上的内置聚集函数agfunc,分别是：COUNT、SUM、AVG、MAX、MIN 聚合函数 支持的数据类型 描述 count() 任何类型/* 计算结果集中的总行数 sum() Numeric 计算指定列中所有非空值的总和 avg() numeric 计算指定列中所有非空值的平均值 max() char/numeric 返回指定列中最大值 min() char/numeric 返回指定列中最小值 12345678--示例：求教师的工资总额Select Sum(Salary) From Teacher;--示例：求计算机系教师的工资总额Select Sum(Salary) From Teacher T, Dept Where Dept.Dname = ‘计算机’ and Dept.D# = T.D#;--示例：求数据库课程的平均成绩Select AVG(Score) From Course C, SC Where C.Cname = ‘数据库’ and C.C# = SC.C#; 9. SQL语言-分组查询与分组过滤9.1 分组查询分组：SQL可以将检索到的元组按照某一条件进行分类，具有相同条件值的元组划到一个组或一个集合中，同时处理多个组或集合的聚集运算。 分组的基本语法： 1234Select Select 列名 | expr | agfunc(列名) [[, 列名 | expr | agfunc(列名) ] … ] From 表名1 [, 表名2 … ] [ Where Where 检索条件 ] [ Group by Group by 分组条件 ] ; 分组条件可以是：列名1, 列名2, … 示例： 求每一个学生的平均成绩 Select S#, AVG(Score) From SC Group by S#; 9.2 分组过滤聚集函数是不允许用于Where子句中的：Where子句是对每一元组进行条件过滤，而不是对集合进行条件过滤 分组过滤：若要对集合(即分组)进行条件过滤，即满足条件的集合/分组留下，不满足条件的集合/分组剔除。 Having子句，又称分组过滤子句。需要有Groupby子句支持，换句话说，没有Groupby子句，便不能有Having子句。 基本语法： 1234Select Select 列名 | expr | agfunc(列名) [[, 列名 | expr | agfunc(列名) ] … ] From 表名1 [, 表名2 … ] [ Where Where 检索条件 ] [ Group by Group by 分组条件 [ Having Having 分组过滤条件] ] ; 示例：求不及格课程超过两门的同学的学号 Select S# From SC Where Score&lt;60 Group by S# Having Count(*)&gt;2; 9.3 where子句与having子句的区别 聚合函数是比较where、having 的关键。在from后面的执行顺序： where -&gt; 聚合函数(sum,min,max,avg,count) -&gt;having 列出group by来比较二者: where子句：是在分组之前使用，表示从所有数据中筛选出部分数据，以完成分组的要求，在where子句中不允许使用统计函数，没有group by子句也可以使用。 having子句：是在分组之后使用的，表示对分组统计后的数据执行再次过滤，可以使用统计函数，有group by子句之后才可以出现having子句。 注意事项 ： where 后不能跟聚合函数，因为where执行顺序大于聚合函数。 where 子句的作用是在对查询结果进行分组前，将不符合where条件的行去掉，即在分组之前过滤数据，条件中不能包含聚组函数，使用where条件显示特定的行。 having 子句的作用是筛选满足条件的组，即在分组之后过滤数据，条件中经常包含聚组函数，使用having 条件显示特定的组，也可以使用多个分组标准进行分组。 10. SQL语言实现关系代数操作SQL语言：并运算UNION, 交运算INTERSECT, 差运算EXCEPT。 基本语法形式： 子查询 {Union [ALL] | Intersect [ALL] | Except [ALL] 子查询} 通常情况下自动删除重复元组：不带ALL。若要保留重复的元组，则要带ALL。 假设子查询1的一个元组出现m次，子查询2的一个元组出现n次，则该元组在： 子查询1 Union ALL 子查询2 ，出现m + n次 子查询1 Intersect ALL 子查询2 ，出现min(m,n)次 子查询1 Except ALL 子查询2 ，出现max(0, m – n)次 UNION运算符是Entry-SQL92的一部分, INTERSECT、EXCEPT运算符是Full-SQL92的一部分,它们都是Core-SQL99的一部分，但有些DBMS并不支持这些运算，使用时要注意。 10.1 SQL并运算(UNION) 示例：已知两个表 Customers(Cid, Cname, City, Discnt) Agents(Aid, Aname, City, Percent) 求客户所在的或者代理商所在的城市123Select City From CustomersUNIONSelect City From Agents; 10.2 SQL交运算(INTERSECT) 示例：求既学过002号课，又学过003号课的同学学号 123Select S# From SC Where C# = ‘002’INTERSECTSelect S# From SC Where C# = ‘003’; 上述语句也可采用如下不用INTERSECT的方式来进行 Select S# From SC Where C# = ‘002’ and S# IN (Select S# From SC Where C# = ‘003’); 交运算符Intersect并没有增强SQL的表达能力，没有Intersect， SQL也可以用其他方式表达同样的查询需求。只是有了Intersect更容易表达一些，但增加了SQL语言的不唯一性。 10.3 SQL差运算(EXCEPT) 示例： 假定所有学生都有选课，求没学过002号课程的学生学号 123Select DISTINCT S# From SCEXCEPTSelect S# From SC Where C# = ‘002’; 上述语句也可采用如下不用INTERSECT的方式来进行 123Select DISTINCT S# From SC SC1 Where not exists ( Select * From SC Where C# = ‘002’ and S# = SC1.S#); 差运算符Except也没有增强SQL的表达能力，没有Except， SQL也可以用其他方式表达同样的查询需求。只是有了Except更容易表达一些，但增加了SQL语言的不唯一性。 10.4 空值的处理空值是其值不知道、不确定、不存在的值；数据库中有了空值，会影响许多方面，如影响聚集函数运算的正确性，不能参与算术、比较或逻辑运算等 在SQL标准中和许多现流行的DBMS中，空值被用一种特殊的符号Null来标记，使用特殊的空值检测函数来获得某列的值是否为空值。 空值检测： is [not ] null //测试指定列的值是否为空值 示例：找出年龄值为空的学生姓名 Select Sname From Student Where Sage is null; 现行DBMS的空值处理小结 除is[not]null之外，空值不满足任何查找条件 如果null参与算术运算，则该算术表达式的值为null 如果null参与比较运算，则结果可视为false。在SQL-92中可看成unknown 如果null参与聚集运算，则除count(*)之外其它聚集函数都忽略null 10.5 内连接、外连接 标准SQL语言中连接运算通常为： Select Select 列名[[,列名]… ] From 表名1,表名2,… Where 检索条件; 即相当于采用Π[列名,…,列名](σ 检索条件(表名1 × 表名2 × …))。 SQL的高级语法中引入了内连接与外连接运算，具体形式： 12345Select Select 列名 [ [, 列名] … ] From 表名1 [NATURAL] [ INNER | &#123; LEFT | RIGHT | FULL&#125; [OUTER]] JOIN 表名2 &#123; ON 连接条件 | Using (Colname &#123;, Colname …&#125;) &#125; [ Where Where 检索条件 ] … ; 由 连接类型 和 连接条件 构成连接运算。 Natural：出现在结果关系中的两个连接关系的元组在公共属性上取值相等，且公共属性只出现一次 Inner Join: 即关系代数中的θ-连接运算 Left Outer Join, Right Outer Join, Full Outer Join: 即关系代数中的外连接运算 on &lt;连接条件&gt;：出现在结果关系中的两个连接关系的元组取值满足连接条件，且公共属性出现两次 using (Col1, Col2, …, Coln)：Col是两个连接关系的公共属性的子集，元组在(Col1,Col2,…,Coln)上取值相等，且(Col1,Col2,…,Coln)只出现一次 示例: 1234567891011-- (Inner Join)求所有教师的任课情况并按教师号排序(没有任课的教师也需列在表中)Select Teacher.T#, Tname, Cname From Teacher Inner Join Course ON Teacher.T# = Course.T# Order by Teacher.T# ASC;--(Outer Join)求所有教师的任课情况(没有任课的教师也需列在表中)Select Teacher. T#, Tname, Cname From Teacher Left Outer Join Course ON Teacher.T# = Course.T# Order by Teacher.T# ASC ; 11. SQL语言之视图及其应用 数据库的三级模式两层映像 三级模式：数据库系统是由外模式、模式(概念模式)和内模式三级构成 应用–&gt; 外模式(多个) –&gt; 概念模式(一个) –&gt; 内模式(一个) –&gt; 数据库 两层映像：E-C映像(外模式-&gt;概念模式)、C-I映像(概念模式-&gt;内模式)。 对应概念模式的数据在SQL中被称为基本表(Table),而对应外模式的数据称为视图(View)。视图不仅包含外模式，而且包含其E-C映像。 基本表是实际存储于存储文件中的表，基本表中的数据是需要存储的 视图在SQL中只存储其由基本表导出视图所需要的公式，即由基本表产生视图的映像信息，其数据并不存储，而是在运行过程中动态产生与维护的 对视图数据的更改最终要反映在对基本表的更改上。 11.1 视图的定义视图需要“先定义，再使用”；定义视图，有时可方便用户进行检索操作。 定义视图: create view view_name [(列名[列名] …)] as 子查询 [with check option] 如果视图的属性名缺省，则默认为子查询结果中的属性名；也可以显式指明其所拥有的列名。 with checkoption指明当对视图进行insert，update，delete时，要检查进行insert/update/delete的元组是否满足视图定义中子查询中定义的条件表达式 示例：定义一个视图 CompStud 为计算机系的学生，通过该视图可以将Student表中其他系的学生屏蔽掉1234Create View CompStud AS (Select * From Student Where D# in (Select D# From Dept Where Dname = ‘计算机’)); 11.2 视图的使用使用视图：定义好的视图，可以像Table一样，在SQL各种语句中使用 示例：检索计算机系的所有学生，我们可使用CompStud Select * From CompStud; 示例：检索计算机系的年龄小于20的所有学生，我们可使用CompStud Select * From CompStud Where Sage&lt;20; 11.3 视图的更新SQL视图更新：是比较复杂的问题，因视图不保存数据，对视图的更新最终要反映到对基本表的更新上，而有时，视图定义的映射不是可逆的。 SQL视图更新的可执行性 如果视图的select目标列包含聚集函数，则不能更新 如果视图的select子句使用了unique或distinct，则不能更新 如果视图中包括了groupby子句，则不能更新 如果视图中包括经算术表达式计算出来的列，则不能更新 如果视图是由单个表的列构成，但并没有包括主键，则不能更新 对于由单一Table子集构成的视图，即如果视图是从单个基本表使用选择、投影操作导出的，并且包含了基本表的主键，则可以更新 可更新SQL视图示例： 1234567-- 定义视图create view CStud(S#, Sname, Sclass)as ( select S#, Sname, Sclass from Student where D# ='03');-- 更新视图Insert into CStud Values ('98030104', '张三丰', '980301');-- 更新视图 将转换为 更新基本表insert into Student values ('98030104', '张三丰', Null, Null, '03', '980301') 11.4 视图的撤销已经定义的视图也可以撤消 撤消视图：Drop View view_name 不仅视图可以撤消，基本表、数据库等都可以撤消 撤消基本表：Drop Table 表名 12. 数据库完整性数据库完整性(DB Integrity)是指：DBMS应保证的DB的一种特性–在任何情况下的正确性、有效性和一致性 广义完整性：语义完整性、并发控制、安全控制、DB故障恢复等 狭义完整性：专指语义完整性，DBMS通常有专门的完整性管理机制与程序来处理语义完整性问题。 12.1 基本概念关系模型中有完整性要求：实体完整性、参照完整性、用户自定义完整性 数据库完整性管理的作用 防止和避免数据库中不合理数据的出现 DBMS应尽可能地自动防止DB中语义不合理现象 如DBMS不能自动防止，则需要应用程序员和用户在进行数据库操作时处处加以小心，每写一条SQL语句都要考虑是否符合语义完整性，这种工作负担是非常沉重的，因此应尽可能多地让DBMS来承担 DBMS怎样自动保证完整性： DBMS允许用户定义一些完整性约束规则(用SQL-DDL来定义) 当有DB更新操作时，DBMS自动按照完整性约束条件进行检查，以确保更新操作符合语义完整性 完整性约束条件(或称完整性约束规则)的一般形式：Integrity Constraint::=(O,P,A,R) O：数据集合：约束的对象(列、多列(元组)、元组集合) P：谓词条件：需要定义什么样的约束 A：触发条件：默认更新时检查 R：响应动作：默认拒绝 12.2 数据库完整性的分类 按约束对象分类: 域完整性约束条件：施加于某一列上，对给定列上所要更新的某一候选值是否可以接受进行约束条件判断，这是孤立进行的 关系完整性约束条件：施加于关系/table上，对给定table上所要更新的某一候选元组是否可以接受进行约束条件判断，或是对一个关系中的若干元组和另一个关系中的若干元组间的联系是否可以接受进行约束条件判断 按约束来源分类: 结构约束：来自于模型的约束，例如函数依赖约束、主键约束(实体完整性)、外键约束(参照完整性)，只关心数值相等与否、是否允许空值等； 内容约束：来自于用户的约束，如用户自定义完整性，关心元组或属性的取值范围。例如Student表的Sage属性值在15岁至40岁之间等。 按约束状态分类: 静态约束：要求DB在任一时候均应满足的约束；例如Sage在任何时候都应满足大于0而小于150(假定人活最大年龄是150)。 动态约束：要求DB从一状态变为另一状态时应满足的约束；例如工资只能升，不能降：工资可以是800元，也可以是1000元；可以从800元更改为1000元，但不能从1000元更改为800元。 13. 数据库的静态完整性(约束) SQL语言支持的约束类别： 静态约束 列完整性—域完整性约束 表完整性–关系完整性约束 动态约束 触发器 CreateTable有三种功能：定义关系模式、定义完整性约束 和定义物理存储特性 定义完整性约束条件：列完整性、表完整性 列约束：一种域约束类型，对单一列的值进行约束 1234567&#123; NOT NULL | //列值非空[ CONSTRAINT constraintname ] //为约束命名，便于以后撤消&#123; UNIQUE //列值是唯一| PRIMARY KEY //列为主键| CHECK (search_cond) //列值满足条件,条件只能使用列当前值| REFERENCES tablename [(colname) ][ON DELETE &#123; CASCADE | SET NULL &#125; ] &#125; &#125; 表约束：一种关系约束类型，对多列或元组的值进行约束 1234567[ CONSTRAINT constraintname ] //为约束命名，便于以后撤消&#123; UNIQUE (colname &#123;,colname…&#125;) //几列值组合在一起是唯一| PRIMARY KEY (colname &#123;,colname…&#125;) //几列联合为主键| CHECK (search_condition) //元组多列值共同满足条件 //条件中只能使用同一元组的不同列当前值| FOREIGN KEY (colname &#123;,colname…&#125;)REFERENCES tablename [(colname &#123;,colname…&#125;)]//引用另一表tablename的若干列的值作为外键 check中的条件可以是Select-From-Where内任何Where后的语句，包含子查询。 Create Table中定义的表约束或列约束可以在以后根据需要进行撤消或追加。撤消或追加约束的语句是 Alter Table(不同系统可能有差异) 示例：撤消SC表的ctscore约束(由此可见，未命名的约束是不能撤消) Alter Table SC DROP CONSTRAINT ctscore; 有些DBMS支持独立的追加约束,注意书写格式可能有些差异 示例：Alter Table SC Add Constraint nctscore check (Score&gt;=0.0 and Score&lt;=150.0)); 现约束的方法-断言ASSERTION 一个断言就是一个谓词表达式，它表达了希望数据库总能满足的条件 表约束和列约束就是一些特殊的断言 SQL还提供了复杂条件表达的断言。其语法形式为： CREATE ASSERTION &lt;assertion-name&gt; CHECK &lt;predicate&gt; 当一个断言创建后，系统将检测其有效性，并在每一次更新中测试更新是否违反该断言。 1234567891011-- 示例: “每个分行的贷款总量必须小于该分行所有账户的余额总和”create assertion sum_constraint check (not exists (select * from branch where (select sum(amount ) from loan where loan.branch_name = branch.branch_name ) &gt;= (select sum (balance ) from account where account.branch_name = branch.branch_name )))-- 数据表：account(branch_name, account_number,…, balance) //分行，账户及其余额loan(branch_name , loan_number, amount,) //分行的每一笔贷款branch(branch_name, … ) //分行 断言测试增加了数据库维护的负担，要小心使用复杂的断言。 14. 数据库的动态完整性(触发器)实现数据库动态完整的方法—触发器Trigger 触发器Trigger Create Table中的表约束和列约束基本上都是静态的约束，也基本上都是对单一列或单一元组的约束(尽管有参照完整性)，为实现动态约束以及多个元组之间的完整性约束，就需要触发器技术Trigger Trigger是一种过程完整性约束(相比之下，Create Table中定义的都是非过程性约束),是一段程序，该程序可以在特定的时刻被自动触发执行，比如在一次更新操作之前执行，或在更新操作之后执行。 基本语法 12345678CREATE TRIGGER trigger_name BEFORE | AFTER &#123; INSERT | DELETE | UPDATE [OF colname &#123;, colname...&#125;] &#125; ON tablename [REFERENCING corr_name_def &#123;, corr_name_def...&#125; ] [FOR EACH ROW | FOR EACH STATEMENT] //对更新操作的每一条结果(前者)，或整个更新操作完成(后者) [WHEN (search_condition)] //检查条件，如满足执行下述程序 &#123; statement //单行程序直接书写，多行程序要用下行方式 | BEGIN ATOMIC statement; &#123; statement;...&#125; END &#125; 触发器Trigger意义： 当某一事件发生时(Before|After),对该事件产生的结果(或是每一元组，或是整个操作的所有元组), 检查条件search_condition,如果满足条件，则执行后面的程序段。条件或程序段中引用的变量可用corr_name_def来限定。 事件：BEFORE | AFTER { INSERT | DELETE | UPDATE …} 当一个事件(Insert, Delete, 或Update)发生之前Before或发生之后After触发 操作发生，执行触发器操作需处理两组值：更新前的值和更新后的值，这两个值由corr_name_def的使用来区分 corr_name_def的定义 12345&#123; OLD [ROW] [AS] old_row_corr_name //更新前的旧元组命别名为| NEW [ROW] [AS] new_row_corr_name //更新后的新元组命别名为| OLD TABLE [AS] old_table_corr_name //更新前的旧Table命别名为| NEW TABLE [AS] new_table_corr_name //更新后的新Table命别名为&#125; corr_name_def将在检测条件或后面的动作程序段中被引用处理 示例1: 设计一个触发器当进行Teacher表更新元组时, 使其工资只能升不能降 12345678create trigger teacher_chgsal before update of salary on teacher referencing new x, old y for each row when (x.salary &lt; y.salary)begin raise_application_error(-20003, 'invalid salary on update'); //此条语句为Oracle的错误处理函数end; 示例2: 假设student(S#, Sname, SumCourse), SumCourse为该同学已学习课程的门数，初始值为0，以后每选修一门都要对其增1 。设计一个触发器自动完成上述功能。 1234567create trigger sumc after insert on sc referencing new row newi for each rowbegin update student set SumCourse = SumCourse + 1 where S# = :newi.S# ;end; 示例3：假设student(S#, Sname, SumCourse), 当删除某一同学S#时，该同学的所有选课也都要删除。设计一个触发器完成上述功能 123456create trigger delS# after delete on Student referencing old oldi for each rowbegin delete sc where S# = :oldi.S# ;end; 15. 数据库索引索引是对数据库表中一列或多列的值进行排序的一种数据结构（最常见的是B-Tree） 索引的作用 快速取数据； 保证数据记录的唯一性； 实现表与表之间的参照完整性； 在使用ORDER by、group by子句进行数据检索时，利用索引可以减少排序和分组的时间。 创建索引：CREATE INDEX 索引名称 on 表名(字段名); 删除索引：DROP INDEX 索引名称 索引注意事项： 查询时减少使用*返回全部列，不要返回不需要的列 where表达式子句包含索引的表达式置前 避免在Order by中使用表达式 索引技术是数据库自动使用，一个表格只存在一个索引就够了 缺点 索引的缺点是创建和维护索引需要耗费时间和空间 索引可以提高查询速度，会减慢写入速度 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。 15.1 索引主要种类根据数据库的功能，可以在数据库设计器中创建三种索引：唯一索引、主键索引和聚集索引。提示：尽管唯一索引有助于定位信息，但为获得最佳性能结果，建议改用主键或唯一约束。 唯一索引 唯一索引是不允许其中任何两行具有相同索引值的索引。当现有数据中存在重复的键值时，大多数数据库不允许将新创建的唯一索引与表一起保存。数据库还可能防止添加将在表中创建重复键值的新数据。例如，如果在employee表中职员的姓(lname)上创建了唯一索引，则任何两个员工都不能同姓。 主键索引 数据库表经常有一列或多列组合，其值唯一标识表中的每一行。该列称为表的主键。在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问。 聚集索引 在聚集索引中，表中行的物理顺序与键值的逻辑（索引）顺序相同。一个表只能包含一个聚集索引。如果某索引不是聚集索引，则表中行的物理顺序与键值的逻辑顺序不匹配。与非聚集索引相比，聚集索引通常提供更快的数据访问速度。聚集索引和非聚集索引的区别，如字典默认按字母顺序排序，读者如知道某个字的读音可根据字母顺序快速定位。因此聚集索引和表的内容是在一起的。如读者需查询某个生僻字，则需按字典前面的索引，举例按偏旁进行定位，找到该字对应的页数，再打开对应页数找到该字。这种通过两个地方而查询到某个字的方式就如非聚集索引。 索引列 可以基于数据库表中的单列或多列创建索引。多列索引可以区分其中一列可能有相同值的行。如果经常同时搜索两列或多列或按两列或多列排序时，索引也很有帮助。例如，如果经常在同一查询中为姓和名两列设置判据，那么在这两列上创建多列索引将很有意义。 16. 数据库序列序列(SEQUENCE)是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。其主要的用途是生成表的主键值，可以在插入语句中引用，也可以通过查询检查当前值，或使序列增至下一个值。创建序列需要CREATE SEQUENCE系统权限。 16.1 Oracle中的序列（Sequence） 创建序列 1234567create sequence 序列名 [increment by n] --每次增加n个，默认为1 [start with n] --起始值n，默认为1 [&#123;maxvalue n | nomaxvalue&#125;] --最大值设置，递增默认10的27次方，递减默认-1 [&#123;minvalue n | nominvalue&#125;] --最小值设置，递增默认1，递减默认-10的26次方 [&#123;cycle | nocycle&#125;] --是否循环 [&#123;cache n | nocache&#125;] --是否对序列进行内存缓冲，默认为20 查询序列 NEXTVAL:返回序列中下一个有效的值，任何用户都可以引用。 CURRVAL:中存放序列的当前值,NEXTVAL 应在 CURRVAL 之前指定 ，二者应同时有效。 1234--查询下一个将要使用的序列select 序列名.nextval from dual--查询当前序列select 序列名.currval from dual Oracle将sequence的定义存储在数据字典之中。 Sequence是独立于事务的，就是说序列的增加不需要等待事务的完成，也就是说序列是异步于事务而增长的。这说明，你访问不到别的用户使用该sequence产生的值，也就是说你只能访问到你当前产生的值，即使其他用户已经增加了sequence的值；还说明如果事务回滚，sequence不会回滚，它所发生的改变是一维的。 删除序列：Drop sequence 序列名 更改序列：Alter sequence 序列名 [其余参数同创建序列] 使用序列示例： 123456789101112-- 1.直接使用insert into person (id, name, password) values (序列名.nextval, '张三', '123')-- 2.也可以通过建立触发器，当有数据插入表person时，使用oracle序列为其去的递增的主键值-- 2.1创建触发器create or replace trigger 触发器名 before insert on personfor each rowbegin select 序列名.nextval into :new.id from dual;end;-- 2.2插入数据insert into person ( username, age, password) values ('张三', 20, 'zhang123') 注意点： 一个序列可以被多张别使用，不过一般建议为每个表建立单独的序列。 当使用到序列的事务发生回滚。会造成序列号不连续。在用生成的序列值作为编号做插入数据库操作时，可能遇到事务提交失败，从而导致序号不连续。 大量语句发生请求，申请序列时，为了避免序列在运用层实现序列而引起的性能瓶颈。Oracle序列允许将序列提前生成 n个先存入内存，在发生大量申请序列语句时，可直接到运行最快的内存中去得到序列。但cache个数最好不要设置过大，因为在数据库重启时，会清空内存信息，预存在内存中的序列会丢失，当数据库再次启动后，序列从上次内存中最大的序列号+1 开始存入n个。这种情况也能会在数据库关闭时也会导致序号不连续。 16.2 Mysql中的序列（AUTO_INCREMENT）MySQL中最简单使用序列的方法就是使用AUTO_INCREMENT来定义列。 orale没有类似mysql的AUTO_INCREMENT这样的自增长字段，实现插入一条记录，自动增加1.oracle是通过sequence（序列）来完成的。 首先mysql的自增长“序列”和序列是两回事，mysql本身不提供序列机制。 mysql的AUTO_INCREMENT可以设置起始值，但是不能设置步长，其步长默认就是1. mysql一个表只能有一个自增长字段。自增长只能被分配给固定表的固定的某一字段，不能被多个表共用。并且只能是数字型。 17. 数据库安全性数据库安全性是指DBMS应该保证的数据库的一种特性(机制或手段)：免受非法、非授权用户的使用、泄漏、更改或破坏 数据库安全性管理涉及许多方面 社会法律及伦理方面：私人信息受到保护，未授权人员访问私人信息会违法 公共政策/制度方面：例如，政府或组织的信息公开或非公开制度 安全策略：政府、企业或组织所实施的安全性策略，如集中管理和分散管理，需者方知策略(也称最少特权策略) 数据的安全级别: 绝密(Top Secret), 机密(Secret),可信(Confidential)和无分类(Unclassified) 数据库系统DBS的安全级别：物理控制、网络控制、操作系统控制、DBMS控制 DBMS的安全机制 自主安全性机制：存取控制(AccessControl) 通过权限在用户之间的传递，使用户自主管理数据库安全性 强制安全性机制： 通过对数据和用户强制分类，使得不同类别用户能够访问不同类别的数据 推断控制机制： 防止通过历史信息，推断出不该被其知道的信息； 防止通过公开信息(通常是一些聚集信息)推断出私密信息(个体信息)，通常在一些由个体数据构成的公共数据库中此问题尤为重要 数据加密存储机制： 通过加密、解密保护数据，密钥、加密/解密方法与传输 DBA的责任和义务 熟悉相关的法规、政策，协助组织的决策者制定好相关的安全策略 规划好安全控制保障措施，例如，系统安全级别、不同级别上的安全控制措施，对安全遭破坏的响应， 划分好数据的安全级别以及用户的安全级别 实施安全性控制：DBMS专门提供一个DBA账户，该账户是一个超级用户或称系统用户。DBA利用该账户的特权可以进行用户账户的创建以及权限授予和撤消、安全级别控制调整等 18. 数据库自主安全性机制 通常情况下，自主安全性是通过授权机制来实现的。 用户在使用数据库前必须由DBA处获得一个账户，并由DBA授予该账户一定的权限，该账户的用户依据其所拥有的权限对数据库进行操作; 同时，该帐户用户也可将其所拥有的权利转授给其他的用户(账户)，由此实现权限在用户之间的传播和控制。 授权者：决定用户权利的人 授权：授予用户访问的权利 DBMS自动实现自主安全性： DBMS允许用户定义一些安全性控制规则(用SQL-DCL来定义) 当有DB访问操作时，DBMS自动按照安全性控制规则进行检查，检查通过则允许访问，不通过则不允许访问 DBMS将权利和用户(账户)结合在一起，形成一个访问规则表，依据该规则表可以实现对数据库的安全性控制 AccessRule ::=(S, O, t, P) S: 请求主体(用户) O: 访问对象 t: 访问权利 P: 谓词 {AccessRule｝通常存放在数据字典或称系统目录中，构成了所有用户对DB的访问权利; 用户多时，可以按用户组建立访问规则 访问对象可大可小(目标粒度Object granularity):属性/字段、记录/元组、关系、数据库 权利：包括创建、增、删、改、查等 谓词：拥有权利需满足的条件 示例：员工管理数据库的安全性控制示例Employee(P#,Pname,Page,Psex,Psalary,D#,HEAD) 示例要求： 员工管理人员：能访问该数据库的所有内容，便于维护员工信息 收发人员：访问该数据库以确认某员工是哪一个部门的，便于收发工作，只能访问基本信息，其他信息不允许其访问 每个员工：允许其访问关于自己的记录，以便查询自己的工资情况，但不能修改 部门领导：能够查询其所领导部门人员的所有情况 高层领导：能访问该数据库的所有内容，但只能读 两种控制示例 按名控制安全性：存储矩阵 按内容控制安全性：视图 视图是安全性控制的重要手段 通过视图可以限制用户对关系中某些数据项的存取,例如： 视图1：CreateEmpV1as select*fromEmployee 视图2：CreateEmpV2as selectPname,D#fromEmployee 通过视图可将数据访问对象与谓词结合起来，限制用户对关系中某些元组的存取，例如： 视图1： CreateEmpV3asselect*fromEmployeewhereP#=:UserId 视图2： CreateEmpV4asselect*fromEmployeewhereHead=:UserId 用户定义视图后，视图便成为一新的数据对象，参与到存储矩阵与能力表中进行描述 18.1 SQL语言的用户与权利 SQL语言包含了DDL,DML和DCL。数据库安全性控制是属于DCL范畴 授权机制—自主安全性；视图的运用 关系级别(普通用户) &lt;– 账户级别(程序员用户) &lt;– 超级用户(DBA) (级别1)Select : 读(读DB, Table, Record, Attribute, … ) (级别2)Modify : 更新 Insert : 插入(插入新元组, … ) Update : 更新(更新元组中的某些值, …) Delete : 删除(删除元组, …) (级别3)Create : 创建(创建表空间、模式、表、索引、视图等) Create : 创建 Alter : 更新 Drop : 删除 级别高的权利自动包含级别低的权利。如某人拥有更新的权利，它也自动拥有读的权利。在有些DBMS中，将级别3的权利称为账户级别的权利，而将级别1和2称为关系级别的权利。 授权命令GRANT 1234GRANT &#123;all PRIVILEGES | privilege &#123;,privilege…&#125;&#125; ON [TABLE] tablename | viewname TO &#123;public | user-id &#123;, user-id…&#125;&#125; [WITH GRANT OPTION]; user-id ，某一个用户账户，由DBA创建的合法账户 public, 允许所有有效用户使用授予的权利 privilege是下面的权利 SELECT | INSERT | UPDATE | DELETE | ALL PRIVILEDGES WITH GRANT OPTION选项是允许被授权者传播这些权利 SQL-DCL的控制安全性-授权示例: 假定高级领导为Emp0001, 部门领导为Emp0021, 员工管理员为Emp2001,收发员为Emp5001(均为UserId, 也即员工的P#) Grant All Priviledges ON Employee TO Emp2001; Grant SELECT ON EmpV2 TO Emp5001; Grant SELECT ON EmpV3 TO public; Grant SELECT ON EmpV4 TO Emp0021; 授予视图访问的权利，并不意味着授予基本表访问的权利(两个级别：基本关系级别和视图级别) 授权者授予的权利必须是授权者已经拥有的权利 收回授权命令REVOKE 123REVOKE &#123;all privilEges | priv &#123;, priv…&#125; &#125; ON tablename | viewname FROM &#123;public | user &#123;, user…&#125; &#125;; 示例: revoke select on employee from UserB; 18.2 自主安全性的授权过程及其问题18.2.1 授权过程: 第一步：DBA创建DB, 并为每一个用户创建一个账户 假定建立了五个用户：UserA, UserB, UserC, UserD, UserE 第二步：DBA授予某用户账户级别的权利 假定授予UserA 第三步：具有账户级别的用户可以创建基本表或视图, 他也自动成为该表或该视图的属主账户，拥有该表或该视图的所有访问 权利 假定UserA创建了Employee, 则UserA就是Employee表的属主账户 第四步：拥有属主账户的用户可以将其中的一部分权利授予另外的用户，该用户也可将权利进一步授给其他的用户… 假定UserA将读权限授予UserB, 而userB又将其拥有的权限授予UserC,如此将权利不断传递下去。 注意授权的传播范围 传播范围包括两个方面：水平传播数量和垂直传播数量 水平传播数量是授权者的再授权用户数目(树的广度) 垂直传播数量是授权者传播给被授权者，再被传播给另一个被授权者, …传播的深度(树的深度) 有些系统提供了传播范围控制，有些系统并没有提供，SQL标准中也并没有限制。 当一个用户的权利被收回时，通过其传播给其他用户的权利也将被收回 如果一个用户从多个用户处获得了授权，则当其中某一个用户收回授权时，该用户可能仍保有权利。例如UserC从UserB和UserE处获得了授权，当UserB收回时，其还将保持UserE赋予其的权利。 18.2.2 强制安全性机制 强制安全性机制 强制安全性通过对数据对象进行安全性分级 绝密(Top Secret), 机密(Secret), 可信(Confidential) 和 无分类(Unclassified) 同时对用户也进行上述的安全性分级 从而强制实现不同级别用户访问不同级别数据的一种机制 强制安全性机制的实现 DBMS引入强制安全性机制, 可以通过扩展关系模式来实现 关系模式: R(A1: D1, A2: D2, …, An:Dn) 对属性和元组引入安全性分级特性或称分类特性 R(A1: D1, C1, A2: D2, C2…, An:Dn, Cn, TC)其中 C1,C2,…,Cn分别为属性D1,D2,…,Dn的安全分类特性; TC为元组的分类特性 这样, 关系中的每个元组, 都将扩展为带有安全分级的元组 强制安全性机制使得关系形成为多级关系(不同级别用户所能看到的关系的子集)，也出现多重实例、多级关系完整性等许多新的问题或新的处理技巧，在使用中需注意仔细研究。","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"数据库","slug":"db","permalink":"http://chaooo.github.io/tags/db/"}]},{"title":"【数据库】数据库系统基础","date":"2019-06-22T12:20:19.000Z","path":"article/20190622.html","text":"概述 数据库 是 电子化信息的集合 将信息规范化并使之电子化，形成电子信息’库’，以便利用计算机对这些信息进行快速有效的存储、检索、统计与管理。 表(Table)：以按行按列形式组织及展现的数据 数据库起源于规范化“表(Table)”的处理，Table中描述了一批相互有关联关系的数据–&gt;关系 数据库系统的构成（概念层次）: 数据库(DB):Database：相互之间有关联关系的数据的集合 数据库管理系统(DBMS):Database Management System 数据库应用(DBAP):Database Application 数据库管理员(DBA):Database Asministrator 计算机基本系统 目录： 数据库管理系统(DBMS) 数据库系统的标准结构 三级模式两层映像 数据模型 关系模型 关系模型中的完整性 关系代数 关系演算 1. 数据库管理系统(DBMS)1.1 从用户角度看DBMS(数据库管理系统) 数据库定义：定义数据库中的Table的表名、标题(属性以及属性值的要求)等 DBMS提供了一套数据定义语言(DDL: Data Definition Language)给用户 用户使用DDL描述其所要建立的表的格式 DBMS依照用户的定义，创建数据库及其中的表 数据库操作：向数据库的Table中增加/删除/更新数据及对数据进行查询、检索、统计等 DBMS提供了一套数据库操纵语言(DML: Data Manipulation Language)给用户 用户使用DML描述其所要进行的增、删、改、查等操作 DBMS依照用户的操作描述，实际执行这些操作 数据库控制：控制数据库中数据的使用(哪些用户可以使用，哪些不可以) DBMS提供了一套数据控制语言(DCL: Data Control Language)给用户 用户使用DCL描述其对数据库所要实施的控制 DBMS依照用户描述，实际ijnx控制 数据库维护：转储/恢复/重组/性能监测/分析… DBMS提供了一系列程序(实用程序/例行程序)给用户 在这些程序中提供了对数据库维护的各种功能 用户使用这些程序进行各种数据库维护操作 (数据库维护的实用程序，一般由数据库管理员(DBA)来使用和掌握的) 1.2 数据库语言 使用者使用数据库语言，利用DBMS操纵数据库 SQL语言：结构化的数据库语言 高级语言：一条数据库语言相当于高级语言的一个或多个循环程序，数据库语言可以嵌入到高级语言(宿主语言)中使用 1.3 从系统实现角度看DBMS的功能 数据库管理系统的实现：形式 –&gt; 构造 –&gt; 自动化 DBMS为完成DB管理，在后台运行着一系列程序… 语言编译器：将数据库语言书写的内容，翻译成BDMS可执行的命令。例如：DDL编译器，DML编译器，DCL编译器等 查询优化(执行引擎)与查询实现(基本命令的不同执行算法)：提高数据库检索速度的手段。例如贯穿于数据存取各个阶段的优化程序 数据存取与索引：提供数据在磁盘/磁带等上的搞笑存取手段。例如：存储管理器，缓冲区管理器，索引/文件和记录管理器等 通信控制：提供网络环境下数据库操作与数据传输的手段 事务管理：提供提高可靠性并避免并发操作错误的手段 故障恢复：使用数据库自动恢复到故障发生前正确状态的手段。例如备份、运行日志操控等实用程序 安全性控制：提供合法性检验，避免非授权非法用户访问数据库的手段 完整性控制：提供数据及数据操作正确性检查的手段 数据字典管理：管理用户已经定义的信息 应用程序接口(API)：提供应用程序使用DBMS特定功能的二首段 数据库数据装载、重组等实用程序 数据库性能分析：统计在运行过程中数据库的各种性能数据，便于优化运行 典型的数据库管理系统(DBMS)：Oracle、DB2(IBM)、Sybase、Microsoft SQL Server、Microsoft Access、PostgreSQL 2. 数据库系统的标准结构DBMS管理数据的三个层次： External Level = User Level（外部级别 = 用户级别） 某一用户能够看到与处理的数据, 全局数据中的某一部分 Conceptual Level = Logic level（概念级别 = 逻辑级别） 从全局角度理解/管理的数据, 含相应的关联约束 Internal Level = Physical level（内部级别 = 物理级别） 存储在介质上的数据，含存储路径、存储方式 、索引方式等 3. 三级模式两层映像数据库的三级模式结构是指：数据库系统是由外模式、模式(概念模式)和内模式三级构成 应用–&gt; 外模式(多个) –&gt; 模式(一个) –&gt; 内模式(一个) –&gt; 数据库 3.1 数据(视图)与模式(数据的结构) 模式(Schema):对数据库中数据所进行的一种结构性的描述，所观察到数据的结构信息 视图(View)/数据(Data)：某一种表现形式下表现出来的数据库中的数据 3.2 三级模式(三级视图) External Schema —-(External) View 外模式：某一用户能够看到与处理的数据的结构描述 (Conceptual) Schema —- Conceptual View 模式(概念模式)：从全局角度理解/管理的数据的结构描述, 含相应的关联约束 体现在数据之间的内在本质联系 Internal Schema —- Internal View 内模式：存储在介质上的数据的结构描述，含存储路径、存储方式 、索引方式等 3.3 两层映像 E-C Mapping：External Schema-Conceptual Schema Mapping 将外模式映射为概念模式，从而支持实现数据概念视图向外部视图的转换 便于用户观察和使用 C-I Mapping：Conceptual Schema-Internal Schema Mapping 将概念模式映射为内模式，从而支持实现数据概念视图向内部视图的转换 便于计算机进行存储和处理 3.4 标准结构的两个独立性 逻辑数据独立性 当概念模式变化时，可以不改变外部模式(只需改变E-C Mapping)，从而无需改变应用程序 物理数据独立性 当内部模式变化时，可以不改变概念模式(只需改变C-I Mapping) ，从而不改变外部模式 4. 数据模型 数据模型：模式 与 模式的结构 规定模式统一描述方式的模型，包括：数据结构、操作和约束 数据模型是对模式本身结构的抽象，模式是对数据本身结构形式的抽象 比如：关系模型：所有模式都可为抽象表(Table)的形式[数据结构]，而每一个具体的模式都是拥有不同列名的具体的表。对这种表形式的数据有哪些[操作]和[约束] 三大经典数据模型 关系模型：表的形式组织数据 层次模型：树的形式组织数据 网状模型：图的形式组织数据 5. 关系模型 形象地说，一个关系(relation)就是一个Table，关系模型就是处理Table的，它由三个部分组成： 描述DB各种数据的基本结构形式(Table/Relation) 描述Table与Table之间所可能发生的各种操作(关系运算) 描述这些操作所应遵循的约束条件(完整性约束) 关系模型的三个要素： 基本结构：Relation/Table 基本操作：Relation Operator 基本的:(并, UNION)、(差, DIFFERENCE)、(广义积,PRODUCT)、(选择, SELECTION)、(投影, PROJECTION)。 扩展的:(交, INTERSECTION)、(连接, JOIN)、(除, DIVISION)运算 完整性约束：实体完整性、参照完整性和用户自定义的完整性 表(Table)的基本构成要素 列/字段/属性/数据项：列名，列值 行/元组/记录 标题/模式 5.1 “表”的严格定义 域(Domain)：“列”的取值范围，一组值的集合，这组值具有相同的数据类型 笛卡尔积(Cartesian Product)：“元组”及所有可能组合成的元组 关系(Relation)：一组域D1,D2,…,Dn的笛卡尔积的子集，笛卡尔积中具有某一方面意义的那些元组被称作一个关系(Relation) 5.2 关系模式与关系 同一关系模式下，可有很多的关系 关系模式是关系的结构, 关系是关系模式在某一时刻的数据 关系模式是稳定的；而关系是某一时刻的值，是随时间可能变化的 5.3 关系的特性 列是同质：即每一列中的分量来自同一域，是同一类型的数据 不同的列可来自同一个域，称其中的每一列为一个属性，不同的属性要给予不同的属性名。 列位置互换性：区分哪一列是靠列名 行位置互换性：区分哪一行是靠某一或某几列的值(关键字/键字/码字) 关系是以内容(名字或值)来区分的，而不是属性在关系的位置来区分 理论上，关系的任意两个元组不能完全相同。(集合的要求：集合内不能有相同的两个元素)；现实应用中，表(Table)可能并不完全遵守此特性。元组相同是指两个元组的每个分量(列值)都相同。 属性不可再分特性:又被称为关系第一范式 5.4 关系的一些重要概念 候选码(Candidate Key)/候选键 关系中的一个属性组，其值能唯一标识一个元组，若从该属性组中去掉任何一个属性，它就不具有这一性质了，这样的属性组称作候选码。 主码(Primary Key)/主键 当有多个候选码时，可以选定一个作为主码。DBMS以主码为主要线索管理关系中的各个元组 主属性与非主属性 包含在任何一个候选码中的属性被称作主属性，而其他属性被称作非主属性 最简单的，候选码只包含一个属性； 极端的，所有属性构成这个关系的候选码，称为全码(All-Key) 外码(Foreign Key)/外键 关系R中的一个属性组，它不是R的候选码，但它与另一个关系S的候选码相对应，则称这个属性组为R的外码或外键。 两个关系通常是靠外码连接起来的。 6. 关系模型中的完整性6.1 实体完整性 关系的主码中的属性值不能为空值； 意义：关系中的元组对应到现实世界相互之间可区分的一个个个体，这些个体是通过主码来唯一标识的；若主码为空，则出现不可标识的个体，这是不容许的。 6.2 参照完整性 如果关系R1的外码Fk与关系R2的主码Pk相对应，则R1中的每一个元组的Fk值或者等于R2 中某个元组的Pk 值，或者为空值 意义：如果关系R1的某个元组t1参照了关系R2的某个元组t2，则t2必须存在 6.3 用户自定义完整性 用户针对具体的应用环境定义的完整性约束条件 6.4 DBMS对关系完整性的支持 实体完整性和参照完整性由DBMS系统自动支持 DBMS系统通常提供了如下机制： 它使用户可以自行定义有关的完整性约束条件 当有更新操作发生时，DBMS将自动按照完整性约束条件检验更新操作的正确性，即是否符合用户自定义的完整性 7. 关系代数7.1 关系代数的特点 基于集合，提供了一系列的关系代数操作：并、差、笛卡尔积(广义积)、选择、投影和更名等基本操作 以及交、 连接和关系除等扩展操作，是一种集合思维的操作语言。 关系代数操作以一个或多个关系为输入，结果是一个新的关系。 用对关系的运算来表达查询，需要指明所用操作, 具有一定的过程性。 是一种抽象的语言，是学习其他数据库语言，如SQL等的基础 7.2 关系代数的约束某些关系代数操作，如并、差、交等，需满足”并相容性” 并相容性： 参与运算的两个关系及其相关属性之间有一定的对应性、可比性或意义关联性 定义：关系R与关系S存在相容性，当且仅当： (1) 关系R和关系S的属性数目必须相同； (2) 对于任意i，关系R的第i个属性的域必须和关系S的第i个属性的域相同 示例：关系R：STUDENT(SID char(10), Sname char(8), Age char(3)) 示例：关系S：TEACHER(TID char(10), Tname char(8), Age char(3)) 7.3 关系代数的基本操作 集合操作 并（UNIO）：R∪S 交（INTERSECTION）：R∩S 差（DIFFERENCE）：R-S 笛卡儿积（Cartesian PRODUCT）：R×S 纯关系操作 选择（SELECT）：σF(R) 投影（PROJECT）：ΠA(R) 连接（JOIN）：R⋈S 除（DIVISION）：R÷S 7.3.1 并(Union) 操作 定义：设关系R和关系S是并相容的，则关系R与关系S的并运算结果也是一个关系，记作：R∪S, 它由 或者出现在关系R中，或者出现在S中的元组构成。 数学描述：R∪S={t|t∈R∨t∈S}，其中t是元组 并运算是将两个关系的元组合并成一个关系，在合并时去掉重复的元组。 汉语中的“或者…或者…”通常意义是并运算的要求。 R∪S 与 S∪R 运算的结果是同一个关系 7.3.2 差(Difference) 操作 定义：设关系R 和关系S是并相容的，则关系R与关系S的差运算结果也是一个关系，记作：R-S, 它由出现在关系R中但不出现在关系S中的元组构成。 数学描述：R－S={t|t∈R∧t∉S}，其中t是元组 汉语中的“是…但不含…”通常意义是差运算的要求。 R-S 与 S-R 是不同的 7.3.3 交（Intersection Referential integrity） 操作 定义：设关系R和关系S具有相同的目n，且相应的属性取自同一个域，则关系R与关系S的交由既属于R又属于S的元组组成。其结果关系仍为n目关系。 数学描述：R∩S={t|t∈R∧t∈S}，其中t是元组 7.3.4 广义笛卡尔积(Extended cartesian product) 操作 定义：关系R(&lt;a1,a2, …,an&gt;)与关系S(&lt;b1,b2, …,bm &gt;)的广义笛卡尔积(简称广义积,或 积 或笛卡尔积)运算结果也是一个关系，记作：RxS；两个分别为n目和m目的关系R和S的广义笛卡尔积是一个(n+m)列的元组的集合，元组的前n列是关系R的一个元组，后m列是关系S的一个元组，若R有k1个元组，S有k2个元组，则关系R和关系S的广义笛卡尔积有k1×k2个元组。 数学描述：RxS = {&lt;a1,a2,…,an,b1,b2,…,bm&gt;|&lt;a1,a2,…,an&gt;∈R ∧ &lt;b1,b2,…,bm&gt;∈S} RxS=SxR：RxS为R中的每一个元组都和S中的所有元组进行串接。SxR为S中的每一个元组都和R中的所有元组进行串接。结果是相同的。 两个关系R和S，它们的属性个数分别为n和m(R是n度关系，S是m度关系)则笛卡尔积R×S的属性个数=n+m。即元组的前n个分量是R中元组的分量，后m个分量是S中元组的分量(R×S是n+m度关系). 两个关系R和S，它们的元组个数分别为x和y(关系R的基数x,S的基数y),则笛卡尔积R×S的元组个数=x×y。(R×S的基数是x×y). 7.3.5 选择(Select) 定义：给定一个关系R, 同时给定一个选择的条件condition(简记F), 选择运算结果也是一个关系，记作σF(R), 它从关系R中选择出满足给定条件condition的元组构成。 数学描述：σF(R) = {t|t∈R ∧ F(t)=&#39;真&#39;},其中F表示选择条件，它是一个逻辑表达式，取逻辑值‘真’或‘假’。 选择操作从给定的关系中选出满足条件的行,条件的书写很重要，尤其是当不同运算符在一起时，要注意运算符的优先次序，优先次序自高至低为{ 括弧()；θ；¬；∧；∨ } 7.3.6 投影(Project) 定义：给定一个关系R, 投影运算结果也是一个关系，记作A(R), 它从关系R中选出属性包含在A中的列构成。 数学描述：ΠA(R) = {t[A] | t∈R},其中A为R中的属性列 投影操作从给定关系中选出某些列组成新的关系, 而选择操作是从给定关系中选出某些行组成新的关系 7.4 关系代数的扩展操作7.4.1 交(Intersection) 定义：假设关系R和关系S是并相容的，则关系R与关系S的交运算结果也是一个关系，记作：R∩S, 它由同时出现在关系R和关系S中的元组构成。 数学描述：R∩S = {t|t∈R ∧ t∈S}，其中t是元组 R∩S 和 S∩R 运算的结果是同一个关系 交运算可以通过差运算来实现：R∩S = R-(R-S) = S-(S-R) 汉语中的“既…又…”，“…, 并且…”通常意义是交运算的要求 7.4.2 θ-连接(θ-Join, theta-Join) 投影与选择操作只是对单个关系(表)进行操作, 而实际应用中往往涉及多个表之间的操作, 这就需要θ-连接操作 定义：给定关系R和关系S, R与S的连接运算结果也是一个关系，记作 R⋈S[AθB]：(括号内AθB是⋈的下标)，它由关系R和关系S的笛卡尔积中, 选取R中属性A与S中属性B之间满足 θ 条件的元组构成。 数学描述：R⋈S[AθB] = σ t[A]θs[B] (R×S)，σF(RxS)其中t是R中的元组，s是S中的元组 在实际应用中，θ-连接操作经常与投影Π、选择σ操作一起使用 特别注意：当引入θ-连接操作后，DBMS可直接进行连接操作，而不必先形成笛卡尔积。 7.4.3 等值连接(Equi-Join) 定义：给定关系R和关系S, R与S的等值连接运算结果也是一个关系，记作R⋈S[A=B]：(括号内A=B是⋈的下标)，它由关系R和关系S的笛卡尔积中选取R中属性A与S中属性B上值相等的元组所构成。 数学描述：R⋈S[A=B] = σ t[A]=s[B] (R×S) 当θ-连接中运算符为“＝”时，就是等值连接，等值连接是θ-连接的一个特例； 广义积的元组组合并不是都有意义的，另广义积的元组组合数目也非常庞大，因此采用θ-连接/等值连接运算可大幅度降低中间结果的保存量，提高速度。 7.4.4 自然连接(Natural-Join) 定义：给定关系R和关系S, R与S的自然连接运算结果也是一个关系，记作 ，它由关系R和关系S的笛卡尔积中选取相同属性组B上值相等的元组所构成。 数学描述：R⋈S = σ t[B]=s[B] (R×S) 自然连接是一种特殊的等值连接，要求关系R和关系S必须有相同的属性组B，R, S属性相同，值必须相等才能连接，要在结果中去掉重复的属性列 7.5 关系代数的基本书写思路 选出将用到的关系/表 做”积”运算（可用连接运算替换） 做选择运算保留所需的行/元组 做投影运算保留所需的列/属性 基本思路： 检索是否涉及多个表，如不涉及，则可直接采用并、差、交、选择与投影，只要注意条件书写正确与否即可 如涉及多个表，则检查： 能否使用自然连接，将多个表连接起来(多数情况是这样的) 如不能，能否使用等值或不等值连接(θ-连接) 还不能，则使用广义笛卡尔积，注意相关条件的书写 连接完后，可以继续使用选择、投影等运算，即所谓数据库的“选投联”操作 7.6 关系代数之复杂扩展操作7.6.1 除(Division) 除法运算经常用于求解“查询… 全部的/所有的…”问题 前提条件：给定关系R(A1 ,A2 , … ,An)为n度关系，关系S(B1 ,B2 , … ,Bm)为m度关系 。如果可以进行关系R与关系S的除运算，当且仅当：属性集{ B1 ,B2 , … , Bm }是属性集{ A1 ,A2 , … ,An }的真子集，即m &lt; n。 定义：关系R 和关系S的除运算结果也是一个关系，记作R÷S，分两部分来定义。 数学描述：12R÷S = &#123;t|t∈Π[R-S](R) ∧ ∀u∈S(tu∈R) &#125; = Π[R-S](R) - Π[R-S]((Π[R-S](R)×S)-R) 其中[R-S]为投影Π的下标(属性) 7.6.2 外连接(Outer-Join) 定义：两个关系R与S进行连接时，如果关系R(或S)中的元组在S(或R)中找不到相匹配的元组，则为了避免该元组信息丢失，从而将该元组与S(或R)中假定存在的全为空值的元组形成连接，放置在结果关系中，这种连接称之为外连接(Outer Join)。 外连接 = 自然连接 (或θ连接) + 失配的元组(与全空元组形成的连接) 外连接的形式：左外连接、右外连接、全外连接 左外连接 = 自然连接(或连接) + 左侧表中失配的元组 右外连接 = 自然连接(或连接) + 右侧表中失配的元组 全外连接 = 自然连接(或连接) + 两侧表中失配的元组 左外连接(Left Outer Join)记为：⋊ 右外连接(Right Outer Join)记为：⋉ 全外连接(Full Outer Join)记为：⋊⋉ 8. 关系演算关系演算是描述关系运算的另一种思维方式，它是以数理逻辑中的谓词演算为基础的，SQL语言是继承了关系代数和关系演算各自的优点所形成的 按照谓词变量的不同，可分为关系元组演算和关系域演算 关系元组演算是以元组变量作为谓词变量的基本对象 关系域演算是以域变量作为谓词变量的基本对象 8.1 关系元组演算 关系元组演算公式：{ t | P(t) } 表示：所有使谓词 P 为真的元组 t 的集合 t 是元组变量 t ∈ r 表示元组 t 在关系 r 中 t[A] 表示元组 t 的分量，即 t 在属性 A 上的值 P是与谓词逻辑相似的公式, P(t)表示以元组 t 为变量的公式 关系元组演算公式的基本形式：{ t | P(t) } P(t)可以是如下三种形式之一的原子公式： t∈R：t 是关系 R 中的一个元组，例如： { t | t∈Student} s[A] θ c：元组分量s[A]与常量 c 之间满足比较关系θ，θ:比较运算符&lt;,&lt;=,=,&lt;&gt;,&gt;,&gt;= s[A] θ u[B]：s[A] 与 u[B] 为元组分量，A和B分别是某些关系的属性，他们之间满足比较关系θ， P(t)可以由公式加运算符 ∧(与)、∨(或)、¬(非)递归地构造 如果F是一个公式，则 ¬F 也是公式 如果F1、F2是公式，则 F1∧F2, F1∨F2也是公式 P(t)运算符优先次序(括弧；θ；∃；∀；¬；∧；∨)示例 构造P(t)还有两个运算符：∃(存在)、∀(任意) 如果F是一个公式，则 ∃(t∈r)(F(t)) 也是公式 如果F是一个公式，则 ∀(t∈r)(F(t)) 也是公式 运算符∃和∀，又称为量词，前者称“存在量词”，后者称“全称量词” 而被∃或∀限定的元组变量 t , 或者说，元组变量 t 前有存在量词或全称量词，则该变量被称为“约束变量”，否则被称为“自由变量”。 元组演算的等价性变换 符号&lt;=&gt;表示表示等价于,如：¬(A&gt;B) &lt;=&gt; A&lt;=B &lt;=&gt; A&lt;B∨A=B 8.2 关系域演算 关系域演算公式的基本形式：{&lt;x1,x2, …,xn&gt; | P(x1,x2, …,xn)},其中 xi 代表域变量或常量, P为以xi为变量的公式。 元组演算是以元组为变量，以元组为基本处理单位，先找到元组，然后再找到元组分量，进行谓词判断； 域演算是以域变量为基本处理单位，先有域变量，然后再判断由这些域变量组成的元组是否存在或是否满足谓词判断。 公式的运算符(∧(与)、∨(或)、¬(非)、∀(全称量词)和∃(存在量词))是相同的，只是其中的变量不同。 元组演算和域演算可以等价互换。 8.2.1 基于关系域演算的QBE语言QBE: Query By Example，1975年由M. M. Zloof提出，1978年在IBM370上实现，是一种高度非过程化的查询语言，特别适合于终端用户的使用。 特点：操作独特，基于屏幕表格的查询语言，不用书写复杂的公式，只需将条件填在表格中即可 QBE操作框架由四个部分构成 关系名区：用于书写欲待查询的关系名 属性名区：用于显示对应关系名区关系的所有属性名 操作命令区：用于书写查询操作的命令 查询条件区：用于书写查询条件 QBE的操作命令 Print 或 P. —- 显示输出操作 Delete或D. —- 删除操作 Insert或I. —- 插入操作 Update或U. —- 更新操作 构造查询的几个要素 示例元素: 即域变量， 一定要加下划线 示例元素是这个域中可能的一个值， 它不必是查询结果中的元素 打印操作符P.: 指定查询结果所含属性列 查询条件: 不用加下划线 可使用比较运算符＞， ≥，＜， ≤，＝和≠ 其中＝可以省略 排序要求 升序排序(AO.)，降序排序（DO.）,多列排序，用‚AO(i).‛ 或‚DO(i).‛ 表示 ，其中i为排序的优先级， i值越小，优先级越高 8.3 安全性关系运算的安全性：不产生无限关系和无穷验证的运算被称为是安全的 关系代数是一种集合运算，是安全的 集合本身是有限的，有限元素集合的有限次运算仍旧是有限的。 关系演算不一定是安全的 如：{t|¬(R(t))}, {t R(t)∨t[2]&gt;3}可能表示无限关系 需要对关系演算施加约束条件，即任何公式都在一个集合范围内操作，而不是无限范围内操作，才能保证其安全性。 8.3.1 安全约束有限集合DOM DOM(ψ)是一个有限集合，其中的每个符号要么是ψ中明显出现的符号，要么是出现在ψ中的某个关系R的某元组的分量。 DOM主要用于约束ψ中一些谓词的计算范围，它不必是最小集合。 安全元组演算表达式，满足三个条件： 只要t满足ψ，t的每个分量就是DOM(ψ)的一个成员。 { t|ψ(t) }中t的取值只能是DOM中的值，有限的。 对于ψ中形如(∃u)(ω(u))的子表达式，若u满足ω,则u的每个分量都是DOM(ω)中的成员。 { t|ψ(t) }中的每个(∃u)(ω(u))子表达式，只需要验证DOM中的元素是否有使ω(u)为真的元素。而对于DOM以外的元素，已经明确其都不满足ω(u)，无需验证。 对于ψ中形如(∀u)(ω(u))的子表达式，若u不满足ω,则u的每个分量都是DOM(ω)中的成员。 { t|ψ(t) }中的每个(∀u)(ω(u))子表达式，只需要验证DOM中的元素是否有使ω(u)为假的元素。而对于DOM以外的元素，已经明确其都满足ω(u)，无需验证。 8.4 关于三种关系运算的一些观点 关系运算有三种：关系代数、关系元组演算和关系域演算 三种关系运算都是抽象的数学运算，体现了三种不同的思维 关系代数—以集合为对象的操作思维，由集合到集合的变换 元组演算—以元组为对象的操作思维，取出关系的每一个元组进行验证，有一个元组变量则可能需要一个循环，多个元组变量则需要多个循环 域演算—以域变量为对象的操作思维，取出域的每一个变量进行验证看其是否满足条件 三种运算之间是等价的 关系代数 与 安全的元组演算表达式 与 安全的域演算表达式 是等价的。即一种形式的表达式可以被等价地转换为另一种形式 三种关系运算都可说是非过程性的 相比之下：域演算的非过程性最好，元组演算次之，关系代数最差 三种关系运算虽是抽象的，但却是衡量数据库语言完备性的基础 一个数据库语言如果能够等价地实现这三种关系运算的操作，则说该语言是完备的 目前多数数据库语言都能够实现这三种运算的操作，在此基础上还增加了许多其他的操作，如赋值操作、聚集操作等 数据库语言可以基于这三种抽象运算来设计 用“键盘符号”来替换抽象的数学符号 用易于理解的符号组合来表达抽象的数学符号 例如：ISBL语言—基于关系代数的数据库语言 再例如：Ingres系统的QUEL语言","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"数据库","slug":"db","permalink":"http://chaooo.github.io/tags/db/"}]},{"title":"【杂谈】对开源的理解","date":"2019-04-11T12:13:15.000Z","path":"article/20190411.html","text":"什么是开源所谓的「开源」，原本指的是开放其设计让所有使用者自由修改的一项机制。 在IT领域来说的话，字面意思就是开放源代码，开源软件的源代码任何人都可以审查、修改和增强。 虽然大多被用于软件开发过程中，但这项机制已逐渐演变为泛指在产品、计划与专案方面，透过开放大众的参与、讨论与修改，进而加速其发展、增加透明度及大众福利的方式。 开源是否等于免费开源等于免费是对开源的最大误解。 商业软件（Business Software）、自由软件（Free Software）和开源软件（Open Source Software，此处为狭义的开源）。它们之间的根本区别并不是在是否收费上，而是在于License（许可协议）。 商业软件用的是商业License，以保障软件商的利益为第一位，基本没有考虑用户的利益。 开源软件既然源码都是开放的，所以直接拿来免费使用基本都是没有问题的，但是这并不意味着使用开源软件是完全没限制的。每个开源软件都受License(开源协议)的约束和保护。 目前使用最广泛的一种开源协议便是MIT License，MIT允许别人用作者的代码做任何事情，但必须保证作者的所有权，并且作者无须承担代码使用产生的风险。比如Vue.js、React、Element、Bootstrap都是用的MIT协议。 为什么要选择开源软件开源软件的出现给了用户更多更好的选择，商业软件要想在这样的竞争环境下生存下去，唯一的办法就是把你的东西做得比开源软件更好！ 对于程序员来说，我们不但可以以开源软件为基础，根据自己的需要进行开发；也可以通过分享、观摩他人的源代码，进一步相互切磋与学习。 开源这件事情，不论对用户还是开发者来说，都只是一种选择。商业是商业，开源是开源，没有谁比谁了不起。 最后最后还要说一点：不要把开源软件与盗版混为一谈。 如前面所说，开源也是有License的，违反License的行为就是对开源的盗版。在反盗版问题上，所有类型软件的立场应该是一致的。 开源的观念并不只限于软件的开发与使用，而是希望能够抱着开放的心态，分享与合作的精神，相互切磋与学习，当你的代码被分享时它会变得更好。 参考连接： https://blog.csdn.net/happmaoo/article/details/83201544 https://www.oschina.net/news/58921/what-is-open-source","tags":[{"name":"杂谈","slug":"other","permalink":"http://chaooo.github.io/tags/other/"},{"name":"开源","slug":"open-source","permalink":"http://chaooo.github.io/tags/open-source/"}]},{"title":"【环境配置】Win10下配置Nginx+PHP-7+MySQL-5.6","date":"2018-10-22T03:39:12.000Z","path":"article/20181022.html","text":"1. 软件下载 Windows操作系统。 Nginx，下载地址：http://nginx.org/en/download.html。 PHP，下载地址：http://php.net/downloads.php（nginx下php是以FastCGI的方式运行，所以我们下载非线程安全也就是nts的php包）。 MySQL，下载地址：https://www.mysql.com/downloads/。（选择社区版Community-&gt;MySQL Community Server-&gt;MySQL Community Server 5.6，根据Windows系统选择对应zip包）。 2. 软件安装在C盘新建安装目录C:\\PHP。2.1 Nginx安装Nginx本身就是绿色软件，下载zip安装包解压到C:\\PHP，打开目录C:\\PHP\\nginx-1.15.8双击nginx.exe就可以运行，然后在浏览器打开http://127.0.0.1，出现欢迎界面表示NGINX正常工作。确认NGINX正常工作后在任务管理器中结束nginx.exe任务。2.2 PHP安装把PHP的zip安装包解压到C:\\PHP，解压后PHP安装目录为：C:\\PHP\\php-7.3.2。cmd进行到安装目录，输入php.exe -v,正常会显示版本信息。将C:\\PHP\\php-7.3.2加入系统环境变量。2.3 准备网站根目录准备一个文件夹，作为网站的根目录，这个在下面的配置文件中会多次用到，我把C:\\PHP\\web作为我的网站根目录。在根目录C:\\PHP\\web下新建一个info.php文件，输入如下内容：123&lt;?php phpinfo();?&gt; 2.4 让nginx识别PHP 配置PHP (C:\\PHP\\php-7.3.2) 在PHP根目录下找到php.ini-development文件，编辑器打开nginx.conf: 在PHP根目录下修改配置文件C:\\PHP\\php-7.3.2\\php.ini-development并另存为php.ini,在其中修改或添加配置： 1cgi.fix_pathinfo=1 配置nginx conf(C:\\PHP\\nginx-1.15.8\\conf) 在Nginx根目录下找到conf目录，编辑器打开C:\\PHP\\nginx-1.15.8\\confnginx.conf: 123456789101112131415161718192021222324252627282930error_log logs/error.log; #打开error_loghttp &#123; # ... server &#123; # ... location / &#123; root C:\\PHP\\web; #配置根目录 index index.html index.htm index.php; &#125; # ... # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # 打开下面几行注释 location ~ \\.php$ &#123; root C:\\PHP\\web; #配置根目录 fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; #重要: 把下面 /scripts 修改成 $document_root fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; # ... &#125;&#125; 2.5 运行与测试nginx是一个反向代理的web服务器，因此它其实必须依赖一个真正的web服务器才能执行动态的网页内容，因此这里php就是使用fastcgi来充当这个真正的web服务器，它运行在9000端口上，这也是为什么nginx.conf中有这样一句fastcgi_pass 127.0.0.1:9000;。 在任务管理器中结束nginx.exe任务，然后到C:\\PHP\\nginx-1.15.8目录双击nginx.exe开启服务。 在命令行中，cd到php的home目录C:\\PHP\\php-7.3.2，然后执行如下命令： 1php-cgi.exe -b 127.0.0.1:9000 -c php.ini 打开浏览器，输入 http://127.0.0.1/info.php，这时候可以看到phpinfo页面：页面内容包含了PHP 当前状态的大量信息，包含了 PHP 编译选项、启用的扩展、PHP 版本、服务器信息和环境变量（如果编译为一个模块的话）、PHP环境变量、操作系统版本信息、path 变量、配置选项的本地值和主值、HTTP 头和PHP授权信息(License)。 2.6 MySQL安装 把MySQL的zip安装包解压到C:\\PHP，解压后PHP安装目录为：C:\\PHP\\mysql-5.6.43-winx64。 将C:\\PHP\\mysql-5.6.43-winx64\\bin加入系统环境变量。 修改配置文件C:\\PHP\\mysql-5.6.43-winx64\\my-default.ini并另存为my.ini,在其中修改或添加配置 （my.ini文件的编码必须是英文编码（如windows中的ANSI），不能是UTF-8或GBK等）： 12basedir=C:\\PHP\\mysql-5.6.43-winx64 #mysql所在目录datadir=C:\\PHP\\mysql-5.6.43-winx64\\data #mysql所在目录\\data 以管理员身份运行cmd,到安装目录的bin下，输入mysqld -install： 12C:\\PHP\\mysql-5.6.43-winx64\\bin&gt; mysqld -installService successfully installed. 输入命令:mysql --version,正常会显示版本信息。 输入命令:net start mysql启动服务(停止命令：net stop mysql): 123C:\\PHP\\mysql-5.6.43-winx64\\bin&gt;net start mysqlMySQL 服务正在启动 ..MySQL 服务已经启动成功。 服务启动成功之后，输入命令：mysql -u root -p（第一次登录没有密码，直接按回车过）: 1234567891011C:\\PHP\\mysql-5.6.43-winx64\\bin&gt;mysql -u root -pEnter password:Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 1Server version: 5.6.43 MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.mysql&gt; 如出现mysql&gt;,即登录成功。 输入命令exit,退出登录。 123mysql&gt; exitByeC:\\PHP\\mysql-5.6.43-winx64\\bin&gt; 3. 制作自动启动脚本控制台就一直开着，很不方便。这个时候可以使用 RunHiddenConsole.zip 来得管理服务的启动与关闭。 3.1 启动脚本在目录C:\\PHP下新建一个start.bat作为启动脚本文件： 12345678910111213141516171819202122:启动脚本@echo offset php_home=./php-7.3.2set nginx_home=./nginx-1.15.8REM Windows 下无效REM set PHP_FCGI_CHILDREN=5REM 每个进程处理的最大请求数，或设置为 Windows 环境变量set PHP_FCGI_MAX_REQUESTS=1000echo Starting PHP FastCGI...RunHiddenConsole %php_home%/php-cgi.exe -b 127.0.0.1:9000 -c %php_home%/php.iniecho FastCGI 启动成功echo.echo Starting nginx...RunHiddenConsole %nginx_home%/nginx.exe -p %nginx_home%echo nginx 启动成功echo.:echo 15秒后自动退出:ping 0.0.0.0 -n 15 &gt; null:请按任意键继续. . .pause 3.2 停止脚本在目录C:\\PHP下新建一个stop.bat作为停止脚本文件： 123456789101112:停止脚本@echo offecho Stopping nginx... taskkill /F /IM nginx.exe &gt; nulecho nginx 已停止:换行echo.echo Stopping PHP FastCGI...taskkill /F /IM php-cgi.exe &gt; nulecho FastCGI 已停止:请按任意键继续. . .pause 3.3 重启脚本在目录C:\\PHP下新建一个restart.bat作为重启脚本文件： 12345678910111213141516171819202122232425262728293031323334:停止脚本@echo offecho Stopping nginx... taskkill /F /IM nginx.exe &gt; nulecho nginx 已停止:换行echo.echo Stopping PHP FastCGI...taskkill /F /IM php-cgi.exe &gt; nulecho FastCGI 已停止echo.:启动脚本@echo offset php_home=./php-7.3.2set nginx_home=./nginx-1.15.8REM Windows 下无效REM set PHP_FCGI_CHILDREN=5REM 每个进程处理的最大请求数，或设置为 Windows 环境变量set PHP_FCGI_MAX_REQUESTS=1000echo Starting PHP FastCGI...RunHiddenConsole %php_home%/php-cgi.exe -b 127.0.0.1:9000 -c %php_home%/php.iniecho FastCGI 启动成功echo.echo Starting nginx...RunHiddenConsole %nginx_home%/nginx.exe -p %nginx_home%echo nginx 启动成功echo.:echo 15秒后自动退出:ping 0.0.0.0 -n 15 &gt; null:请按任意键继续. . .pause 4.最后我的根目录结构 123456789101112131415161718C:\\PHP&gt;dir 驱动器 C 中的卷是 系统 卷的序列号是 09C1-B27D C:\\PHP 的目录2019/02/22 15:46 &lt;DIR&gt; .2019/02/22 15:46 &lt;DIR&gt; ..2019/02/22 11:23 &lt;DIR&gt; mysql-5.6.43-winx642018/12/25 17:54 &lt;DIR&gt; nginx-1.15.82019/02/21 15:59 &lt;DIR&gt; php-7.3.22019/02/22 15:41 758 restart.bat2010/10/26 11:43 1,536 RunHiddenConsole.exe2019/02/22 15:41 549 start.bat2019/02/22 15:41 227 stop.bat2019/02/21 16:56 &lt;DIR&gt; web 4 个文件 3,070 字节 6 个目录 100,959,772,672 可用字节","tags":[{"name":"环境配置","slug":"env","permalink":"http://chaooo.github.io/tags/env/"}]},{"title":"【SpringBoot】MVC应用","date":"2018-06-20T09:31:30.000Z","path":"article/20180620.html","text":"对Spring Web MVC封装，简化MVC结构web应用开发。 1. SpringBoot MVC开发Restful服务（前后分离）*按rest规则发送HTTP请求–&gt;Spring MVC–&gt;返回JSON结果 主要步骤： 导入spring-boot-starter-web（springmvc、rest、jackson、tomcat） 在application.properties修改tomcat端口 定义启动类RunBoot，追加@SpringBootApplication 定义Controller、Service、Dao组件 2. SpringBoot MVC开发JSP应用（PC浏览器）HTTP请求–&gt;Spring MVC–&gt;JSP–&gt;HTML响应输出结果 主要步骤： 导入spring-boot-starter-web、jasper解析器、jstl 在application.properties修改tomcat端口、viewResolver 定义启动类RunBoot，追加@SpringBootApplication 定义Controller组件，返回ModelAndView 在src/main/webapp下定义JSP组件 3. SpringBoot MVC开发Thymeleaf应用（PC浏览器）*HTTP请求–&gt;Spring MVC–&gt;Thymeleaf模板–&gt;HTML响应输出结果 主要步骤： 导入spring-boot-starter-web、spring-boot-starter-thymeleaf 在application.properties修改tomcat端口 定义启动类RunBoot，追加@SpringBootApplication 定义Controller组件，返回ModelAndView 在src/main/resources/templates下定义模板文件1234&lt;html xmlns:th=\"https://www.thymeleaf.org/\"&gt; &lt;h1&gt;Hello&lt;/h1&gt; &lt;h2 th:text=\"$&#123;data&#125;\"&gt;&lt;/h2&gt;&lt;/html&gt; th:text表达式作用：将模型中的数据以只读文本显示到元素中 th:text表达式作用：将模型中的数据以只读文本显示到元素中。 th:if 表达式作用：if判断逻辑 th:each 表达式作用：循环逻辑 th:href 表达式作用：动态生成href链接 Thymeleaf模板和JSP区别 运行机制不同 JSP–&gt;Servlet–&gt;HTML 模板+数据–&gt;HTML输出 模板简单易用;JSP相对复杂些 JSP:9大内置对象、EL、JSTL、嵌入Java代码、框架标签 模板：模板表达式 模板效率高,比JSP性能好 模板：缓存 4. SpringBoot MVC静态资源处理静态资源包含图片、js、css等，动态资源servlet、jsp等。 SpringBoot中src/main/resources目录下有几个约定的静态资源存放位置 META-INF/resources（优先级最高） resources static public（优先级最低） 自定义静态资源访问路径，编写一个配置文件 123456789101112//@Configuration@Componentpublic class MyStaticConfiguration implements WebMvcConfigurer&#123; public void addResourceHandlers(ResourceHandlerRegistry registry) &#123; registry.addResourceHandler(\"/**\") .addResourceLocations( \"classpath:/images/\", \"classpath:/resources/\", \"classpath:/static/\", \"classpath:/public/\"); &#125;&#125; 5. SpringBoot MVC异常处理 异常处理机制 SpringBoot底层提供了异常处理机制。SpringBoot提供了一个ErrorMvcAutoConfiguration自动配置组件，创建了一个BasicErrorController对象，提供两个/error请求处理，一个返回html，另一个返回json。当MVC底层遇到异常会用转发方式发出/error请求。 可以自定义ErrorController替代底层BasicErrorController，将错误提示转发到自定义提示界面(全局) 123456789101112131415161718192021@Controller//@RequestMapping(\"/error\")public class MyErrorController implements ErrorController&#123; @RequestMapping(value=\"/error\",produces= MediaType.TEXT_HTML_VALUE) public ModelAndView errorHtml() &#123; ModelAndView mav = new ModelAndView(); mav.setViewName(\"myerror\"); return mav; &#125; @RequestMapping(value=\"/error\") @ResponseBody public Object error(HttpServletRequest request) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put(\"msg\", \"程序发生了异常\"); return map; &#125; @Override public String getErrorPath() &#123; return \"/error\"; &#125;&#125; @ExceptionHandler异常处理（局部） ErrorController管理全局异常，@ExceptionHandler管理所在Controller组件的异常。12345678@ExceptionHandler@ResponseBodypublic Object error(Exception ex) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put(\"msg\", \"发生异常\"); map.put(\"type\", ex.getClass()); return map;&#125; 可以将上述方法封装成一个BasicController，通过@ControllerAdvice作用到所有Controller组件上。 1234567891011@ControllerAdvice//等价于所有Controller都继承它public class BasicController &#123; @ExceptionHandler @ResponseBody public Object error(Exception ex) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put(\"msg\", \"发生异常\"); map.put(\"type\", ex.getClass()); return map; &#125;&#125; 6. SpringBoot AOP 引入spring-boot-starter-aop 定义一个切面组件 123456789101112131415161718192021@Component//将Bean组件纳入Spring容器@Aspect//将Bean组件定义为Aspect切面public class MyAspectBean &#123; @Before(\"within(cn.xdl.controller.*)\")//前置通知 public void before() &#123; System.out.println(\"----开始处理----\"); &#125; @After(\"within(cn.xdl.controller.*)\")//最终通知 public void after() &#123; System.out.println(\"----处理完毕----\"); &#125; @Around(\"within(cn.xdl.controller.*)\") public Object around(ProceedingJoinPoint pjp) throws Throwable &#123; StopWatch watch = new StopWatch(); watch.start(); Object obj = pjp.proceed();//调用目标组件方法 watch.stop(); System.out.println(\"处理时间:\"+watch.getTotalTimeMillis()+\" 毫秒\"); return obj; &#125;&#125; 配置切面组件 @Aspect、@Before、@After、@Around、@AfterReturning、@AfterThrowing等 7. SpringBoot MVC拦截器 编写一个拦截器组件,实现HandlerInterceptor接口 1234567891011121314@Componentpublic class MyInterceptor implements HandlerInterceptor &#123; public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; System.out.println(\"执行了MyInterceptor拦截器\"); String user = (String)request.getSession().getAttribute(\"user\"); if(user == null) &#123; response.sendRedirect(\"/tologin\"); return false;//阻止后续流程执行 &#125; return true;//继续执行后续处理 &#125;&#125; 配置拦截器组件 12345678@Configurationpublic class MyInterceptorConfiguration implements WebMvcConfigurer&#123; @Autowired private MyInterceptor my; public void addInterceptors(InterceptorRegistry registry) &#123; registry.addInterceptor(my).addPathPatterns(\"/direction/list\"); &#125;&#125; 8. SpringBoot整合Servlet/Filter8.1 整合Servlet首先导入spring-boot-starter-web 8.1.1 整合Servlet方式一： 编写一个Servlet组件，继承HttpServlet 在Servlet类定义前使用@WebServlet 123456789@WebServlet(name=\"helloservlet\",urlPatterns= &#123;\"/hello.do\"&#125;,loadOnStartup=1)public class HelloServlet extends HttpServlet&#123; public void service( HttpServletRequest request, HttpServletResponse response ) throws IOException &#123; response.getWriter().println(\"Hello SpringBoot Servlet\"); &#125;&#125; 启动类前需要使用@ServletComponentScan扫描@WebServlet配置 1234567@SpringBootApplication@ServletComponentScan //扫描@WebServlet、@WebFilter、@WebListener组件public class RunBoot &#123; public static void main(String[] args) &#123; SpringApplication.run(RunBoot.class, args); &#125;&#125; 8.1.2 整合Servlet方式二： 编写一个Servlet组件，继承HttpServlet 12345678public class SomeServlet extends HttpServlet &#123; public void service( HttpServletRequest request, HttpServletResponse response ) throws IOException &#123; response.getWriter().println(\"Hello Spring Some Servlet\"); &#125;&#125; 使用ServletRegistrationBean+@Bean 1234567891011121314151617@SpringBootApplicationpublic class RunBoot &#123; public static void main(String[] args) &#123; SpringApplication.run(RunBoot.class, args); &#125; @Bean public ServletRegistrationBean&lt;Servlet&gt; someservlet()&#123; ServletRegistrationBean&lt;Servlet&gt; bean = new ServletRegistrationBean&lt;Servlet&gt;(); bean.setServlet(new SomeServlet()); bean.setLoadOnStartup(1); List&lt;String&gt; urls = new ArrayList&lt;&gt;(); urls.add(\"/some.do\"); bean.setUrlMappings(urls); return bean; &#125;&#125; 8.2 整合Filter在SpringBoot整合Servlet的基础上整合Filter 8.2.1 整合Filter方式一： 编写一个Filter组件，继承Filter 在Filter类定义前使用@WebFilter 1234567891011@WebFilter(urlPatterns=\"/hello.do\")public class HelloFilter implements Filter&#123; @Override public void doFilter( ServletRequest request, ServletResponse response, FilterChain chain ) throws IOException, ServletException &#123; System.out.println(\"-----hello filter------servlet执行之前\"); chain.doFilter(request, response); System.out.println(\"-----hello filter------servlet执行之后\"); &#125;&#125; 启动类前需要使用@ServletComponentScan扫描@WebServlet配置 1234567@SpringBootApplication@ServletComponentScan //扫描@WebServlet、@WebFilter、@WebListener组件public class RunBoot &#123; public static void main(String[] args) &#123; SpringApplication.run(RunBoot.class, args); &#125;&#125; 8.2.2 整合Filter方式二： 编写一个Filter组件，继承Filter 12345678910public class SomeFilter implements Filter&#123; @Override public void doFilter( ServletRequest request, ServletResponse response, FilterChain chain ) throws IOException, ServletException &#123; System.out.println(\"-----som filter------servlet执行之前\"); chain.doFilter(request, response); System.out.println(\"-----som filter------servlet执行之后\"); &#125;&#125; 使用FilterRegistrationBean+@Bean 注册过滤器并设置拦截的请求地址 123456789101112131415@SpringBootApplicationpublic class RunBoot &#123; public static void main(String[] args) &#123; SpringApplication.run(RunBoot.class, args); &#125; ... @Bean public FilterRegistrationBean&lt;Filter&gt; somefilter()&#123; FilterRegistrationBean&lt;Filter&gt; bean = new FilterRegistrationBean&lt;Filter&gt;(); bean.setFilter(new SomeFilter()); // 配置要拦截的请求 bean.addUrlPatterns(\"/some.do\"); return bean; &#125;&#125; 9. SpringBoot 任务调度9.1 服务器启动后自动调用tomcat服务器启动后自动调用任务，可以使用ApplicationRunner或CommandLineRunner接口。 123456789101112131415161718@Component@Order(2)public class SomeTask1 implements ApplicationRunner &#123; @Override public void run(ApplicationArguments args) throws Exception &#123; System.out.println(\"----服务器启动后自动执行SomeTask1任务---\" + new Date()); &#125;&#125;@Component@Order(1)public class SomeTask2 implements CommandLineRunner&#123; @Override public void run(String... args) throws Exception &#123; System.out.println(\"----服务器启动后自动执行SomeTask2任务-----\"+new Date()); Thread.sleep(5000); &#125;&#125; 多个Task任务，可以通过@Order指定先后顺序，多个任务是线程同步调用。 9.2 程序运行后定时调用任务Spring提供了一个Spring Schedule模块，封装了任务调用，之前都是采用Quartz组件调用。 123456789101112131415@Component@EnableScheduling//开启Schedule模块public class SomeTask3 &#123; //在服务器启动1秒后调用任务，每隔3秒调用一次 @Scheduled(initialDelay=1000,fixedRate=3000) public void execute() &#123; System.out.println(\"-----周期性调用SomeTask3-----\"+new Date()); &#125; //在服务器启动0秒后调用任务，每隔5秒调用一次 @Scheduled(cron=\"0/5 * * * * ?\")//秒 分 时 日 月 星期 public void execute2() &#123; System.out.println(\"-----周期性调用SomeTask4-----\"+new Date()); &#125;&#125; 使用Spring Schedule还需要指定cron表达式，表达式具体规则： 123456789101112秒 分 时 日 月 星期 年（可省略）0 0 10 1 10 ？秒： 0-59分： 0-59时： 0-23日： 1-31月： 1-12星期：1-7，1表示星期日，7表示星期六* ： 表示每一分、每一秒、每一天，任何一个可能值? ： 只用在日和星期部分，如果指定日，星期用？;如果指定星期，日用?，避免日和星期冲突 / ： 表示增量，0/1表示0\\1\\2\\3\\4递增加1；0/5表示0\\5\\10\\15；1/5表示1\\6\\11\\16\\21L ： 只用在日和星期部分，表示最后一天、周六 cron表达式案例： 123456789101112131415161718&quot;30 * * * * ?&quot; 每半分钟触发任务&quot;30 10 * * * ?&quot; 每小时的10分30秒触发任务&quot;30 10 1 * * ?&quot; 每天1点10分30秒触发任务&quot;30 10 1 20 * ?&quot; 每月20号1点10分30秒触发任务&quot;30 10 1 20 10 ? *&quot; 每年10月20号1点10分30秒触发任务&quot;30 10 1 20 10 ? 2011&quot; 2011年10月20号1点10分30秒触发任务&quot;30 10 1 ? 10 * 2011&quot; 2011年10月每天1点10分30秒触发任务&quot;30 10 1 ? 10 SUN 2011&quot; 2011年10月每周日1点10分30秒触发任务&quot;15,30,45 * * * * ?&quot; 每15秒，30秒，45秒时触发任务&quot;15-45 * * * * ?&quot; 15到45秒内，每秒都触发任务&quot;15/5 * * * * ?&quot; 每分钟的每15秒开始触发，每隔5秒触发一次&quot;15-30/5 * * * * ?&quot; 每分钟的15秒到30秒之间开始触发，每隔5秒触发一次&quot;0 0/3 * * * ?&quot; 每小时的第0分0秒开始，每三分钟触发一次&quot;0 15 10 ? * MON-FRI&quot; 星期一到星期五的10点15分0秒触发任务&quot;0 15 10 L * ?&quot; 每个月最后一天的10点15分0秒触发任务&quot;0 15 10 LW * ?&quot; 每个月最后一个工作日的10点15分0秒触发任务&quot;0 15 10 ? * 5L&quot; 每个月最后一个星期四的10点15分0秒触发任务&quot;0 15 10 ? * 5#3&quot; 每个月第三周的星期四的10点15分0秒触发任务 9.3 SpringBoot+Quartz导入spring-boot-starter-quartz, 编写Job任务组件，继承QuartzJobBean 123456public class MyTask5 extends QuartzJobBean&#123; @Override protected void executeInternal(JobExecutionContext context) throws JobExecutionException &#123; System.out.println(\"通过Quartz工具调用定时任务\"+new Date()); &#125;&#125; 配置Job组件（JobDetail、Tigger） 123456789101112131415161718@Configurationpublic class QuartzConfiguration &#123; @Bean//将MyTask5任务组件封装成JobDetail public JobDetail task5() &#123; return JobBuilder.newJob(MyTask5.class) .withIdentity(\"task5\").storeDurably().build(); &#125; @Bean//为JobDetail指定触发时间cron表达式 public Trigger task5Trigger() &#123; CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(\"0/5 46 10 * * ?\"); return TriggerBuilder.newTrigger() .forJob(task5()) .withIdentity(\"task5\") .withSchedule(cronScheduleBuilder) .build(); &#125;&#125;","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"Spring","slug":"Spring","permalink":"http://chaooo.github.io/tags/Spring/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://chaooo.github.io/tags/SpringBoot/"}]},{"title":"【SpringBoot】数据库访问","date":"2018-06-14T09:29:31.000Z","path":"article/20180614.html","text":"Springboot对于数据访问层，无论是SQL还是NOSQL，都默认采用整合Spring Data的方式进行统一处理，Springboot添加大量自动配置，屏蔽了很多设置。并引入各种Template，Repository来简化我们对数据访问层的操作。 1.SpringBoot数据库访问1.1 Spring DAO JdbcTemplate引入spring-boot-starter-jdbc后（hikari、spring-jdbc包），就可以借助DataSourceAutoConfiguration、JdbcTemplateAutoConfiguration自动配置组件创建出HikariDataSource、JdbcTemplate对象。 引入jdbc启动器、驱动包，创建连接池 根据要操作表定义entity（pojo，属性名与字段名一致） 12345678910111213141516public class Direction &#123; private int id; private String name; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125;&#125; 定义Dao接口 123public interface DirectionDao &#123; public List&lt;Direction&gt; findAll();&#125; 定义Dao实现类，扫描并注入JdbcTemplate使用 123456789101112@Repository//通过组件扫描加载到Spring容器public class JdbcDirectionDao implements DirectionDao &#123; @Autowired private JdbcTemplate template;//通过自动配置加载到Spring容器 @Override public List&lt;Direction&gt; findAll() &#123; String sql = \"select * from direction\"; RowMapper&lt;Direction&gt; rowMapper = new BeanPropertyRowMapper&lt;Direction&gt;(Direction.class); return template.query(sql, rowMapper); &#125;&#125; 1.2 Spring MyBatis（XML SQL版本） 引入spring-boot-starter-jdbc、驱动包、mybatis-spring-boot-starter 引入application.properties（连接池参数） 实体类(同上) SQL定义 123456789101112&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"cn.xdl.dao.DirectionMapper\"&gt; &lt;select id=\"selectAll\" resultType=\"cn.xdl.entity.Direction\"&gt; select * from direction &lt;/select&gt; &lt;select id=\"selectById\" parameterType=\"int\" resultType=\"cn.xdl.entity.Direction\"&gt; select * from direction where id=#&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; Mapper接口 1234public interface DirectionMapper &#123; public List&lt;Direction&gt; selectAll(); public Direction selectById(int id);&#125; 使用@MapperScan和mybatis.mapperLocations=classpath:sql/*.xml 在启动类前追加@MapperScan 12345@SpringBootApplication@MapperScan(basePackages=\"cn.xdl.dao\")//扫描Mapper接口创建对象加载到Spring容器public class RunBoot &#123; ... ...&#125; 在application.properties追加mybatis.mapperLocations 1mybatis.mapperLocations=classpath:sql/*.xml 1.3 Spring MyBatis（注解 SQL版本） 引入spring-boot-starter-jdbc、驱动包、mybatis-spring-boot-starter 引入application.properties（连接池参数） 实体类(同上) 定义Mapper接口，使用@Select、@Update、@Insert、@Delete注解定义SQL 12345678public interface DirectionMapper &#123; @Select(\"select * from direction\") public List&lt;Direction&gt; findAll(); @Select(\"select * from direction where id=#&#123;id&#125;\") public Direction findById(int id); @Update(\"update direction set name=#&#123;name&#125; where id=#&#123;id&#125;\") public int updateName(@Param(\"id\")int id,@Param(\"name\")String name);&#125; 使用@MapperScan（同上） 2. Spring Data JPA2.1 JpaJpa (Java Persistence API) 是 Sun 官方提出的 Java 持久化规范。中文名Java持久层API，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。 Sun引入新的JPA ORM规范主要是为了简化现有的持久化开发工作和整合 ORM 技术，结束现在 Hibernate，TopLink，JDO 等 ORM 框架各自为营的局面。 注意:Jpa 是一套规范，不是一套产品，那么像 Hibernate,TopLink,JDO 他们是一套产品，如果说这些产品实现了这个 Jpa 规范，那么我们就可以叫他们为 Jpa 的实现产品。 2.2 Spring Boot JpaSpring Boot Jpa 是 Spring 基于 ORM 框架、Jpa 规范的基础上封装的一套 Jpa 应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。 Spring Boot Jpa 让我们解脱了 DAO 层的操作，基本上所有 CRUD 都可以依赖于它来实现 在Spring中使用JPA访问数据库，需要使用Spring Data模块支持。 - SpringData是对Spring框架一个扩展模块，包含对JPA、Redis、MongoDB等技术的访问支持。 Spring Boot Jpa的使用 引入spring-boot-starter-jdbc、spring-boot-starter-data-jpa、驱动包 在application.properties定义db连接池参数（同上） 定义RunBoot启动类，使用@SpringBootApplication标记（同上） 根据要操作的表定义实体类，使用@Entity、@Table、@Id、@Column定义该对象和表结构之间的映射关系 123456789101112131415161718192021222324@Entity@Table(name=\"direction\")public class Direction &#123; @Id @Column(name=\"id\") private int id; @Column(name=\"name\") private String name; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125;&#125; 定义Dao接口，可以选择继承JpaRepository、PagingAndSortingRepository、CrudRepository等 1234public interface DirectionDao extends JpaRepository&lt;Direction, Integer&gt;&#123; //...&#125; 2.3 Dao扩展操作分页查询 1234567Pageable pageable = PageRequest.of(1, 3);//of(页数从0开始,记录条数)Page&lt;Direction&gt; page = dao.findAll(pageable);List&lt;Direction&gt; list = page.getContent();list.forEach(d-&gt;&#123;System.out.println(d.getId()+\" \"+d.getName());&#125;);System.out.println(\"总记录数:\"+page.getTotalElements()+\" 页数:\"+(page.getNumber()+1)+\"/\"+page.getTotalPages());List&lt;Direction&gt; list1 = dao.findByIdGreaterThan2(5); 按方法名规则扩展 12//where id&gt;?public List&lt;Direction&gt; findByIdGreaterThan(int id); 定义SQL语句扩展 12@Query(nativeQuery=true,value=\"select * from direction where id&gt;:id\")public List&lt;Direction&gt; findByIdGreaterThan1(@Param(\"id\")int id); 定义JPQL面向查询语句扩展 12@Query(\"from Direction where id&gt;:id\") //使用类型名和属性名替代表名和字段名public List&lt;Direction&gt; findByIdGreaterThan2(@Param(\"id\")int id); 按名称模糊查询，带分页支持 123@Query(nativeQuery=true,value=\"select * from direction where name like :name\" ,countQuery=\"select count(*) from direction where name like :name\")public Page&lt;Direction&gt; findByNameLike1(@Param(\"name\")String name,Pageable pageable);","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"Spring","slug":"Spring","permalink":"http://chaooo.github.io/tags/Spring/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://chaooo.github.io/tags/SpringBoot/"}]},{"title":"【SpringBoot】Boot 入门","date":"2018-06-06T15:06:01.000Z","path":"article/20180606.html","text":"1. 项目管理工具Maven的基本使用Maven是一个使用java编写的开源的项目管理工具，可以方便灵活的控制项目，不必浪费时间去在不同的环境中配置依赖的jar包，而专心于业务逻辑。 1.1 配置Maven的系统环境变量 下载并解压到目录，如D:\\apache-maven-3.6.1 添加新的系统环境变量MAVEN_HOME=安装的目录：MAVEN_HOME=D:\\apache-maven-3.6.1 添加%MAVEN_HOME%\\bin到系统PATH变量. 测试Maven配置是否成功，打开命令行窗口，输入mvn -v，如果有maven 版本信息输出则证明配置成功，否则请查看自己配置路径等是否正确。 注意：安装Maven前请确保已安装JDK并成功配置其环境变量。 1.2 maven中的术语 maven插件：maven主要定义了项目对象模型的生命周期。实际上每个任务都是交由插件完成的。maven的生命周期与插件目标相互绑定，来完成每个具体的任务。 maven坐标：就是对项目的定位。groupId：组id，机构名。artifactId：构建id ，产品名或者产品的id。version ：版本号。 坐标形式：groupId + artifactId+ version maven仓库：存放maven共享构建的位置。 本地仓库：localRepository（使用conf/settings.xml设置） 私服仓库：部署在局域网中的仓库，方便整个团队的开发使用。 中央仓库：远程仓库下载地址：http://repo1.maven.org/maven2 1234&lt;!-- conf/settings.xml设置本地仓库路径 --&gt;&lt;settings ... &lt;localRepository&gt;D:/apache-maven-3.6.1/.m2/repository&lt;/localRepository&gt;... 1.3 maven构建的生命周期清除–&gt; 编译–&gt; 测试–&gt; 报告–&gt; 打包(jar\\war)–&gt; 安装–&gt; 部署 清除：mvn clean 编译：mvn compile 测试：mvn test 打包：mvn package 安装：mvn install 部署：mvn deploy 1.4 MAVEN优点 模块化项目 项目非常大时，可借助Maven将一个项目拆分成多个工程，最好是一个模块对应一个工程，利于分工协作。而且模块可以通信。 实现Jar包共享 借助Maven，可将jar包仅仅保存在“仓库”中，有需要该文件时，就引用该文件接口，不需要复制文件过来占用空间。 jar包的依赖 借助Maven可以以规范的方式下载jar包，因为所有的知名框架或第三方工具的jar包已经按照统一的规范存放到了Maven的中央仓库中。 jar包的自动导入 通过xml定义引入jar包，Maven会自动导入jar包及其依赖jar包进来。 1.5 MAVEN工具 可以命令行使用，也可以结合Eclipse和Idea使用 简化项目搭建、编译、打包、发布等工作 2. SpringBoot基础 SpringBoot是对Spring框架的封装，用于简化Spring应用搭建和开发过程。 SpringBoot是pivotal公司产品、SpringCloud也是。 2.1 SpringBoot典型特点： 去除XML配置，完全采用Java配置方式 内置tomcat服务器 利用自动配置创建很多对象（DataSource、JdbcTemplate、DispatcherServlet等） 提供一系列启动器（jar包集合） 采用properties或yml做配置文件 应用采用jar包发布 2.2 SpringBoot程序构成 创建工程，导入boot启动器（jar包） spring-boot-starter (核心、包含ioc、yml、自动配置、Log日志) spring-boot-starter-parent（包含参数设置、文件编码、jdk版本等） spring-boot-starter-jdbc（包含连接池、jdbcTemplate等） spring-boot-starter-web（包含mvc、restful、tomcat等） spring-boot-starter-test（包含junit、spring-test等） 添加配置文件application.properties或application.yml 2.3 SpringBoot配置文件application.properties 123spring.datasource.username=rootspring.datasource.password=123456server.port=8888 application.yml 123456spring: datasource: username: root password: 123456server: port: 8888 2.4 SpringBoot启动类定义启动类，通过main方法启动 123456@SpringBootApplicationpublic class Xxxx&#123; public static void main(String[] args)&#123; SpringApplication.run(Xxxx.class); &#125;&#125; 2.5 SpringBoot数据库访问在pom.xml定义spring-boot-starter-jdbc、mysql驱动包 123456789101112&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;version&gt;2.0.5.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.47&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 在application.properties定义数据库连接参数 1234spring.datasource.username=rootspring.datasource.password=123456spring.datasource.url=jdbc:mysql://localhost:3306/ydmaspring.datasource.driverClassName=com.mysql.jdbc.Driver 定义启动类，内部会根据自动配置机制生成DataSource和JdbcTemplate 12345678910111213141516@SpringBootApplicationpublic class RunBoot &#123; public static void main(String[] args) throws SQLException &#123; //ApplicationContext ctx = new ClassPathXmlApplicationContext(\"applicationContext.xml\"); ApplicationContext ctx = SpringApplication.run(RunBoot.class, args); DataSource ds = ctx.getBean(DataSource.class); System.out.println(ds.getConnection()); JdbcTemplate template = ctx.getBean(JdbcTemplate.class); System.out.println(template); String sql = \"insert into paper_score (total_score,my_score,user_id) values (?,?,?)\"; Object[] params = &#123;100,90,1&#125;; template.update(sql,params); &#125;&#125;//提示：DataSource和JdbcTemplate都是基于自动配置机制产生，直接注入使用即可。 2.6 打包发布SpringBoot程序： 在pom.xml定义spring-boot-maven-plugin插件 12345678&lt;build&gt;&lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt;&lt;/plugins&gt;&lt;/build&gt; 点击工程右键选择run as- maven build … 执行完毕后会在项目target目录下生成一个jar包，该包就是发布包 可以采用java -jar xxxx.jar命令启动 提示：eclipse设置jdk必须指向到JDK路径，不要JRE路径。 3. SpringBoot启动过程 调用SpringApplication的静态的run方法启动 静态的run方法调用SpringApplication对象的run方法 (SpringApplication对象创建时加载spring.factories文件中Initializer和Application Listeners组件，判断程序类型servlet、reactive、default) 对象的run方法会创建Spring的ApplicationContext容器对象 获取启动Listener组件 获取environment环境参数 获取启动Logo信息Banner 根据程序类型不同创建不同类型的ApplicationContext对象 将Listener、environment、banner设置到ApplicationContext容器对象中 为ApplicationContext容器对象加载程序中各种Bean组件 开始执行启动任务ApplicationRunner、CommandLineRunner等 返回ApplicationContext容器对象 4. @SpringBootApplication作用SpringApplication.run方法在启动中，加载一个带有@SpringBootApplication标记的参数，该标记具有以下几种功能。 4.1 @SpringBootConfiguration（SpringBoot Bean定义） spring中bean定义&lt;bean id=&quot;&quot; class=&quot;&quot;&gt; SpringBoot通过@Bean、@Primary标记定义。 案例代码： 12345678910111213141516@SpringBootConfiguration//开启Bean定义功能public class BeanConfiguration &#123; @Bean//将返回的UserDao对象放入Spring容器，默认方法名为id public UserDao userdao() &#123; return new UserDao(); &#125; @Bean(\"dao2\")//将返回的UserDao对象放入Spring容器，指定id为dao2 @Primary//默认注入该对象 public UserDao userdao1() &#123; return new UserDao(); &#125; @Bean(\"userService\") public UserService userService() &#123; return new UserService(); &#125;&#125; @SpringBootConfiguration标记是对Spring的@Configuration封装，所以直接用@Configuration也可以。 4.2 @ComponentScan（SpringBoot组件扫描） spring中组件扫描&lt;context:component-scan base-package=&quot;&quot;/&gt; SpringBoot通过@ComponentScan 扫描指定包路径组件，带@Controller、@Service、@Repository、@Component注解标记组件 @ComponentScan(basePackages= {&quot;cn.xdl.dao&quot;,&quot;cn.xdl.service&quot;}) 扫描cn.xdl包及子包下的组件 @ComponentScan(basePackages=&quot;cn.xdl&quot;) 扫描当前包及子包下的组件 @ComponentScan 扫描当前包及子包组件，并且将DeptService组件纳入 @ComponentScan(includeFilters= {@Filter(type=FilterType.ASSIGNABLE_TYPE,classes=DeptService.class)}) 扫描当前包及子包组件，带有@Controller、@Service…、@MyComponent注解有效 @ComponentScan(includeFilters= {@Filter(type=FilterType.ANNOTATION,classes=MyComponent.class)}) 4.3 @EnableAutoConfiguration（SpringBoot自动配置）自动配置机制是SpringBoot框架特有功能，能在启动后自动创建一些常用对象，例如DataSource、JdbcTemplate等。 自动配置原理： 在xxx-autoconfigure.jar包中META-INF目录下有一个spring.factories文件，其中定义了大量的XxxAutoConfiguration配置组件。当开启@EnableAutoConfiguration标记时，标记内部会触发AutoConfigurationImportSelector组件调用SpringFactoriesLoader加载spring.factories文件。 自动配置组件就是采用@Configuration+@Bean+@Primary标记事先定义好的配置组件，通过Boot启动自动去spring.factories文件加载，然后在Spring容器中创建出约定对象。 1234DataSourceAutoConfiguration//创建dataSource对象JdbcTemplateAutoConfiguration//创建jdbcTemplateDispatcherServletAutoConfiguration//创建DispatcherServlet对象RedisAutoConfiguration//创建RedisTemplate对象 通过自动配置机制创建DataSource对象 引入spring-boot-starter-jdbc（hikari）、驱动包 在application.properties文件追加db参数 在启动类使用@EnableAutoConfiguration标记 DataSourceAutoConfiguration默认会创建Hikari、tomcat、dbcp2连接池对象，优先级hikari最高，依次tomcat、dbcp2. 如果通过spring.datasource.type属性指定其他类型连接池组件，SpringBoot可以按指定类型创建连接池。12spring.datasource.type=org.apache.commons.dbcp2.BasicDataSourcespring.datasource.type=com.alibaba.druid.pool.DruidDataSource 4.4 MAVEN如何排除某个jar包（扩展）在引入spring-boot-starter-jdbc启动器时，由于jar包依赖会自动引入HikariCP，可以通过&lt; exclusion&gt;标记排除依赖。 12345678910&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;com.zaxxer&lt;/groupId&gt; &lt;artifactId&gt;HikariCP&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"Spring","slug":"Spring","permalink":"http://chaooo.github.io/tags/Spring/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://chaooo.github.io/tags/SpringBoot/"}]},{"title":"【Spring】SSM框架整合(Spring+SpringMVC+MyBatis)","date":"2018-05-11T14:52:55.000Z","path":"article/20180511.html","text":"SSM框架是spring MVC ，spring和mybatis框架的整合，是标准的MVC模式，将整个系统划分为表现层，controller层，service层，DAO层。 使用spring MVC负责请求的转发和视图管理 spring实现业务对象管理 mybatis作为数据对象的持久化引擎 1.搭建SSM架构步骤： 设计数据库 先写实体类entity，定义对象的属性，（参照数据库中表的字段来设置）。 编写Mapper.xml（Mybatis），定义功能，对应要对数据库进行的那些操作，比如 insert、selectAll、selectByKey、delete、update等。 编写Mapper.java(DAO接口)，将Mapper.xml中的操作按照id映射成Java函数。 配置spring和mybatis框架的整合(applicationContext.xml) 编写Service.java，为控制层提供服务，接受控制层的参数，完成相应的功能，并返回给控制层。 配置SpringMVC(web.xml) 编写Controller.java，连接页面请求和服务层，获取页面请求的参数，通过自动装配，映射不同的URL到相应的处理函数，并获取参数，对参数进行处理，之后传给服务层。 编写JSP页面调用，请求哪些参数，需要获取什么数据。 DataBase –&gt; Entity –&gt; Mapper.xml –&gt; Mapper.Java(DAO) –&gt; Service.java –&gt; Controller.java –&gt; Jsp 2.搭建SSM架构实例（管理员登录）1. 设计数据库(以MySql为例)建立web项目，在src下新建sql脚本(admin.sql)，并在数据库中执行 1234567891011121314CREATE DATABASE exam_sys;/** 管理员表 */DROP TABLE admin;CREATE TABLE admin( id INT AUTO_INCREMENT COMMENT '管理员ID', name VARCHAR(30) NOT NULL COMMENT '管理员账号', password VARCHAR(30) COMMENT '管理员密码', CONSTRAINT et_admin_id_pk PRIMARY KEY(id), CONSTRAINT et_admin_name_uk UNIQUE(NAME));/** 插入数据 */INSERT INTO admin (name, password) VALUES('admin', '123456');SELECT * FROM admin;COMMIT; 2. 先写实体类entity，定义对象的属性参照数据库中表的字段来设置 123456789101112package com.exam.entity;public class Admin &#123; private int id; private String name; private String password; /** 添加 getter/setter方法 * 添加 无参，有参构造 * 重写toString()以便于测试 */ // ...&#125; 3. 编写AdminMapper.xml（Mybatis），定义功能对应要对数据库进行的那些操作，比如 insert、selectAll、selectByKey、delete、update等。 123456789&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;!DOCTYPE mapper PUBLIC \"-//ibatis.apache.org//DTD Mapper 3.0//EN\" \"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd\"&gt;&lt;!-- namespace指定和哪个Mapper映射器接口对应 --&gt;&lt;mapper namespace=\"com.exam.mapper.AdminDao\"&gt; &lt;!-- 定义SQL语句 --&gt; &lt;select id=\"findByNameAndPassword\" resultType=\"com.exam.entity.Admin\"&gt; select * from admin where name=#&#123;name, jdbcType=VARCHAR&#125; and password=#&#123;password, jdbcType=VARCHAR&#125; &lt;/select&gt;&lt;/mapper&gt; 4. 编写AdminDao.java，将AdminMapper.xml中的操作按照id映射成Java函数。导入Mybatis相关jar包：mybatis.jar、mysql-connector-java.jar(数据库驱动)、mybatis-spring.jar(SM整合) 12345678package com.exam.mapper;import org.apache.ibatis.annotations.Param;import com.exam.entity.Admin;public interface AdminDao &#123; public Admin findByNameAndPassword(@Param(\"name\") String name, @Param(\"password\") String password);&#125; 5. 配置spring和mybatis框架的整合导入Spring相关jar包：ioc/aop/dao/连接池；添加Spring配置文件（applicationContext.xml）到src下。 123456789101112131415161718192021222324252627&lt;!-- 配置连接池对象 --&gt;&lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"&gt; &lt;property name=\"driverClassName\" value=\"com.mysql.cj.jdbc.Driver\"&gt;&lt;/property&gt; &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/exam_sys\"&gt;&lt;/property&gt; &lt;property name=\"username\" value=\"root\"&gt;&lt;/property&gt; &lt;property name=\"password\" value=\"123456\"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 配置SqlSessionFactoryBean来创建SqlSessionFactory 属性dataSource：注入连接池对象 属性mapperLocations：指定MyBatis的映射器XML配置文件的位置 属性typeAliasesPackage：对应我们的实体类所在的包，配置此项可在Mapper映射器直接使用类名，而非包名.类名 --&gt;&lt;bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"&gt;&lt;/property&gt; &lt;property name=\"mapperLocations\" value=\"classpath:com/exam/mapper/*.xml\"&gt;&lt;/property&gt; &lt;!-- &lt;property name=\"typeAliasesPackage\" value=\"com.exam.entity\"&gt;&lt;/property&gt; --&gt;&lt;/bean&gt;&lt;!-- 批量生产DAO接口实现类 ,实现类id为类名首字母小写 --&gt;&lt;bean id=\"mapperScanner\" class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\"&gt; &lt;!-- &lt;property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\"&gt;&lt;/property&gt; --&gt; &lt;property name=\"basePackage\" value=\"com.exam.mapper\"&gt;&lt;/property&gt; &lt;!-- 自定义注解可以让只让有注解的接口产生实现类，另一部分一部分不产生 --&gt; &lt;!-- &lt;property name=\"annotationClass\" value=\"com.annotation.MyAnnotation\"&gt;&lt;/property&gt; --&gt;&lt;/bean&gt;&lt;!-- 开启服务层组件扫描 --&gt;&lt;context:component-scan base-package=\"com.exam.service\"/&gt; 6. 编写Service.java，为控制层提供服务接受控制层的参数，完成相应的功能，并返回给控制层。 1234567891011121314151617181920package com.exam.service;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.exam.mapper.AdminDao;@Service(\"adminService\")public class AdminService &#123; @Autowired private AdminDao dao; public boolean Login(String name, String password) &#123; try &#123; return dao.findByNameAndPassword(name, password)!=null?true:false; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return false; &#125;&#125; 7. 配置SpringMVC导入jar包（spring-web.jar，spring-webmvc.jar）,生成web.xml并配置DispatcherServlet分发请求。 12345678910111213141516171819202122232425262728&lt;!-- 配置编码过滤器 --&gt;&lt;filter&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;!-- 配置DispatcherServlet分发请求 --&gt;&lt;servlet&gt; &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;!-- 在applicationContext.xml对静态资源进行放行 ：mvc:default-servlet-handler--&gt; 在applicationContext.xml中开启组件扫描(com.controller)，开启标注形式mvc，配置视图处理器 并 对静态资源进行放行。 1234567891011&lt;!-- 开启控制器组件扫描 --&gt;&lt;context:component-scan base-package=\"com.exam.controller\"/&gt;&lt;!-- 开启标注形式mvc --&gt;&lt;mvc:annotation-driven /&gt;&lt;!-- 配置视图处理器 --&gt;&lt;bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt; &lt;property name=\"prefix\" value=\"/WEB-INF/\"&gt;&lt;/property&gt; &lt;property name=\"suffix\" value=\".jsp\"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 对静态资源进行放行 --&gt;&lt;mvc:default-servlet-handler/&gt; 8. 编写Controller.java，连接页面请求和服务层获取页面请求的参数，通过自动装配，映射不同的URL到相应的处理函数，并获取参数，对参数进行处理，之后传给服务层。（导入Json相关包：jackson-core.jar，jackson-databind.jar，jackson-annotations.jar） 12345678910111213141516171819202122232425262728293031323334353637package com.exam.controller;import javax.servlet.http.HttpServletRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import com.exam.entity.Admin;import com.exam.service.AdminService;@Controller@RequestMapping(\"/admin\")public class AdminController &#123; @Autowired private AdminService as; @RequestMapping(\"/tologin\") public String toLogin() &#123; return \"admin/login\"; &#125; @RequestMapping(value=\"/login\",method=RequestMethod.POST) @ResponseBody public boolean addUser(Admin admin, HttpServletRequest request) &#123; System.out.println(\"add:\"+admin); System.out.println(admin.getName()+\"---\"+admin.getPassword()); boolean bl = as.Login(admin.getName(), admin.getPassword()); if(bl) &#123; //登录成功的逻辑 request.getSession().setAttribute(\"admin\", admin); return true; &#125; //登录失败的逻辑 request.setAttribute(\"msg\", \"登录失败\"); return false; &#125;&#125; 9. 编写JSP页面调用123456789101112131415161718192021&lt;form&gt; 管理员: &lt;input id=\"aName\" type=\"text\"&gt;&lt;br&gt; 密码:&lt;input id=\"aPassword\" type=\"text\"&gt;&lt;br&gt; &lt;input id=\"loginBtn\" type=\"button\" value=\"登录\"&gt;&lt;/form&gt;&lt;script src=\"js/jquery.min.js\"&gt;&lt;/script&gt;&lt;script&gt;$(\"#loginBtn\").on(\"click\", function()&#123; $.ajax(&#123; url: \"admin/login\", type: \"post\", data: &#123; name: $(\"#aName\").val(), password: $(\"#aPassword\").val() &#125;, success: function(res)&#123; alert(res); &#125; &#125;);&#125;);&lt;/script&gt;","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"Spring","slug":"Spring","permalink":"http://chaooo.github.io/tags/Spring/"}]},{"title":"【Spring】持久层框架Mybatis","date":"2018-05-06T14:51:34.000Z","path":"article/20180506.html","text":"Mybatis支持普通sql操作，存储过程的调用，它是一个高级的ORM框架(Object Relation Mapping对象关系映射–以面向对象思想访问数据库)，是一个基于Java的持久层框架。 MyBatis封装了几乎所有的JDBC操作和参数的手工设置，它会对结果集自动封装成对象，以及直接把对象存入数据库，甚至可以做到对象与对象的关系维护；诸如：建立连接、操作 Statment、ResultSet，处理 JDBC 相关异常等等都可以交给 MyBatis 去处理，我们的关注点于是可以就此集中在 SQL 语句上，关注在增删改查这些操作层面上。 Mybatis框架的构成 使用Mybatis访问数据库 Mybatis的CRUD操作 Mapper映射器 向mapper传多个参数 结果集列名和属性名不一致的解决方法 类型的别名和日志输出 JdbcType 1. Mybatis框架的构成 实体类 ： 封装记录信息（JavaBean） SQL定义文件 ：定义sql语句（编写SQL语句的XML） 主配置文件 ：定义连接信息、加载SQL文件 以及其他设置的XML 框架API ：用于实现数据库增删改查操作（主要通过SqlSession） 2. 使用Mybatis访问数据库以员工表Emp(id,name,salary)为例 准备数据库及创建项目（需要mybatis的jar包和数据库驱动包） 根据表建立对应的实体类：Emp(id,name,salary) 在【src】目录下创建 MyBaits 的主配置文件 mybatis-config.xml ，其主要作用是提供连接数据库用的驱动，数据名称，编码方式，账号密码等 123456789101112131415161718&lt;configuration&gt; &lt;environments default=\"environment\"&gt; &lt;environment id=\"environment\"&gt; &lt;transactionManager type=\"JDBC\" /&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;property name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\" /&gt; &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/test\"/&gt; &lt;property name=\"username\" value=\"root\" /&gt; &lt;property name=\"password\" value=\"123456\" /&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=\"com/mapper/EmpMapper.xml\" /&gt; &lt;/mappers&gt;&lt;/configuration&gt; 在【src】包路径下创建配置文件（com/mapper/EmpMapper.xml）,然后根据需求定义sql 1234567891011&lt;mapper namespace=\"com.mapper.EmpMapper\"&gt; &lt;!-- 定义SQL语句 --&gt; &lt;select id=\"findById\" parameterType=\"int\" resultType=\"com.mapper.Emp\"&gt; select * from emp32 where id = #&#123;id&#125; &lt;/select&gt; &lt;select id=\"findByName\" parameterType=\"String\" resultType=\"com.mapper.Emp\"&gt; select * from emp32 where name = #&#123;name&#125; &lt;/select&gt;&lt;/mapper&gt; parameterType：要求输入参数的类型 resultType：输出的类型 封装工具类获取SQLSession 123456789101112131415public class SqlSessionUtil &#123; public static SqlSessionFactory ssf; static &#123; // 先构建SQLSession工厂构建器 SqlSessionFactoryBuilder ssfb = new SqlSessionFactoryBuilder(); // 构建SqlSessionFactory关联主配置文件 InputStream inputStream = SqlSessionUtil.class.getClassLoader().getResourceAsStream(\"mybatis-config.xml\"); ssf = ssfb.build(inputStream); &#125; // 获取SQLSession public static SqlSession getSqlSession() &#123; // 通过SqlSession 工厂对象 来获取SqlSession return ssf.openSession(); &#125;&#125; 编写测试类 1234567public class EmpTest &#123; public static void main(String[] args) &#123; SqlSession ss =SqlSessionUtil.getSqlSession(); Emp emp = ss.selectOne(\"findById\", 6); System.out.println(emp); &#125;&#125; 基本原理 应用程序找 MyBatis 要数据 MyBatis 从数据库中找来数据 通过 mybatis-config.xml 定位哪个数据库 通过 EmpMapper.xml 执行对应的 sql 语句 基于 EmpMapper.xml 把返回的数据库封装在 Emp 对象中 返回一个 Emp 对象 3. Mybatis的CRUD操作以员工表Emp(id,name,salary)为例 第一步：配置EmpMapper.xml 123456789101112131415&lt;insert id=\"insertEmp\" parameterType=\"com.mapper.Emp\"&gt; insert into emp32(name, salary) values(#&#123;name&#125;, #&#123;salary&#125;)&lt;/insert&gt;&lt;delete id=\"deleteEmpById\" parameterType=\"int\"&gt; delete from emp32 where id=#&#123;id&#125;&lt;/delete&gt;&lt;update id=\"updateEmpById\" parameterType=\"com.mapper.Emp\"&gt; update emp32 set name=#&#123;name&#125; where id=#&#123;id&#125;&lt;/update&gt;&lt;select id=\"findById\" parameterType=\"int\" resultType=\"com.mapper.Emp\"&gt; select * from emp32 where id = #&#123;id&#125;&lt;/select&gt;&lt;select id=\"findAll\" resultType=\"com.mapper.Emp\"&gt; select * from emp32&lt;/select&gt; parameterType：要求输入参数的类型 resultType：输出的类型 第二步：SQLSession实现增删改查 123456789101112131415161718192021// 先构建SQLSession工厂构建器SqlSessionFactoryBuilder ssfb = new SqlSessionFactoryBuilder();// 构建SqlSessionFactory关联主配置文件InputStream inputStream = EmpTest.class.getClassLoader().getResourceAsStream(\"sqlmap-config.xml\");SqlSessionFactory ssf = ssfb.build(inputStream);// 通过SqlSession 工厂对象 来获取SqlSessionSqlSession ss = ssf.openSession();//增加Emp emp = new Emp(0,\"ef2\",50000);int addRows = ss.insert(\"insertEmp\", emp);//删除int delRows = ss.delete(\"deleteEmpById\", 12);//更新Emp emp2 = new Emp(1,\"hello\",0);int updateRows = ss.update(\"updateEmpById\", emp2);//查找Emp emp3 = ss.selectOne(\"findById\", 6);List&lt;Emp&gt; empList = ss.selectList(\"findAll\");ss.commit(); SqlSession对象的操作方法如下： insert(..) 插入操作 update(..) 更新操作 delete(..) 删除操作 selectOne(..) 单行查询操作 selectList(..) 多行查询操作 通过 session.commit() 来提交事务，也可以简单理解为更新到数据库 4. Mapper映射器使用规则： 接口的方法名和SQL定义文件中的id保持一致 接口方法的返回值类型 要和resultType 保持一致 单行：resultType 多行：List&lt;resultType&gt; 增删改返回值，推荐int，也可以是void 接口方法参数和parameterType保持 一致，如果没有parameterType则参数任意 SQL定义文件中的namespace必须包名.接口名 5. 向mapper传多个参数5.1 第一种方案：#{0}，#{1} / #{param1} 和 #{param2}DAO层的函数方法 1public Emp findByIdAndName(int id, String name); 对应的Mapper.xml 123&lt;select id=\"findByIdAndName\" resultType=\"com.bean.Emp\"&gt; select * from emp32 where id = #&#123;0&#125; and name = #&#123;1&#125;&lt;/select&gt; 其中，#{0}代表接收的是dao层中的第一个参数，#{1}代表dao层中第二参数，更多参数一致往后加即可。也可以用#{param1} 和 #{param2}实现同意效果。 5.2 第二种方案@paramDao层的函数方法 1public Emp findByIdAndName(@param(\"id\")int id, @param(\"name\")String name); 对应的Mapper.xml 123&lt;select id=\"findByIdAndName\" resultType=\"com.bean.Emp\"&gt; select * from emp32 where id = #&#123;id&#125; and name = #&#123;name&#125;&lt;/select&gt; 5.3 第三种方案：采用对象或Map传多参数Dao层的函数方法 12public Emp findByIdAndName(Emp emp);public Emp findByIdAndName2(Map&lt;String, Object&gt; params); 对应的Mapper.xml 1234567&lt;select id=\"findByIdAndName\" parameterType=\"com.bean.Emp\" resultType=\"com.bean.Emp\"&gt; select * from emp32 where id = #&#123;id&#125; and name = #&#123;name&#125;&lt;/select&gt;&lt;select id=\"findByIdAndName2\" parameterType=\"map\" resultType=\"com.bean.Emp\"&gt; select * from emp32 where id = #&#123;id&#125; and name = #&#123;name&#125;&lt;/select&gt; 6. 结果集列名和属性名不一致的解决方法在SQL定义中，resultType属性用于指定查询数据采用哪种类型封装，规则为结果集列名和属性名一致，如果不一致将不能接收查询结果。解决方法： 使用别名，select语句使用与属性一致的别名 使用resultMap替换resultType，用resultMap指定结果集列名和属性名的对应关系 123456789101112131415161718&lt;!-- 定义resultMap将sql 结果集列名(数据库中的字段)和Emp类中的属性做一个映射关系 type:resultMap最终所映射的Java对象类型，可以使用别名 id:对resultMap的唯一标识 --&gt;&lt;resultMap type=\"com.bean.Emp\" id=\"empMap\"&gt; &lt;!-- id表示查询结果集中唯一标识 column:查询出的列名 property:type所指定的类中的属性名 --&gt; &lt;id column=\"e_id\" property=\"id\"/&gt; &lt;!-- 对普通列的映射定义 --&gt; &lt;result column=\"salary\" property=\"sal\"/&gt;&lt;/resultMap&gt;&lt;!-- 使用resultMap --&gt;&lt;select id=\"findEmpById\" parameterType=\"int\" resultMap=\"empMap\"&gt; select * from emp32 where id = #&#123;id&#125;&lt;/select&gt; 7. 类型的别名和日志输出在mybatis-config.xml中自定义类型的别名 123&lt;typeAliases&gt; &lt;typeAlias alias=\"emp\" type=\"com.bean.Emp\"/&gt;&lt;/typeAliases&gt; 在EmpMapper.xml中使用别名 resultType=”emp” 123&lt;select id=\"findById\" parameterType=\"int\" resultType=\"emp\"&gt; select id,name,salary sal from emp32 where id = #&#123;id&#125;&lt;/select&gt; 设置MyBatis的日志输出到控制台 123456&lt;settings&gt; &lt;!--设置是否允许缓存--&gt; &lt;setting name=\"cacheEnabled\" value=\"true\"/&gt; &lt;!--设置日志输出的目标--&gt; &lt;setting name=\"logImpl\" value=\"STDOUT_LOGGING\"/&gt;&lt;/settings&gt; 8. JdbcType在执行SQL时MyBatis会自动通过对象中的属性给SQL中参数赋值，它会自动将Java类型转换成数据库的类型。而一旦传入的是null它就无法准确判断这个类型应该是什么，就有可能将类型转换错误，从而报错。 所以 MyBatis 插入空值时，需要指定JdbcType，这样相对来说是比较安全的。 一般情况下，我们没有必要按个字段去识别/判断它是否可以为空，而是将所有的字段都当做可以为空，全部手动设置转换类型。 MyBatis包含的JdbcType类型，主要有下面这些： BIT、FLOAT、CHAR 、TIMESTAMP 、 OTHER 、UNDEFINEDTINYINT 、REAL 、VARCHAR 、BINARY 、BLOB NVARCHAR、SMALLINT 、DOUBLE 、LONGVARCHAR 、VARBINARY 、CLOB、NCHAR、INTEGER、 NUMERIC、DATE 、LONGVARBINARY 、BOOLEAN 、NCLOB、BIGINT 、DECIMAL 、TIME 、NULL、CURSOR 123&lt;select id=\"findByName\" parameterType=\"String\" resultType=\"com.bean.Emp\"&gt; select * from emp32 where name = #&#123;name, jdbcType=VARCHAR&#125;&lt;/select&gt; 9. Mabatis中#{}和${}的区别 ${}是字符串替换，底层使用的Statement（sql注入问题，效率低，编写sql复杂） 支持${param1}或${变量名},不支持${0}，Dao层必须使用@Param(),用到字符串时需要手动加单引号 #{}是预编译处理命令，底层使用PreparedStatement（可以有效防止sql注入） 不支持表名、排序方式等的占位，默认会将其当成字符串 10. 分页 在主配置文件中配置 分页拦截器（依赖于pageHelper、sqlparse相关jar） 1234&lt;!-- 配置分页拦截器 --&gt;&lt;plugins&gt; &lt;plugin interceptor=\"com.github.pagehelper.PageHelper\"&gt;&lt;/plugin&gt;&lt;/plugins&gt; 查询前使用分页API 12345PageHelper.startPage(2, 2);List&lt;Emp&gt; emps = dao.orderBySalary();for(Emp emp: emps) &#123; System.out.println(emp);&#125; 11. Spring+MyBatis整合Spring与MyBatis整合需要引入一个mybatis-spring.jar文件包，该包提供了下面几个与整合相关的API: SqlSessionFactoryBean 创建SqlSessionFactory对象，为整合应用提供SqlSession对象资源 依赖于dataSource 和加载SQL定义文件 MapperFactoryBean 根据指定的某一个Mapper接口生成Bean实例 依赖于SqlSessionFactory 和 MApper接口 MapperScannerConfigurer 根据指定包批量扫描Mapper接口并生成实例 SqlSessionTemplate 类似于JdbcTemplate，便于程序员自己编写Mapper实现类 12. Spring+MyBatis完成sql操作第一步：使用Mybatis（同上） 导jar包(mybatis包/数据库驱动包)，建立实体类，定义SQL文件，编写Mapper映射接口 第二步：配置SqlSessionFactoryBean 导入jar包（mabatis-spring/ioc/aop/dao/连接池） 配置SqlSessionFactoryBean注入dataSource和指定sql定义文件 123456789101112&lt;!-- 配置SqlSessionFactory --&gt;&lt;bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"&gt;&lt;/property&gt; &lt;property name=\"mapperLocations\" value=\"classpath:com/mapper/*.xml\"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 配置连接池对象 --&gt;&lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"&gt; &lt;property name=\"driverClassName\" value=\"com.mysql.cj.jdbc.Driver\"&gt;&lt;/property&gt; &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/test\"&gt;&lt;/property&gt; &lt;property name=\"username\" value=\"root\"&gt;&lt;/property&gt; &lt;property name=\"password\" value=\"123456\"&gt;&lt;/property&gt;&lt;/bean&gt; 第三步： 方式一： 使用SqlSessionFactoryBean结合接口和SqlSessionFactory 最终产生Mapper接口的 实现类，注意这是实现类 123456789&lt;!-- 配置SqlSessionFactoryBean 产生Mapper接口的 实现类 --&gt;&lt;bean id=\"empDao\" class=\"org.mybatis.spring.mapper.MapperFactoryBean\"&gt; &lt;property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\"&gt;&lt;/property&gt; &lt;property name=\"mapperInterface\" value=\"com.dao.EmpDao\"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean id=\"empDao2\" class=\"org.mybatis.spring.mapper.MapperFactoryBean\"&gt; &lt;property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\"&gt;&lt;/property&gt; &lt;property name=\"mapperInterface\" value=\"com.dao.EmpDao2\"&gt;&lt;/property&gt;&lt;/bean&gt; 方式二： MapperScannerConfigurer MapperFactoryBean一次只能生产一个DAO的实现类，可以通过MapperScannerConfigurer批量生产DAO接口实现类 1234567&lt;!-- 批量生产DAO接口实现类 ,实现类id为类名首字母小写 --&gt;&lt;bean id=\"mapperScanner\" class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\"&gt; &lt;!-- &lt;property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\"&gt;&lt;/property&gt; --&gt; &lt;property name=\"basePackage\" value=\"com.dao\"&gt;&lt;/property&gt; &lt;!-- 自定义注解可以让只让有注解的接口产生实现类，另一部分一部分不产生 --&gt; &lt;property name=\"annotationClass\" value=\"com.annotation.MyAnnotation\"&gt;&lt;/property&gt;&lt;/bean&gt; 13. 使用SqlSessionTemplate模板来完成DAO接口的实现类 使用Mybatis（同上） 配置SqlSessionFactoryBean（同上） 编写DAO接口的实现类 开启组件扫描，注入SqlSessionTemplate,依赖于SqlSessionFactory 使用SqlSessionTemplate对应API完成增删改查 123456&lt;!-- 开启组件扫描 --&gt;&lt;context:component-scan base-package=\"com.mapper\"&gt;&lt;/context:component-scan&gt;&lt;!-- 创建SqlSessionTemplate --&gt;&lt;bean id=\"sqlSessionTemplate\" class=\"org.mybatis.spring.SqlSessionTemplate\"&gt; &lt;constructor-arg index=\"0\" ref=\"sqlSessionFactory\"&gt;&lt;/constructor-arg&gt;&lt;/bean&gt; 123456789@Repository(\"empDao\")public class EmpDaoImpl implements EmpDao &#123; @Autowired private SqlSessionTemplate sqlSessionTemplate; @Override public Emp findById(int id) &#123; return sqlSessionTemplate.selectOne(\"findById\", id); &#125;&#125;","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"Spring","slug":"Spring","permalink":"http://chaooo.github.io/tags/Spring/"}]},{"title":"【Spring】Spring MVC框架","date":"2018-04-27T14:50:22.000Z","path":"article/20180427.html","text":"Spring MVC是Spring提供的一个强大而灵活的web框架。借助于注解，Spring MVC提供了几乎是POJO的开发模式，使得控制器的开发和测试更加简单。这些控制器一般不直接处理请求，而是将其委托给Spring上下文中的其他bean，通过Spring的依赖注入功能，这些bean被注入到控制器中。 Spring MVC基本概念 Spring MVC的编写步骤 标注(注解)形式的MVC mvc控制器接收页面参数 mvc控制器把数据传递给页面 Spring MVC实现重定向 Spring MVC 中文参数的乱码问题 Spring MVC 拦截器 Spring MVC 拦截器的使用步骤 Spring MVC异常处理 Spring MVC文件上传 文件上传与异常处理的结合 Spring MVC响应JSON REST REST实例 1. Spring MVC基本概念1.1 Spring MVC 五大核心组件Spring MVC主要由DispatcherServlet、处理器映射、处理器(控制器)、视图解析器、视图组成。 DispatcherServlet：控制器，请求入口 HandlerMapping：控制器，分发请求，让请求和控制器建立一一对应关系 Controller：控制器，处理请求 ModelAndView：封装了 数据信息和视图信息 ViewResolver：视图处理器 他的两个核心是两个核心： 处理器映射：选择使用哪个控制器来处理请求 视图解析器：选择结果应该如何渲染 通过以上两点，Spring MVC保证了如何选择控制处理请求和如何选择视图展现输出之间的松耦合。 1.2 SpringMVC运行原理 Http请求：客户端请求提交到DispatcherServlet。 寻找处理器：由DispatcherServlet控制器查询一个或多个HandlerMapping，找到处理请求的Controller。 调用处理器：DispatcherServlet将请求提交到Controller。 调用业务处理和返回结果：Controller调用业务逻辑处理后，返回ModelAndView。 处理视图映射并返回模型： DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图。 Http响应：视图负责将结果显示到客户端。 1.3 SpringMVC接口解释 DispatcherServlet接口：Spring提供的前端控制器，所有的请求都有经过它来统一分发。在DispatcherServlet将请求分发给Spring Controller之前，需要借助于Spring提供的HandlerMapping定位到具体的Controller。它是整个Spring MVC的核心。它负责接收HTTP请求组织协调Spring MVC的各个组成部分。其主要工作有以下三项： 截获符合特定格式的URL请求。 初始化DispatcherServlet上下文对应WebApplicationContext，并将其与业务层、持久化层的WebApplicationContext建立关联。 初始化Spring MVC的各个组成组件，并装配到DispatcherServlet中。 HandlerMapping接口：能够完成客户请求到Controller映射。 Controller接口： 需要为并发用户处理上述请求，因此实现Controller接口时，必须保证线程安全并且可重用。 Controller将处理用户请求，这和Struts Action扮演的角色是一致的。一旦Controller处理完用户请求，则返回ModelAndView对象给DispatcherServlet前端控制器，ModelAndView中包含了模型（Model）和视图（View）。 从宏观角度考虑，DispatcherServlet是整个Web应用的控制器；从微观考虑，Controller是单个Http请求处理过程中的控制器，而ModelAndView是Http请求过程中返回的模型（Model）和视图（View）。 ViewResolver接口：Spring提供的视图解析器（ViewResolver）在Web应用中查找View对象，从而将相应结果渲染给客户。 1.4 SpringMVC配置 在web.xml文件中进行配置applicationContext.xml路径 1234567891011121314&lt;!-- 配置DispatcherServlet --&gt;&lt;servlet&gt; &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 配置applicationContext.xml，开启注解功能、配置试图解析器 123456789101112131415&lt;!-- 配置HandlerMapping --&gt;&lt;bean id=\"handlerMapping\" class=\"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping\"&gt; &lt;property name=\"mappings\"&gt; &lt;props&gt; &lt;prop key=\"/toHello.do\"&gt;helloController&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt;&lt;/bean&gt;&lt;!-- 控制器对象 --&gt;&lt;bean id=\"helloController\" class=\"com.controller.MyHelleController\"&gt;&lt;/bean&gt;&lt;!-- 配置视图处理器 --&gt;&lt;bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt; &lt;property name=\"prefix\" value=\"/WEB-INF/\"&gt;&lt;/property&gt; &lt;property name=\"suffix\" value=\".jsp\"&gt;&lt;/property&gt;&lt;/bean&gt; 2. Spring MVC的编写步骤 建立一个项目，导入jar包(ioc mvc) 拷贝spring配置文件到src下，同时在WEB-INF下建立jsp文件。 在web.xml中配置DisappearServlet，并通过contextConfigLocation这个初始化参数关联Spring容器对应的配置文件。 在 Spring配置文件中配置HandlerMapping的实现类SimpleUrlHandlerMapping需要通过mappings属性指定请求和控制器对应的关系。 编写一个类实现Controller接口，实现接口方法，返回ModelAndView，并且在容器创建Controller对象 在Spring配置文件中配置ViewResolver的实现类InternalResourceViewResolver，需要配置前缀prefix和后缀suffix。 3. 标注(注解)形式的MVC 建立项目，导入jar(ioc aop mvc)，拷贝spring配置文件到src下，同时在WEB-INF下建立jsp文件。 在web.xml中配置DispatcherServlet，并通过contextConfigLocation关联配置文件。 开启组件扫描 和 标注形式mvc (容器帮你创建了一个HandlerMapping对象，类型时RequestMappingHandlerMapping)。 12&lt;context:component-scan base-package=\"包名\" /&gt;&lt;mvc:annotation-driven /&gt; 编写一个Java类，不用实现Controller接口，方法返回值类型可以时String也可以是ModelAndView（方法名与参数都自由了） 使用@Controller 可以把普通Java类转换成控制器，同时在容器中创建对象 使用@RequestMapping(&quot;/路径&quot;) 设置方法上 在Spring配置文件中配置ViewResolver的实现类InternalResourceViewResolver，需要配置前缀prefix和后缀suffix。 4. mvc控制器接收页面参数 使用HttpServletRequest类型的参数来接收 123456@RequestMapping(\"/login.do\")public String login(HttpServletRequest request) &#123; String acc_no = request.getParameter(\"acc_no\"); String acc_pwd = request.getParameter(\"acc_password\"); return \"main\";&#125; 直接定义和页面请求参数同名的控制器参数 12345@RequestMapping(\"/login2.do\")public ModelAndView login2(String acc_no,String acc_password, ModelAndView mav) &#123; mav.setViewName(\"main\"); return mav;&#125; 当页面参数和控制器参数名字不一致，@RequestParam(“acc_no”) 让请求参数和控制器参数对应 12345@RequestMapping(\"/login3.do\")public ModelAndView login3(@RequestParam(\"acc_no\") String a,String acc_password, ModelAndView mav) &#123; mav.setViewName(\"main\"); return mav;&#125; 控制器中 直接定义对象类型的参数 12345@RequestMapping(\"/login4.do\")public ModelAndView login4(Account acc, ModelAndView mav) &#123; mav.setViewName(\"main\"); return mav;&#125; 5. mvc控制器把数据传递给页面使用EL表达式在jsp页面接收数据&lt;h1&gt;欢迎 ${acc_no} &lt;/h1&gt; 使用域对象 进行传输 (request session ServletContext ) 12345@RequestMapping(\"/login6.do\")public String login6(String acc_no, HttpServletRequest req) &#123; req.setAttribute(\"acc_no\", acc_no); return \"main\";&#125; 使用ModelAndView进行数据传输 mav.getModel().put(&quot;acc_no&quot;, acc_no); mav.getModelMap().put(key, value); mav.getModelMap().addAttribute(&quot;acc_no&quot;, acc_no); 12345678@RequestMapping(\"/login7.do\")public ModelAndView login7(String acc_no, ModelAndView mav) &#123; mav.setViewName(\"main\"); //mav.getModel().put(\"acc_no\", acc_no); //mav.getModelMap().put(key, value) mav.getModelMap().addAttribute(\"acc_no\", acc_no); return mav;&#125; 使用Model进行数据传输 12345@RequestMapping(\"/login8.do\")public String login8(String acc_no, Model m) &#123; m.addAttribute(\"acc_no\", acc_no); return \"main\";&#125; 使用ModelMap进行数据传输 123456@RequestMapping(\"/login9.do\")public String login9(String acc_no, ModelMap m) &#123; //m.addAttribute(\"acc_no\", acc_no); m.put(\"acc_no\", acc_no); return \"main\";&#125; 使用自定义的对象类型默认传输（默认名类型首字母小写，可以通过@ModelAttribute(“新名”)修改） 默认名：&lt;h1&gt;欢迎 ${ account.acc_no } &lt;/h1&gt; @ModelAttribute(“acc”)：&lt;h1&gt;欢迎 ${ acc.acc_no } &lt;/h1&gt; 1234@RequestMapping(\"/login10.do\")public String login10(@ModelAttribute(\"acc\") Account acc) &#123; return \"main\";&#125; 6. Spring MVC实现重定向 控制器方法返回String redirect:请求路径 12345678910@RequestMapping(\"/login11.do\")public String login11(@ModelAttribute(\"acc\") Account acc) &#123; //return \"forward:toMain.do\"; return \"redirect:toMain.do\";&#125;@RequestMapping(\"/toMain.do\")public String toMain() &#123; // 干其它的事情 return \"main\";&#125; 控制器方法返回ModelAndView 使用RedirectView 完成 12345678@RequestMapping(\"/login12.do\")public ModelAndView login12(@ModelAttribute(\"acc\") Account acc) &#123; ModelAndView mav = new ModelAndView(); //重定向 RedirectView rv = new RedirectView(\"toMain.do\"); mav.setView(rv); return mav;&#125; 7. Spring MVC 中文参数的乱码问题tomcat8中 get 没有乱码问题，post 请求有乱码问题 参数为页面(HttpServletRequest request)与(HttpServletResponse response)时 12request.setCharacterEncoding(\"UTF-8\");response.setContentType(\"application/json;charset=UTF-8\"); 传入参数为@RequestParam时，可以通过字符串重新编码来解决 1new String(string.getBytes(\"ISO-8859-1\"),\"UTF-8\"); 方法名前出现@RequestMapping(value=&quot;XXX&quot;)时可以在value属性后再加一个属性produces=&quot;text/html;charset=UTF-8&quot;来解决 在web.xml或者dispatcher-servlet.xml或者其他配置servlet的配置文件中添加编码过滤器 123456789101112&lt;filter&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;&lt;/filter-mapping&gt; 8. Spring MVC 拦截器 拦截器和fiter的作用几乎一样，它是Spring提供的一个组件，可以用在HandlerMapping组件之后（用于身份认证，登录检查，编码设置） HandlerMapping接口 preHandle：在HandlerMapping之后控制器之前调用，返回boolean(true:继续其他拦截器和处理器，false:终止后续调用)。 postHandle：处理器执行后、视图处理前调用。 afterCompletion：整个请求处理完毕后调用。 9. Spring MVC 拦截器的使用步骤 搭建一个基于标注的mvc 编写一个类实现HandlerInterceptor接口 在Spring配置文件中配置拦截器1234567&lt;mvc:interceptors&gt; &lt;mvc:interceptor&gt; &lt;mvc:mapping path=\"/**\"/&gt; &lt;mvc:exclude-mapping path=\"/login.do\"/&gt; &lt;bean class=\"com.xdl.interceptor.SomeInterceptor\"/&gt; &lt;/mvc:interceptor&gt;&lt;/mvc:interceptors&gt; 10. Spring MVC异常处理 配置spring系统提供的简单异常处理器 SimpleMappingExceptionResolver 处理所有Controller异常 12345678&lt;bean id=\"simpleExceptionResolver\" class=\"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver\"&gt; &lt;property name=\"exceptionMappings\"&gt; &lt;props&gt; &lt;prop key=\"java.lang.RuntimeException\"&gt;error&lt;/prop&gt; &lt;prop key=\"java.lang.Exception\"&gt;error2&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt;&lt;/bean&gt; 自定义异常处理器，实现HandlerExceptionResolver接口，处理所有Controller异常 12345678910111213@Controllerpublic class MyExceptionResolver implements HandlerExceptionResolver &#123; @Override public ModelAndView resolveException(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception e) &#123; ModelAndView mav = new ModelAndView(); if(e instanceof RuntimeException) &#123; mav.setViewName(\"error\"); &#125;else if(e instanceof Exception) &#123; mav.setViewName(\"error2\"); &#125; return mav; &#125;&#125; 使用@ExceptionHandler注解实现异常处理，处理某一个Controller异常public String execute(HttpServletRequest request, Exception ex) 1234567//@Controller//public class MyController &#123;@ExceptionHandlerpublic String processException(Exception e) &#123; System.out.println(e.getMessage()); return \"error3\";&#125; 11. Spring MVC文件上传 jsp页面（method=”POST” enctype=”multipart/form-data type=”file”） 1234&lt;form action=\"upload.do\" method=\"post\" enctype=\"multipart/form-data\"&gt; 头像：&lt;input type=\"file\" name=\"head_img\"&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"上传\"&gt;&lt;br&gt;&lt;/form&gt; 控制器（MultipartFile类型来接收文件数据，需要配置文件解析器-需要依赖文件上传jar包-commons包） 123&lt;bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"&gt;&lt;/bean&gt; 12. 文件上传与异常处理的结合12345678910111213141516171819202122232425262728293031323334@Controllerpublic class fileController &#123; @RequestMapping(\"/toFile.do\") public String tofile() &#123; return \"file\"; &#125; @RequestMapping(\"/upload.do\") public String upload(String acc_no, MultipartFile head_img) &#123; System.out.println(\"acc_no:\" + acc_no ); if(head_img.getSize()&gt;1024*10) &#123; throw new RuntimeException(\"文件过大！\"); &#125; // 把文件写入磁盘 String uniqueStr = UUID.randomUUID().toString(); String oriFilename = head_img.getOriginalFilename(); String suffix = oriFilename.substring(oriFilename.lastIndexOf(\".\")); File file = new File(\"F:/Eclipse/datas/\"+uniqueStr+suffix); try &#123; head_img.transferTo(file); &#125; catch (IllegalStateException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; System.out.println(oriFilename); System.out.println(file); return \"file\"; &#125; /** 局部异常 */ @ExceptionHandler public String processError(Exception e) &#123; return \"error4\"; &#125;&#125; 13. Spring MVC响应JSON 搭建基于标注的mvc 在控制器中，设计控制方法，控制方法返回值数据类型对应的对象转换为JSON 给方法加@RequestMapping(“/请求路径”)、@ResponseBody，它能把Java对象转换为JSON直接返回，依赖json转换包 14. RESTREST即表述性状态传递（Representational State Transfer），使用这种软件架构风格，可以降低开发的复杂性，提高系统的可伸缩性，便于分布式应用的开发。 REST两个核心规范 url请求路径的格式，由原来的基于操作的设计改变了基于资源的设计（如:http://test/source/1234） 对http请求的方式做了规范，GET代表查询，POST增加，DELETE删除，PUT更新 restful 符合REST设计规范和风格的应用程序或设计 就是RESTful Spring MVC对REST的支持 @RequestMapping支持URI的模板，以及http请求方式设定的支持 @RequestMapping(value=&quot;/account/{id}&quot;,method=RequestMethod.POST) 对URI上路径变量的处理的支持，@PathVariable @PathVariable(&quot;id&quot;) int id rest请求路径是没有后缀的，需要把url-parttern修改成/ &lt;servlet-mapping&gt;&lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;&lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 需要对静态资源进行放行&lt;mvc:default-servlet-handler/&gt; 15. REST实例 配置web.xml与applicationContext.xml(部分配置) 12345678910&lt;!-- 修改rest请求路径 --&gt;&lt;!-- web.xml --&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;!-- 对静态资源进行放行 --&gt;&lt;!-- applicationContext.xml --&gt; &lt;mvc:default-servlet-handler/&gt; 编写控制类 12345678910111213141516171819202122232425262728293031323334353637383940@Controllerpublic class AccountController &#123; @RequestMapping(\"/toLogin.do\") public String toLogin() &#123; return \"login\"; &#125;/** 根据id查询账户 GET */ @RequestMapping(value=\"/account/&#123;id&#125;\", method=RequestMethod.GET) @ResponseBody public Account getAccountById(@PathVariable(\"id\") int id) &#123; Random rm = new Random(); Account acc = new Account(id, \"test\"+rm.nextInt(100),\"123\", rm.nextInt(999)+1000); return acc; &#125;/** 新增账户 POST */ @RequestMapping(value=\"/account/&#123;id&#125;\",method=RequestMethod.POST) @ResponseBody public boolean addAccount(Account acc) &#123; System.out.println(\"add:\"+acc); if(acc.getId()&gt;100) return true; return false; &#125;/** 根据id删除帐户对象 DELETE */ @RequestMapping(value=\"/account/&#123;id&#125;\",method=RequestMethod.DELETE) @ResponseBody public boolean deleteAccountById(@PathVariable(\"id\") int id) &#123; System.out.println(\"delete:\"+id); if(id&gt;100) return true; return false; &#125;/** 根据id更新帐户 PUT */ @RequestMapping(value=\"/account/&#123;id&#125;\",method=RequestMethod.PUT) @ResponseBody public boolean putAccount(@RequestBody Account acc) &#123; //@RequestBody将接收的ajax请求的json字符串写入Account对象中 System.out.println(\"update:\"+acc); if(acc.getId()&gt;100) return true; return false; &#125;&#125; 编写jsp页面 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283&lt;form&gt; &lt;p&gt;ID：&lt;input id=\"accountId\"&gt;&lt;/p&gt; &lt;p&gt;姓名：&lt;input id=\"accountNo\"&gt;&lt;/p&gt; &lt;p&gt;密码：&lt;input id=\"accountPassword\"&gt;&lt;/p&gt; &lt;p&gt;金额：&lt;input id=\"accountMoney\"&gt;&lt;/p&gt; &lt;button id=\"findBtn\" type=\"button\"&gt;查询&lt;/button&gt; &lt;button id=\"addBtn\" type=\"button\"&gt;添加&lt;/button&gt; &lt;button id=\"updateBtn\" type=\"button\"&gt;更新&lt;/button&gt; &lt;button id=\"delBtn\" type=\"button\"&gt;删除&lt;/button&gt;&lt;/form&gt;&lt;script src=\"js/jquery.min.js\"&gt;&lt;/script&gt;&lt;script&gt;$(\"#findBtn\").on(\"click\", function()&#123; findAccount();&#125;);$(\"#addBtn\").on(\"click\", function()&#123; addAccount();&#125;);$(\"#updateBtn\").on(\"click\", function()&#123; updateAccount();&#125;);$(\"#delBtn\").on(\"click\", function()&#123; delAccount();&#125;);function getDatas()&#123; var accountId = $(\"#accountId\").val(); var accountNo = $(\"#accountNo\").val(); var accountPassword = $(\"#accountPassword\").val(); var accountMoney = $(\"#accountMoney\").val(); return &#123; id: accountId, acc_no: accountNo, acc_password: accountPassword, acc_money: accountMoney &#125;;&#125;function findAccount()&#123; var datas = getDatas(); $.ajax(&#123; url: \"account/\" + datas.id, type: \"get\", success: function(res)&#123; $(\"#accountNo\").val(res.acc_no); $(\"#accountPassword\").val(res.acc_password); $(\"#accountMoney\").val(res.acc_money); &#125;, &#125;);&#125;function addAccount()&#123; var datas = getDatas(); $.ajax(&#123; url: \"account/\" + datas.id, type: \"post\", data: datas, success: function(res)&#123; alert(res); &#125;, &#125;);&#125;function delAccount()&#123; var datas = getDatas(); $.ajax(&#123; url: \"account/\" + datas.id, type: \"delete\", success: function(res)&#123; alert(res); &#125;, &#125;);&#125;function updateAccount()&#123; var datas = getDatas(); $.ajax(&#123; url:\"account/\"+ datas.id, type:\"put\", data:JSON.stringify(datas), contentType:\"application/json\",//以json字符串提交数据 success: function(res)&#123; alert(res); &#125;, &#125;);&#125;&lt;/script&gt; 注意： PUT需要以json字符串提交数据contentType:&quot;application/json&quot; @RequestBody将接收的ajax请求的json字符串写入Account对象中 JSON.stringify()：将json对象转换为json字符串 JSON.parse()：将json字符串转换为json对象","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"Spring","slug":"Spring","permalink":"http://chaooo.github.io/tags/Spring/"}]},{"title":"【Spring】面向切面编程(AOP模块)","date":"2018-04-21T14:48:36.000Z","path":"article/20180421.html","text":"AOP（Aspect Oriented Programming）：面向切面编程，它是面向对象基础上发展来的技术，是面向对象更高层次的应用，它可以在不修改原有代码的情况给组件增强功能。 AOP涉及到的概念 编写AOP程序步骤 切点表达式 通知的五种类型 标注形式AOP步骤 AOP 通知对应的标注 @Around具体用法 异常通知 1. AOP涉及到的概念 Aspect：切面，用来封装共通业务逻辑；其类叫切面类，其创建的对象叫切面对象。 JoinPoint：连接点，用来封装切面所要嵌入的位置信息的对象，（主要封装了方法信息） Pointcut：切点，是一堆连接点的集合，后面会使用切点表达式来表述切点 Target：目标，要被切入共通业务逻辑的对象 Proxy：代理，被增强之后的目标对象就是代理 Advice：通知，时机，切面逻辑在目标方法执行之前调用，执行之后调用，目标方法前后，目标方法最终，目标方法出现异常 2. 编写AOP程序步骤 编写一个Sevice类，里面有登录和注册两个方法，然后使用Spring容器获取Service类对应的对象，调用登录和注册方法 在不修改登录和注册原有代码的情况下，让两个方法调用前输出****** 添加aop的jar包到lib 编写一个类，定义共同业务逻辑 配置aplicationContext.xml，创建切面对象 配置aop:config，切面–&gt;通知–&gt;切点 3. 切点表达式 Bean限定表达式 bean(&quot;容器内组件id&quot;)，支持通配符，如：bean(&quot;*Dao&quot;)，`bean(“acc“)` 类型限定表达式 within(&quot;包名.类型&quot;)，要求表达式最后一部分必须是类型，如：com.dao.impl.类型，com.dao.impl.*，com.dao..* 方法限定表达式 execution(&quot;表达式&quot;)，可以有 权限修饰 返回值类型 方法名(参数类型)throws 异常，必须有:返回值类型 方法名() 4. 通知的五种类型 &lt;aop:before：前置通知，目标方法执行之前调用 &lt;aop:after-returning：后置通知，目标方法执行之后调用（目标方法出异常，通知方法无法执行） &lt;aop:after-throwing：异常通知，目标方法出异常才调用 &lt;aop:after：最终通知，目标方法之后一定会执行 &lt;aop:around：环绕通知，目标方法执行前后都调用 5. 标注形式AOP步骤 建项目，添加jar包(ioc,aop)，src下添加配置文件 编写一个Sevice类，里面有登录和注册两个方法 开启组件扫描，在类上打对应标注，创建Spring容器 测试逻辑 定义一个切面类，定义切面方法，并在容器中使用标注@Component创建切面对象 开启标注形式aop：&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true|false&quot; /&gt; 使用切面对应的标注以及通知对应的标注结合切点表达式完成aop： @Aspect，@Before... 6. AOP 通知对应的标注 @Before：前置通知，目标方法执行之前调用 @AfterReturning：后置通知，目标方法执行之后调用（目标方法出异常，通知方法无法执行） @AfterThrowing：异常通知，目标方法出异常才调用 @After：最终通知，目标方法之后一定会执行 @Around：环绕通知，目标方法执行前后都调用 7. @Around具体用法@Around既可以在目标方法之前织入增强动作，也可以在执行目标方法之后织入增强动作； 12345678@Around(\"within(com..*)\")public Object showAfterDate(ProceedingJoinPoint pjp) throws Throwable &#123; System.out.println(\"开始时间：\" + new Date().getTime()); Object obj = pjp.proceed(); System.out.println(\"结束时间：\" + new Date().getTime()); System.out.println(\"执行时间：\"date2.getTime() - date.getTime()); return obj;&#125; 虽然Around功能强大，但通常需要在线程安全的环境下使用。因此，如果使用普通的Before、AfterReturing增强方法就可以解决的事情，就没有必要使用Around增强处理了。 8. 异常通知JoinPoint可以获取出异常的方法 1234@AfterThrowing(value=\"within(com..*)\", throwing=\"e\")public void processException(JoinPoint jp, Exception e) &#123; System.out.println(\"捕获到异常\" + jp.getSignature() + \":\\n【\" + e +\"】\");&#125;","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"Spring","slug":"Spring","permalink":"http://chaooo.github.io/tags/Spring/"}]},{"title":"【Spring】事务管理","date":"2018-04-15T14:47:30.000Z","path":"article/20180415.html","text":"事务的基本概念：事务指的是逻辑上的一组操作，这组操作要么全部成功，要么全部失败。 事务的特性(ACID) Spring提供事务管理的3个接口 TransactionDefinition接口 TransactionStatus接口 PlatformTransactionManager接口（事务管理器） 基于AspectJ的xml方式的声明式事务管理 基于注解的声明式事务管理 1. 事务的特性(ACID) 事务的特性：原子性、一致性、隔离性、持久性。 原子性（Atomicity）：事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 一致性（Consistency）：事务前后数据的完整性必须保持一致。 隔离性（Isolation）：多个用户并发访问数据库时，一个用户的事务不能被其他用户的事务所干扰，多个并发事务之间数据要相互隔离（数据库中相应的数据隔离级别，通过它避免事务间的冲突）。 持久性（Durability）:一个事务一旦被提交，它对数据库中数据的改变是永久性的，即使数据库发生故障也不应该对其有任何影响。 2. Spring提供事务管理的3个接口： PlatformTransactionManager：事务管理器，用来管理事务的接口，定义了事务的提交、回滚等方法。 TransactionDefinition：事务定义信息（隔离级别、传播行为、是否超时、是否只读）。 TransactionStatus：事务具体运行状态（事务是否提交，事务是否有保存点，事务是否是新事物等状态）。 Spring事务管理时，这三个接口是有联系的，Spring首先会根据事务定义信息TransactionDefinition获取信息,然后由事务管理器PlatformTransactionManager进行管理，在事务管理过程中，会产生一个事务的状态，这个状态就保存在事务具体运行状态TransactionStatus中了。 3. TransactionDefinition接口TransactionDefinition定义事务隔离级别(Isolation)、定义事务传播行为(Propagation) 如果不考虑隔离性,就会引发安全问题：脏读、不可重复读、以及虚读或者叫做幻读。 事务的传播行为：解决业务层方法之间相互调用时,使用何种事务的问题。 3.1 安全问题 脏读：一个事务读取了另一个事务改写但还未提交的数据，如果这些数据被回滚，则读到的数据是无效的。 不可重复读：同一事务中，多次读取同一数据返回的结果有所不同（读取到另一个事务已经提交的更新的数据）。 幻读：一个事务读取了几行记录后，另一个事务插入一些记录，幻读就发生了。再后来的查询中，第一个事务就会发现有些原来没有的记录。 3.2 事务的隔离级别(Isolation)： READ_UNCOMMITED(读未提交)：允许读取未提交的改变了的数据（最低级别），可能导致脏读、不可重复读、幻读等。 READ_COMMITED(读提交)：允许在并发事务提交后读取，可防止脏读，但可能导致不可重复读、幻读。 REPEATABLE_READ(可重复读)：多次读取相同字段是一致的,除非数据被事务本身改变，可防止脏读、不可重复读，但可能导致幻读。 SERIALIZABLE(序列化)：事务是串行的,完全服从ACID的级别隔离，确保不发生脏读、不可重复读、幻读等。这在所有的隔离基本中是最慢的，它是典型的通过完全锁定在事务中涉及的数据表来完成的。 DEFAULT(Spring提供)：使用数据库默认的隔离级别（Mysql默认采用REPEATABLE_READ隔离级别，Oracle默认采用READ_COMMITTED隔离级别）。 3.3 事务的传播特性(Propagation)： 第一类：运行在同一个事务 REQUIRED：默认，支持当前事务，如果当前没有事务，就新建一个事务。 SUPPORTS：支持当前事务，如果当前没有事务，就不使用事务(以非事务方式执行) MANDATORY：支持当前事务，如果当前没有事务，就抛出异常 第二类：运行在不同事务 REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起 NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起 NEVER：以非事务方式执行，如果当前存在事务，则抛出异常 第三类：嵌套执行–即外层事务如果失败，内层事务要么回滚到保存点要么回滚到初始状态 NESTED：如果当前事务存在，则嵌套事务执行 4. TransactionStatus接口平台事务管理器(PlatformTransactionManager)会根据TransactionDefinition中定义的事务信息(包括隔离级别、传播行为)来进行事务的管理,在管理的过程中事务可能产生了保存点或事务是新的事务等情况,那么这些信息都会记录在TransactionStatus的对象中。 5. PlatformTransactionManager接口（事务管理器）该接口有许多实现类例如：DataSourceTransactionManager、HibernateTransactionManager等。 5.1 Spring支持两种方式事务管理： 编程式事务管理 手动编写代码进行事务管理，通过TransactionTemlate手动管理事务（很少使用） 声明式事务管理 基于TransactionProxyFactoryBean的方式（很少使用） 基于AspectJ的xml方式，配置稍复杂,但清晰可见事务使用范围（经常使用） 基于注解的方式，配置简单,需要在使用事务管理的业务层类或方法添加@Transactional注解（经常使用） 6. 基于AspectJ的xml方式的声明式事务管理123456789101112131415161718192021222324&lt;!-- 配置事务管理器 --&gt;&lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt; &lt;property name=\"dataSource\" ref=\"jdbc连接池对象id\"/&gt;&lt;/bean&gt;&lt;!-- 配置事务的通知（事务的增强） --&gt;&lt;tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\"&gt; &lt;tx:attributes&gt; &lt;!-- propagation:事务传播行为 isolation:事务的隔离级别 read-only:只读 rollback-for:发生哪些异常回滚 no-rollback-for:发生哪些异常不回滚 timeout:过期信息 --&gt; &lt;tx:method name=\"transfer\" propagation=\"REQUIRED\" isolation=\"DEFAULT\" read-only=\"false\" rollback-for=\"\" timeout=\"\" no-rollback-for=\"\"/&gt; &lt;/tx:attributes&gt;&lt;/tx:advice&gt;&lt;!-- 配置切面 --&gt;&lt;aop:config&gt; &lt;!-- 配置切入点 --&gt; &lt;aop:pointcut id=\"pointcut1\" expression=\"execution(*cn.muke.spring.demo3.AccountService+.*(.))\"/&gt; &lt;!-- 配置切面 --&gt; &lt;aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"pointcut1\"/&gt;&lt;/aop:config&gt; 7. 基于注解的声明式事务管理 配置事务管理器 1234567&lt;!-- 1.创建一个事务管理器对象 --&gt;&lt;bean id=\"事务管理器id\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt; &lt;property name=\"dataSource\" ref=\"jdbc连接池对象id\"/&gt;&lt;/bean&gt;&lt;!-- 2.开启声明式事务 --&gt;&lt;tx:annotation-driven transaction-manager=\"事务管理器id\" proxy-target-class=\"true|false\" /&gt; transaction-manager：指定事务管理器(由框架提供类，在容器中创建这个对象并依赖于dataSource) proxy-target-class：决定是基于接口的还是基于类的代理被创建；为true则是基于类的代理将起作用(需要cglib库)，为false(默认)则标准的JDK 基于接口的代理将起作用。 使用，在类上或者方法上标注@Transactional 123456@Transactional( rollbackFor=&#123;Exception.class&#125;, readOnly=false, isolation=Isolation.DEFAULT, propagation=Propagation.REQUIRED)public void transfer()&#123;..&#125; @Transactional的属性 rollbackFor：设置检查异常也回滚 noRollbackFor：指定运行时异常不回滚 readOnly： 只读属性，当事务方法都是select语句时，可以将readOnly设置成true优化方法，提高方法执行效率。当有DML操作时这个属性必须时false。 isolation：事务的隔离级别(枚举:DEFAULT,READ_UNCOMMITTED,READ_COMMITTED,REPEATABLE_READ,SERIALIZABLE) propagation：事务的传播特性(枚举:REQUIRED,SUPPORTS,MANDATORY,REQUIRES_NEW,NOT_SUPPORTED,NEVER) Spring中事务管理器默认值针对运行时异常回滚，对检查异常不回滚。","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"Spring","slug":"Spring","permalink":"http://chaooo.github.io/tags/Spring/"}]},{"title":"【Spring】JDBC详解","date":"2018-04-09T14:46:07.000Z","path":"article/20180409.html","text":"Spring对JDBC做了简化和封装；简化了DAO实现类编写；提供了基于AOP的声明式事务管理；对JDBC中异常做了封装，把原来检查异常封装成了继承自RuntimeException的异常（DataAcessException）。 数据源配置 JdbcTemplate的使用 通过实现RowMapper接口把查询结果映射到Java对象 JdbcTemplate对象的主要方法 异常转换 1. 数据源配置1234567891011121314151617@Configuration@ComponentScan(\"com.jdbc\")public class MyConfiguration &#123; @Bean public DataSource mysqlDataSource() &#123; BasicDataSource dataSource = new BasicDataSource(); dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\"); dataSource.setUrl(\"jdbc:mysql://localhost:3306/test\"); dataSource.setUsername(\"root\"); dataSource.setPassword(\"123456\"); return dataSource; &#125; @Bean public JdbcTemplate jdbcTemplate() &#123; return new JdbcTemplate(mysqlDataSource()); &#125;&#125; 也可以使用XML配置来实现配置效果： 12345678910111213&lt;!-- 配置连接池对象 --&gt;&lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"&gt; &lt;property name=\"driverClassName\" value=\"com.mysql.cj.jdbc.Driver\"&gt;&lt;/property&gt; &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/test\"&gt;&lt;/property&gt; &lt;property name=\"username\" value=\"root\"&gt;&lt;/property&gt; &lt;property name=\"password\" value=\"123456\"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 定义jdbcTemplate对象 --&gt;&lt;bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\"&gt; &lt;constructor-arg index=\"0\" ref=\"dataSource\"&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;&lt;!-- 开启组件扫描 --&gt;&lt;context:component-scan base-package=\"com.jdbc\"&gt;&lt;/context:component-scan&gt; 2. JdbcTemplate的使用JdbcTemplate模板是Spring JDBC模块中主要的API，它提供了常见的数据库访问功能。JdbcTemplate类执行SQL查询、更新语句和存储过程调用，执行迭代结果集和提取返回参数值。 基本的查询： 1234567891011//DAO实现类@Repository(\"empDao\")public class EmpDaoImpl implements EmpDao &#123; @Autowired private JdbcTemplate jdbcTemplate; @Override public int getCount() &#123; String sql = \"select count(*) from emp32\"; return jdbcTemplate.queryForObject(sql, Integer.class); &#125;//... 3. 通过实现RowMapper接口把查询结果映射到Java对象12345678910public class EmpRowMapper implements RowMapper&lt;Emp&gt; &#123; @Override public Emp mapRow(ResultSet rs, int n) throws SQLException &#123; return new Emp( rs.getInt(\"id\"), rs.getString(\"name\"), rs.getDouble(\"salary\") ); &#125;&#125; 1234567891011//DAO实现类@Repository(\"empDao\")public class EmpDaoImpl implements EmpDao &#123; @Autowired private JdbcTemplate jdbcTemplate; @Override public Emp getEmpById(int id) &#123; String sql = \"select * from emp32 where id=?\"; return jdbcTemplate.queryForObject(sql, new EmpRowMapper(), id); &#125;//... 4. JdbcTemplate对象的主要方法 queryForInt()： 12345//查询一个整数类型int count = jdbcTemplateObject.queryForInt(\"select count(*) from emp32\");//一个使用绑定变量的简单查询int age = jdbcTemplateObject.queryForInt(\"select age from emp32 where id = ?\", new Object[]&#123;10&#125;); queryForLong()： 12//查询一个 long类型long count = jdbcTemplateObject.queryForLong(\"select count(*) from emp32\"); queryForObject()： 1234567891011//查询字符串String SQL = \"select name from emp32 where id = ?\";String name = jdbcTemplateObject.queryForObject(SQL, new Object[]&#123;10&#125;, String.class);//查询并返回一个对象：String SQL = \"select * from emp32 where id = ?\";emp32 student = jdbcTemplateObject.queryForObject(SQL, new Object[]&#123;10&#125;, new EmpRowMapper());//查询并返回多个对象：String SQL = \"select * from emp32\";List&lt;emp32&gt; students = jdbcTemplateObject.query(SQL, new EmpRowMapper()); update()： 1234567891011//在表中插入一行：String SQL = \"insert into emp32 (name, age) values (?, ?)\";jdbcTemplateObject.update( SQL, new Object[]&#123;\"Zara\", 11&#125; );//更新表中的一行：String SQL = \"update emp32 set name = ? where id = ?\";jdbcTemplateObject.update( SQL, new Object[]&#123;\"Zara\", 10&#125; );//从表中删除一行：String SQL = \"delete emp32 where id = ?\";jdbcTemplateObject.update( SQL, new Object[]&#123;20&#125; ); execute()：执行DDL语句 12345678String SQL = \"CREATE TABLE emp32( id INT AUTO_INCREMENT, NAME VARCHAR(30), salary DOUBLE DEFAULT 5000, CONSTRAINT student_id_pk PRIMARY KEY(id), CONSTRAINT student_name_uk UNIQUE(NAME))\";jdbcTemplateObject.execute( SQL ); 5. 异常转换 Spring提供了自己的开箱即用的数据异常分层——DataAccessException作为根异常，它负责转换所有的原始异常。 所以开发者无需处理底层的持久化异常，因为Spring JDBC模块已经在DataAccessException类及其子类中封装了底层的异常。 这样可以使异常处理机制独立于当前使用的具体数据库。 除了默认的SQLErrorCodeSQLExceptionTranslator类，开发者也可以提供自己的SQLExceptionTranslator实现。 例如：自定义SQLExceptionTranslator实现的简单例子，当出现完整性约束错误时自定义错误消息： 12345678910public class CustomSQLErrorCodeTranslator extends SQLErrorCodeSQLExceptionTranslator &#123; @Override protected DataAccessException customTranslate (String task, String sql, SQLException sqlException) &#123; if (sqlException.getErrorCode() == -104) &#123; return new DuplicateKeyException(\"完整性约束冲突\", sqlException); &#125; return null; &#125;&#125;","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"Spring","slug":"Spring","permalink":"http://chaooo.github.io/tags/Spring/"}]},{"title":"【Spring】IoC注解实现","date":"2018-04-03T14:44:07.000Z","path":"article/20180403.html","text":"回顾xml方式管理Java Bean 注解方式管理Java Bean 注解方式Bean的注入 注解方式Bean的常用配置项(作用域,生命周期,懒加载等) 1. 回顾xml方式管理Java Bean 将一个Bean交由Spring创建并管理 &lt;baen id=&quot;bean&quot; class=&quot;包名.Bean&quot;&gt;&lt;/baen&gt; 获取Spring上下文 ApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;); 获取Bean Bean bean = app.getBean(&quot;bean&quot;, Bean.class); 2. 注解方式管理Java Bean一、创建一个class配置文件 12345678@Configurationpublic class MyConfiguration&#123; //将一个Bean交由Spring创建并管理 @Bean(name=\"bean1\") public Bean bean()&#123; return Bean = new Bean(); &#125;&#125; 二、获取Spring上下文 12ApplicationContext context = new AnnotationConfigApplicationContext(MyConfiguration.class); 三、获取Bean 1Bean1 bean1 = context.getBean(\"bean1\", Bean1.class); 2.1 简化注解方式的步骤1一、 开启组件扫描（去掉上述步骤1中MyConfiguration实例化Bean的方法） 123@Configuration //该注解可理解当前class等同于一个xml文件@ComponentScan(\"包路径\") //开启组件扫描public class MyConfiguration&#123;&#125; 在applicationContext.xml中开启组件扫描方式&lt;context:component-scan base-package=&quot;包路径&quot;/&gt;。 二、 将交由Spring管理的类加上@Component注解，或（@Repository，@Controller，@Service） 1234@Component(\"bean1\")//通过构造方法实例化Bean1public class Bean1&#123; //...&#125; @Component是通用注解，其他三个注解是这个注解的拓展，并且具有了特定的功能 @Repository注解在持久层中，具有将数据库操作抛出的原生异常翻译转化为spring的持久层异常的功能。 @Controller层是spring-mvc的注解，具有将请求进行转发，重定向的功能。 @Service层是业务逻辑层注解，这个注解只是标注该类处于业务逻辑层。 2.2 Bean别名一、 xml形式：通过name属性或alias标签 12&lt;bean id=\"bean1\" name=\"bean2,bean3\" class=\"com...Bean\"/&gt;&lt;alias name=\"bean1\" alias=\"bean4\"/&gt; 二、 注解形式 1234567@Configurationpublic class MyConfiguration&#123; @Bean(name=&#123;\"bean1\",\"bean2\",\"bean3\"&#125;) public Bean1 bean1()&#123; return Bean1 = new Bean1(); &#125;&#125; 注意：@Component只能指定一个名字，@Component默认值为类名首字母小写，也可以自定义，如:@Component(&quot;bean1&quot;)； 默认@scope为singleton单例，也可以进行指定 3. 注解方式Bean的注入一、 @Value(&quot;值&quot;)：常用于基本数据类型值注入，值可用EL表达式。 123456@Componentpublic class Player&#123; @Value(\"张三\") private String name; //...&#125; 二、 @Autowired：常用于复杂类型值的注入 + @Autowired：可以用在成员变量，setter方法，构造方法上；优先按照类型进行匹配，匹配不上启用名字进行匹配。 + @Qualifier(&quot;名字&quot;) 根据名字匹配，配合@Autowired，不能用在构造方法上；@Qualifier指定对象必须存在，否则程序报错，可以使用@Autowired的required属性来解除这种强依赖，@Autowired(required=false):尽量去找，组件不存在也不报错。 + @Autowired的原理：在启动spring IoC时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的bean，并装配给该对象的属性 1234567891011121314151617181920212223@Componentpublic class Player&#123; @Value(\"张三\") private String name; /** 用于成员变量 */ //@Autowired //@Qualifier(\"card1\") private Card card; /** 用于构造方法 */ //@Autowired public Player(Card card) &#123; super(); this.card = card; &#125; /** 用于setter方法 */ @Autowired(required=false) public void setCard(Card card) &#123; this.card = card; &#125;&#125; 三、 @Resource：常用于复杂类型值的注入 + @Resource：用在成员变量和setter方法上，是JDK1.6支持的注解，优先按照名字匹配，可以通过@Resource(name=&quot;名&quot;)指定；如果没有指定name属性，用在成员变量上默认取字段名，用在setter方法上默认取属性名进行装配。名字匹配不上，会动用类型匹配。但注意：如果name属性一旦指定，就只会按照名称进行装配。 123456@Componentpublic class Player&#123; @Resource(name=\"card\") private Card card; //...&#125; 集合类型值注入实例 123456789101112131415161718@Configuration@ComponentScan(\"包路径\")public class MyConfiguration&#123; @Bean public List&lt;String&gt; list()&#123; List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(\"aaa\"); list.add(\"bbb\"); return list; &#125;&#125;@Componentpublic class Player&#123; @Autowired private List&lt;String&gt; list; //...&#125; 4. 注解方式Bean的常用配置项(作用域,生命周期,懒加载等)4.1 注解方式Bean的作用域12345678910111213@Configuration@ComponentScan(\"包路径\")public class MyConfiguration&#123; @Bean(name=\"bean1\") @Scope(\"singleton\") public Bean1 bean1()&#123; return Bean1 = new Bean1(); &#125;&#125;@Component@Scope(\"singleton\")public class Bean&#123;&#125; 4.2 注解方式Bean的懒加载1234567891011121314@Configuration@ComponentScan(\"包路径\")@Lazy //相当于xml中default-lazy-init=\"true\"public class MyConfiguration&#123; @Bean(name=\"bean1\") @Lazy public Bean1 bean1()&#123; return Bean1 = new Bean1(); &#125;&#125;@Component@Lazypublic class Bean&#123;&#125; 4.3 Bean初始化和销毁一、实现InitializingBean和DisposableBean接口（xml和注解都支持）。 12345678910111213public class Bean implements InitializingBean&#123; @Override public void afterPropertiesSet()&#123; //执行一些初始化后的工作 &#125;&#125;public class Bean implements DisposableBean&#123; @Override public void destroy()&#123; //执行一些销毁前的工作 &#125;&#125; 二、xml形式 12345678public class Bean&#123; public void init()&#123; //执行一些初始化后的工作 &#125; public void cleanup()&#123; //执行一些销毁前的工作 &#125;&#125; 123&lt;bean id=\"bean\" class=\"example.Bean\" init-method=\"init\" destroy-method=\"cleanup\"&gt;&lt;/bean&gt; 三、注解形式1，@Bean(initMethod=”init”, destroyMethod=”cleanup”) 12345678910111213141516public class Bean&#123; public void init()&#123; //执行一些初始化后的工作 &#125; public void cleanup()&#123; //执行一些销毁前的工作 &#125;&#125;@Configurationpublic class MyConfiguration&#123; @Bean(initMethod=\"init\", destroyMethod=\"cleanup\") public Bean bean()&#123; return new Bean(); &#125;&#125; 四、注解形式2，添加@PostConstruct，@PreDestroy 1234567891011@Componentpublic class Bean&#123; @PostConstruct public void init()&#123; //执行一些初始化后的工作 &#125; @PreDestroy public void cleanup()&#123; //执行一些销毁前的工作 &#125;&#125;","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"Spring","slug":"Spring","permalink":"http://chaooo.github.io/tags/Spring/"}]},{"title":"【Spring】IoC控制反转","date":"2018-03-27T14:38:23.000Z","path":"article/20180327.html","text":"Spring是一个开源的轻量级控制反转(IOC)和面向切面(AOP)的容器框架，它主要是为了解决企业应用开发的复杂性而诞生的，但现在已不止应用于企业服务。 IOC：Inversion Of Control（控制反转），构成Spring框架的核心基础 DAO：Data Access Object（数据 访问对象），Spring对JDBC访问数据库的简化和封装 WebMVC：Spring对Web部分(jsp,servlet,ajax)以及MVC设计模式的支持 AOP：是在面向对象的基础上发展来的更高级的技术 ORM：Object Relation Mapping（对象关系映射），以面向对象的思想来访问数据库 JEE：Java的消息服务，远程调用，邮件服务等 IoC（控制反转） Spring容器初始化 spring容器创建对象(实例化) Spring DI注入的实现 DI的参数的注入 Bean的常用配置项(作用域,生命周期,懒加载等) 1. IoC（控制反转）IoC：(Inversion of Control),控制反转：控制权的转移，应用程序本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护。 控制：控制对象的创建及销毁（生命周期） 反转：将对象的控制权交给IoC容器 DI：(Dependence Injection),依赖注入(注射)是IoC控制反转的一种具体实现方法，通过参数的方式从外部传入依赖，将依赖的创建由主动变为被动。 简单来说， 当 组件A 依赖 组件B 时，IoC容器通过设置A的属性，把B传入的过程叫依赖注入 IoC的好处：降低了组件的依赖程度，让组件之间变成低耦合设计。 2. Spring容器初始化任何Java类都可以在Spring容器中创建对象 并交由容器来进行管理和使用，Spring容器 实现了 IOC 和 AOP 机制，Spring容器的类型是 BeanFactory 或者 ApplicationContext BeanFactory提供配置结构和基本功能，加载并初始化Bean ApplicationContext保存了Bean对象并在Spring中被广泛使用 2.1 初始化ApplicationContext的几种方式： 本地文件 12FileSystemXmlApplicationContext app = new FileSystemXmlApplicationContext(\"F:/workspace/appcontext.xml\"); Classpath 12ClassPathXmlApplicationContext app = new ClassPathXmlApplicationContext(\"classath:applicationContext.xml\"); Web应用中依赖Servlet或Listener 123&lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt; 2.2 Spring容器完成IOC的步骤 建立一个动态的Web项目，导入jar包(ioc) 拷贝Spring容器配置文件到src(Source classpath)下 在spring容器配置文件中配置文件中配置一个对象的创建 &lt;baen id=&quot;对象引用名&quot; class=&quot;包名.类名&quot;&gt;&lt;/baen&gt; 写一个测试类 创建Spring容器对象，然后从容去中获取创建的组件 applicationContext.getBean(&quot;对象引用名&quot;, 类名.class) 3. spring容器创建对象(实例化)3.1 构造器方式实例化 配置文件：&lt;baen id=&quot;对象引用名&quot; class=&quot;包名.类名&quot;&gt;&lt;/baen&gt; applicationContext.getBean(&quot;对象引用名&quot;, 类名.class)默认调用类型对应的无参构造方法1&lt;bean id=\"date\" class=\"java.util.Date\"&gt;&lt;/bean&gt; 12ApplicationContext app = new ClassPathXmlApplicationContext(\"applicationContext.xml\");Date date = app.getBean(\"date\", Date.class); 3.2 静态工厂方法实例化 使用一个类型对应的静态方法来获取这个类型的对象 &lt;bean id=&quot;对象引用名&quot; class=&quot;包名.工厂类名&quot; factory-method=&quot;静态方法名&quot;&gt;&lt;/bean&gt;1&lt;bean id=\"cal\" class=\"java.util.Calendar\" factory-method=\"getInstance\"&gt;&lt;/bean&gt; 12ApplicationContext app = new ClassPathXmlApplicationContext(\"applicationContext.xml\");Calendar cal = app.getBean(\"cal\", Calendar.class); 3.3 实例工厂方法实例化 使用一个已经存在的对象，来调用对应的成员方法来获取另一个类型的对象 &lt;bean id=&quot;对象的引用名&quot; factory-bean=&quot;工厂方法的id&quot; factory-method=&quot;成员方法名&quot;&gt;&lt;/bean&gt;12&lt;bean id=\"cal\" class=\"java.util.Calendar\" factory-method=\"getInstance\"&gt;&lt;/bean&gt;&lt;bean id=\"time\" factory-bean=\"cal\" factory-method=\"getTime\"&gt;&lt;/bean&gt; 12ApplicationContext app = new ClassPathXmlApplicationContext(\"applicationContext.xml\");Date time = app.getBean(\"time\", Date.class); 4. Spring DI注入的实现Spring注入是指在启动Spring容器加载bean配置的时候，完成对变量的赋值行为。Bean属性值：基本数据类型用value，复杂数据类型用ref(传入组件id)。DI的实现方法：设值注入(setter注入)、构造注入、自动化注入(自动装配) 实例：准备两个实体类Card，Player：Card有suit(花色)和point(点数)，Player有name(名字)和card(牌)。 4.1 设值注入property(属性)的name参考对象set方法 123456789&lt;bean id=\"card\" class=\"bean.Card\"&gt; &lt;property name=\"suit\" value=\"黑桃\"&gt;&lt;/property&gt; &lt;property name=\"point\" value=\"A\"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- Player参考其setCard方法 --&gt;&lt;bean id=\"player\" class=\"bean.Player\"&gt; &lt;property name=\"name\" value=\"玩家1\"&gt;&lt;/property&gt; &lt;property name=\"card\" ref=\"card\"&gt;&lt;/property&gt;&lt;/bean&gt; 4.2 构造注入（Constructor arguments）构建对象时赋值，参考对应构造方法（name为构造方法参数名，也可以用index:0开始） 123456789&lt;bean id=\"card2\" class=\"bean.Card\"&gt; &lt;constructor-arg name=\"suit\" value=\"红桃\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg name=\"point\" value=\"K\"&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;&lt;!-- Player参考其构造方法Player(name,card) --&gt;&lt;bean id=\"player2\" class=\"bean.Player\"&gt; &lt;constructor-arg name=\"name\" value=\"玩家2\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg name=\"card\" ref=\"card2\"&gt;&lt;/constructor-arg&gt;&lt;/bean&gt; 4.3 自动化注入（Autowiring mode）一般用来解决复杂值的注入，可以通过bean标记的autowrie属性(autowire=”byName/byType/constructor”)指定对应的自动化的注入方式 1&lt;bean id=\"bean1\" class=\"example.exampleBean\" autowire=\"\" /&gt; 自动装配autowire属性 有五种自动装配的方式： No：默认，需要通过ref属性来连接bean。 byName： 与当前组件属性名 和 容器中其他组件的id 一致的bean，自动装配。 1234567&lt;bean id=\"card3\" class=\"bean.Card\"&gt; &lt;property name=\"suit\" value=\"方片\"&gt;&lt;/property&gt; &lt;property name=\"point\" value=\"J\"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- Player中必须要有setCard3 方法(setter方法名要与注入组件id对应) 否则Spring会将id为card的bean通过setter方法进行自动装配(若有setCard方法)--&gt;&lt;bean id=\"player3\" class=\"bean.Player\" autowire=\"byName\"&gt;&lt;/bean&gt; byType：与当前组件属性类型 和 容器中其他组件的class 一致的bean，自动装配，如果存在多个则抛出异常。 123456&lt;bean class=\"bean.Card\"&gt; &lt;property name=\"suit\" value=\"方片\"&gt;&lt;/property&gt; &lt;property name=\"point\" value=\"J\"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- Spring会将类型为Card的bean通过setter方法进行自动装配(setter参数类型与注入组件类型对应) --&gt;&lt;bean id=\"player4\" class=\"bean.Player\" autowire=\"byType\"&gt;&lt;/bean&gt; constructor：与当前组件 构造方法的参数 容器中其他组件的id 一致的bean，自动装配，不匹配再和 容器中其他组件的class 一致的bean，自动装配（如果存在多个则不装配），如果构造方法中第一个参数不匹配，则终止后续赋值。 123456&lt;bean id=\"card5\" class=\"bean.Card\"&gt; &lt;property name=\"suit\" value=\"方片\"&gt;&lt;/property&gt; &lt;property name=\"point\" value=\"J\"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- Player添加构造方法Player(Card card5)，构造方法参数名与注入组件id对应，不匹配再用构造方法参数类型和注入组件class匹配，如果存在多个则不装配 --&gt;&lt;bean id=\"player5\" class=\"bean.Player\" autowire=\"constructor\"&gt;&lt;/bean&gt; autodetect：如果有默认的构造器，则通过constructor方式进行自动装配，否则使用byType方式进行自动装配。 5. DI的参数的注入Bean对象 注入类型 可以是 字符串、集合、bean对象。 5.1 注入字符串12345&lt;bean id=\"msg\" class=\"com.xdl.bean.OracleDataSource\"&gt; &lt;property name=\"username\" value=\"scott\"/&gt; &lt;property name=\"password\"&gt;&lt;value&gt;tiger&lt;/value&gt;&lt;/property&gt; &lt;property name=\"msg\"&gt;&lt;null/&gt;&lt;/property&gt;&lt;/bean&gt; 5.2 注入集合12345678910111213141516171819202122232425262728&lt;!-- 1. 定义list集合 --&gt;&lt;property name=\"friends\"&gt; &lt;list&gt; &lt;value&gt;值1&lt;/value&gt; &lt;value&gt;值2&lt;/value&gt; &lt;/list&gt;&lt;/property&gt;&lt;!-- 2. 定义set集合 --&gt;&lt;property name=\"friends2\"&gt; &lt;set&gt; &lt;value&gt;值1&lt;/value&gt; &lt;value&gt;值2&lt;/value&gt; &lt;/set&gt;&lt;/property&gt;&lt;!-- 3. 定义map集合 --&gt;&lt;property name=\"phones\"&gt; &lt;map&gt; &lt;entry key=\"1594546454\" value=\"值1\"&gt;&lt;/entry&gt; &lt;entry key=\"1594546464\" value=\"值2\"&gt;&lt;/entry&gt; &lt;/map&gt;&lt;/property&gt;&lt;!-- 4. props集合 --&gt;&lt;property name=\"phones2\"&gt; &lt;props&gt; &lt;prop key=\"164545564\"&gt;值1&lt;/prop&gt; &lt;prop key=\"164546756\"&gt;值2&lt;/prop&gt; &lt;/props&gt;&lt;/property&gt; 5.3 集合参数的单独定义注入集合–引入：List、Set、Map、Properties集合也可以先独立定义，再注入的方式使用，这样便于重复利用。 123456789101112131415161718192021222324&lt;!-- 1. 定义list集合 --&gt;&lt;util:list id=\"ref_friends\"&gt; &lt;value&gt;值1&lt;/value&gt; &lt;value&gt;值2&lt;/value&gt;&lt;/util:list&gt;&lt;!-- 2. 定义set集合 --&gt;&lt;util:set id=\"ref_buddys\"&gt; &lt;value&gt;值&lt;/value&gt; &lt;value&gt;值2&lt;/value&gt;&lt;/util:set&gt;&lt;!-- 3. 定义map集合 --&gt;&lt;util:map id=\"ref_phones\"&gt; &lt;entry key=\"159454644\" value=\"值1\"&gt;&lt;/entry&gt; &lt;entry key=\"1594546454\" value=\"值2\"&gt;&lt;/entry&gt;&lt;/util:map&gt;&lt;!-- 4. props集合 --&gt;&lt;util:properties id=\"ref_phonePro\"&gt; &lt;prop key=\"164545564\"&gt;值1&lt;/prop&gt; &lt;prop key=\"16454675665564\"&gt;值2&lt;/prop&gt;&lt;/util:properties&gt;&lt;util:properties id=\"ref_db\" location=\"classpath:db.properties\"&gt;&lt;/util:properties&gt;&lt;!-- 使用 --&gt;&lt;property name=\"phones\" ref=\"ref_phones\"&gt;&lt;/property&gt;&lt;property name=\"phones2\" ref=\"ref_phonePro\"&gt;&lt;/property&gt; 5.3 Spring的’EL’表达式它和EL在语法上很 相似，可以读取一个bean对象/集合中的数据。Spring EL 采用 #{Sp Expression Language} 即 #{spring表达式}，可在xml配置和注解中使用。 Spring EL配置连接池对象12345678&lt;!-- 引入数据库配置文件 --&gt;&lt;util:properties id=\"db\" location=\"classpath:db.properties\"/&gt;&lt;!-- 配置连接池 --&gt;&lt;bean id=\"dataSource\" class=\"com.xdl.bean.OracleDataSource\"&gt; &lt;property name=\"username\" value=\"#&#123;db.name&#125;\"/&gt; &lt;property name=\"password\" value=\"#&#123;db.password&#125;\"/&gt; &lt;property name=\"url\" value=\"#&#123;db.url&#125;\"/&gt;&lt;/bean&gt; 6. Bean的常用配置项(作用域,生命周期,懒加载等)Bean的常用配置项：Id、Class、Scope、Constructor arguments、Propertties、Autowiring mode、Lazy-initialization mode、Initialization/destruction method 6.1 Bean作用域（Scope） Singleton作用域 单例，指一个Bean容器只存在一份 prototype作用域 每次请求(使用)创建新的实例，destroy方式不生效 Web环境作用域： request作用域：每个request请求都会创建一个单独的实例。 session作用域：每个session都会创建一个单独的实例。 application作用域：每个servletContext都会创建一个单独的实例。 websocket作用域：每个websocket连接都会创建一个单独的实例。 自定义作用域 SimpleThreadScope作用域：每个线程都会创建一个单独的实例。 6.2 Bean的生命周期（Initialization/destruction method）Bean的生命周期：定义 –&gt; 初始化 –&gt; 使用 –&gt; 销毁 6.2.1 Bean初始化如果需要在Bean实例化之后执行一些逻辑，有两种方法： 实现InitializingBean接口(org.springframework.beans.factory.InitializingBean)，覆盖afterPropertiesSet方法，在afterPropertiesSet中执行一些初始化后的工作。 配置init-method 配置beans的default-init-method属性 来指定一个初始化方法，这个指定针对容器中所有的对象，由于这样影响的范围比较广，所以当对象没有对应的初始化方法程序也不会报错。 配置bean的init-method来指定初始化方法，这样只影响包含init-method属性所在的bean标记创建的对象，这样控制的对象比较精准，所以当类型中没有这个初始化方法则程序崩溃。1&lt;bean id=\"exampleId\" class=\"example.exampleBean\" init-method=\"init\"&gt;&lt;/bean&gt; 12345public class ExampleBean&#123; public void init()&#123; //执行一些初始化后的工作 &#125;&#125; 6.2.2 Bean销毁如果需要在Bean销毁之前执行一些逻辑，有两种方法： 实现DisposableBean接口(org.springframework.beans.factory.DisposableBean)覆盖destroy方法，，在destroy中执行一些销毁前的工作。 配置destroy-method 配置beans的default-destroy-method属性 来指定一个销毁方法，这个指定针对容器中所有的对象，由于这样影响的范围比较广，所以当对象没有对应的销毁方法程序也不会报错。 配置bean的destroy-method来指定销毁方法，这样只影响包含destroy-method属性所在的bean标记创建的对象，这样控制的对象比较精准，所以当类型中没有这个销毁方法则程序崩溃。1&lt;bean id=\"exampleId\" class=\"example.exampleBean\" destroy-method=\"cleanup\"&gt;&lt;/bean&gt; 12345public class ExampleBean&#123; public void cleanup()&#123; //执行一些销毁前的工作 &#125;&#125; 注意：销毁方法只针对单例模式的对象 6.3 Bean的懒加载（Lazy-initialization mode）Spring容器会在创建容器时提前初始化Singleton作用域的bean，可以通过bean标记lazy-init=&quot;true&quot;延迟实例化(对象被使用时才创建)。 配置lazy-init 配置beans的default-lazy-init=&quot;true&quot;为所有Bean设定懒加载。 配置bean的lazy-init=&quot;true&quot;为单独的某个Bean设定懒加载。1&lt;bean id=\"bean1\" class=\"example.exampleBean\" lazy-init=\"true\"/&gt; 适用场景：如果某个Bean在程序整个运行周期都可能不会被使用，可以考虑设定该Bean为懒加载 优点：尽可能的节约了资源 缺点：可能导致某个操作响应时间增加 6.4 Bean装配的Aware接口实现了Aware接口的bean在初始化后可以获取相应资源并进行相应的操作。 ApplicationContextAware 接口方法：setApplicationContext 作用：通常用来获取上下文对象，声明全局变量后在方法中对变量进行初始化并供其他方法调用 实现过程：创建一个类并实现ApplicationContextAware接口，重写setApplicationContext方法；在xml文件中配置该类；当spring加载该配置文件时即调用接口方法。 BeanNameAware 接口方法：setBeanName 作用：获取声明的类名，声明全局变量后在方法中对变量进行初始化并供其他方法调用 实现过程：创建一个类并实现BeanNameAware接口，重写setBeanName方法；在xml文件中配置该类；当spring加载该配置文件时即调用接口方法。 6.4 Bean装配之ResourceResources（针对于资源文件的统一接口） UrlResource：URL 对应的资源，根据一个 URL 地址即可获取 ClassPathResource：获取类路径下的资源 FileSystemResource：获取文件系统里面的资源 ServletContextResource：ServletContext 封装的资源，用于访问 ServletContext 环境下的资源 InputStreamResource：获取输入流封装的资源 ByteArrayResource：获取字节数组封装的资源 ResourceLoader: 所有的 application contexts 都实现了 ResourceLoader 接口，因此所有的 application contexts 都能通过getResource()获取Resource实例。 getResource()参数： classPath方式：”classPath:class路径下文件” file方式： “file:本地磁盘文件绝对地址” url方式： “url:URL地址下文件” 没有前缀时依赖applicationContext的配置文件路径: “文件全名” eg:applicationContext.getResource(&quot;classpath:config.txt&quot;)","tags":[{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"},{"name":"Spring","slug":"Spring","permalink":"http://chaooo.github.io/tags/Spring/"}]},{"title":"【Java教程】Web编程基础","date":"2017-06-20T12:59:40.000Z","path":"article/20170620.html","text":"JavaWeb是用Java技术来解决相关web互联网领域的技术总和。Java提供了技术方案可以解决客户端和服务器端的实现，特别是服务器的应用，比如Servlet，JSP和第三方框架等等。 http协议 Servlet 请求的转发与重定向 上下文对象ServletContext 会话跟踪（状态管理） JSP 内置对象(隐含对象) taglib指令 JavaWeb三大组件 JSON在Java中的使用 AJAX 1. http协议超文本传输协议，是一种应用层的网络传输协议 http协议的特点： 简单，快速：支持多种不同的的数据提交方式，如get/post 数据传输灵活，支持任意类型数据的传输 无连接协议：每次连接，只处理一次请求，进行一次响应，响应完毕，立即断开。 无状态协议：处理请求与响应时没有记忆能力，如果需要处理之间的信息，只能重新传递。 http协议的组成部分： 请求：浏览器连接服务器的过程 响应：服务器回复浏览器的过程 http协议的请求： 请求头：描述客户端的信息 请求体：GET没有请求体，请求体用于存储POST请求发送的数据。 请求空行：请求头与请求体之间的一行空白 请求行：描述请求方式，服务器地址，协议版本等 http协议的响应： 响应头：描述服务器的信息 响应体：响应的内容，文本，json数据等。 响应行：描述服务器协议版本，响应状态码，以及响应成功或失败的解释。 2. Servletservlet是一个运行在tomcat上的Java类，用户通过浏览器输入地址，触发这个类，这个类执行完毕，准备一个响应体，发送给浏览器。 2.1 Servlet编写步骤： 编写一个Java类，继承HttpServlet类 重新service方法 在service方法中，对用户请求进行响应。 123456789101112131415//注解：添加访问的网址@WebServlet(\"/hello\")public class MyServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; @Override public void service(ServletRequest req, ServletResponse res) throws IOException &#123; //1.设置响应体的编码，以及内容类型 res.setContentType(\"text/html;charset=utf-8\"); //2.得到响应体输出的打印流 PrintWriter out = res.getWriter(); //3.打印文字 out.println(\"&lt;h1&gt;Hello Servlet!&lt;/h1&gt;\"); &#125;&#125; 2.2 配置ervlet类的访问网址 web3.0版本之后使用注解的方式配置ervlet类的访问网址 web3.0版本之前配置Servlet访问网址的方式： 将Servlet类，配置到web.xml中，告知tomcat，servlet的类名 配置Servlet类的别名，并给指定别名的Servlet添加映射网址。 123456789101112&lt;!-- 将servlet类，配置到web.xml中，告知tomcat，servlet的类名 --&gt;&lt;servlet&gt; &lt;!-- Servlet类别名，用于后续添加映射网址 --&gt; &lt;servlet-name&gt;demo1&lt;/servlet-name&gt; &lt;!-- Servlet类全名 --&gt; &lt;servlet-class&gt;day01_Servlet.demo1.MyServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;!-- 给指定别名的Servlet添加映射网址 --&gt; &lt;servlet-name&gt;demo1&lt;/servlet-name&gt; &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 2.3 Servlet生命周期 实例化 –&gt; 初始化(init) –&gt; 服务(service) –&gt; 销毁(销毁之前调用destory) –&gt; 不可用 创建时机：默认情况下，当用户第一次访问Servlet的映射网址是Servlet对象被创建，后续用户再次访问，是重复利用此对象。 销毁时机：当tomcat关闭时 或 应用从tomcat卸载时。 tomcat为了便于我们进行资源的合理缓存，为生命周期事件提供了三个方法： init(); 当Servlet对象被创建时，方法执行，通常在这里进行一些可重用资源的初始化工作。 service(); 服务方法，当用户每次发起请求时，此方法用于处理请求，并进行响应，此方法每次都执行在新的线程中。 destory(); 当Servlet即将被销毁时，方法执行，释放资源的代码可写在此方法中。 2.4 get和post区别 GET请求： 没有请求体，请求时携带参数在url中，参数在url地址的?后，参数由=连接的键值对组成，&amp;连接键值对。 只能传输字符串类型参数 浏览器url地址最大长度4kb 数据传输时，参数在url中明文显示，不安全。 POST请求： 有请求体，是一个单独的数据包，用于存储请求中的多个参数 可传输任意类型的数据，进行文件上传必须POST请求 可以传递的数据大小，理论上没有上限 数据传输时在单独的数据包，较为安全。 2.5 接收请求中的参数 根据参数的名称，接收参数的单个值 String value = request.getParameter(String name); 根据参数的名称，接收一组参数的值 String[] values = request.getParameterValues(String name); 1234567891011121314protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; request.setCharacterEncoding(\"UTF-8\"); response.setContentType(\"text/html;charset=utf-8\"); //1.接收 String username = request.getParameter(\"username\"); String[] password = request.getParameterValues(\"password\"); //2.打印 System.out.println(\"username:\" + username); System.out.println(\"password:\" + password[0]); System.out.println(\"password2:\" + password[1]); //3.浏览器输出 response.getWriter().append(\"&lt;div&gt;很遗憾注册失败，点击&lt;a href=\\\"demo1.html\\\"&gt;重新注册&lt;/a&gt;&lt;/div&gt;\");&#125; 2.6 乱码处理2.6.1 乱码情况： 浏览器提交表单时，会对中文参数值进行自动编码。Tomcat服务器接收到的浏览器请求后，默认使用iso-8859-1去解码，当编码与解码方式不一致时，就会乱码。 tomcat8版本之前(不包含tomcat8版本), GET请求乱码 任何版本, POST请求乱码 2.6.2 请求乱码处理： 适用于所有乱码问题：(Tomcat8之后get无乱码) 指定浏览器打开页面的编码&lt;meta charset=&quot;UTF-8&quot;&gt;; 将接收到的中文乱码重新编码： 12String name = request.getParameter(\"userName\");String userName = new String( name.getByte(\"ISO-8859-1\"),\"utf-8\"); 仅适用于POST请求： 指定浏览器打开页面的编码&lt;meta charset=&quot;UTF-8&quot;&gt;; Servlet接收之前设置解码（需在调用request.getParameter(“key”)之前设置）request.setCharacterEncoding(&quot;utf-8&quot;); 2.6.3 响应乱码的处理： 方式一：设置响应的内容类型, 以及编码格式:response.setContentType(&quot;text/html;charset=utf-8&quot;); 方式二：进设置编码格式, 不设置响应内容类型:response.setCharacterEncoding(&quot;UTF-8&quot;)(常用于客户端不是浏览器的情况, 如果在浏览器的环境下设置, 有部分浏览器无法识别, 依然会乱码); 2.7 Servlet的创建时机 通过web.xml配置Servlet, 可以修改Servlet加载的时机。 可以给Servlet节点，添加&lt;load-on-startup&gt;节点来制定servlet启动顺序。 节点中的值为数字： -1：默认-1，表示当用户第一次请求时，创建对象 &gt;=0：大于等于0，当服务器启动时，创建对象，值越小创建越早，值相同按web.xml配置顺序创建 123456789101112&lt;servlet&gt; &lt;servlet&gt; &lt;servlet-name&gt;s1&lt;/servlet-name&gt; &lt;servlet-class&gt;demo.ServletDemo&lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;s1&lt;/servlet-name&gt; &lt;url-pattern&gt;/s1&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;&lt;/servlet-mapping&gt; 3. 请求的转发与重定向3.1 请求对象request的常用操作 getMethod() : 得到请求的方式 getRequestURI() : 获取浏览器请求地址 getRemoteAddr() : 获取客户端ip地址 getRemoteHost() : 获取客户端名称 getServerName() : 获取服务器名称 getServerPort() : 获取服务器端口号 getQueryString() : 获取get请求参数字符串，其他请求返回null 3.1 请求的转发与重定向注意事项 请求转发与重定向操作，必须要有出口。 当一个请求在servlet中进行了重定向，那么这个servlet就不要再进行响应了 3.2 转发* 一个web组件，将未处理完毕的请求，通过tomcat转交给另一个web组件处理 步骤： 获取请求转发器：RequestDispather rd = request.getRequestDispacher(&quot;转发地址&quot;); 进行转发操作：rd.forward(request, response); 因为通常请求转发器获取后, 只会使用一次 , 一般不给对象起名, 简写: request.getRequestDispacher(&quot;转发地址&quot;).forward(request, response); 特点： 转发过程中，多个web组件之间共享一个请求对象request与响应对象response 在转发过程中，无论转发多少次，浏览器只发起了一次请求，所以浏览器地址不会改变 转发不能跨项目实现 比重定向效率更高 3.3 重定向* 一个web组件，处理完毕请求后，告知浏览器，将请求转向另一个地址 格式：response.sendRedirect(&quot;重定向地址&quot;)； 原理：当客户端请求服务器时，发起重定向流程： 给浏览器响应302的状态码 , 以及一个键值对, 键为: location , 值为重定向新地址. 当浏览器接收到302的状态码时, HTTP协议规定了浏览器会寻找location对象的新地址. 浏览器自动发起新的请求 , 跳转到新地址. 特点： 重定向会产生两个请求对象，多个请求对象中数据不互通 浏览器地址发生了改变 重定向可以跨域实现 比转发效率低 4. 上下文对象ServletContext 用于关联多个servlet，是servlet之间通讯的桥梁，用于多个servlet之间的信息共享 每一个项目运行时，tomcat会为这个项目创建一个servletContext，项目关闭时销毁。 获取ServletContext对象：ServletContext context = getServletContext(); 常用方法 context.setAttributes(String key, Objexct value); //设置替换数据 context.getAttributes(String key); //获取数据 context.removeAttributes(String key); //删除数据 context.getRealPath(“/“); //获取项目运行时所在文件路径 5. 会话跟踪（状态管理） 存在两种实现： cookie: 将浏览器产生的状态存储在浏览器中 Session: 将浏览器产生的状态存储在服务器中 cookie技术原理： 服务器向客户端响应时，将数据以set-Cookie消息头（响应头）的方式发给浏览器， 浏览器接收到cookie后，会将这些数据以文本文件的方式（.txt文件）保存起来 当浏览器再次发起相同请求时，浏览器会将之前存储的cookie,添加到请求头，发给服务器 Session技术原理： 当浏览器访问服务器时，服务器可以选择为用户创建一个Session对象(类似于map集合)， 该Session对象有一个id属性，称之为SessionId，服务器会将这个SessionId以cookie方式发送给浏览器 浏览器再次访问服务器时，同时会传递SessionId的cookie给i服务器，服务器根据sessionId找到Session对象，供程序使用。 5.1 Cookie 创建Cookie：Cookie在Java中是一个类，每个cookie的对象都表示一个键值对 Cookie cookie = new Cookie(String key, String value); 注意：tomcat8.5版本之前，cookie无法出场中文 通过响应对象，将cookie添加到响应头,可添加多个 response.addCookie(Cookie cookie); 通过请求头得到cookie数组，没有则返回null Cookie[] cookies = request.getCookies(); 取键：cookie.getName(); 取值：cookie.getValue() Cookie的存储时长： cookie.setMaxAge(int 秒)； 正数：倒计时秒数 0：表示立即删除此cookie，常用于覆盖一个存活时长较长的cookie,用于删除它 负数：默认-1，表示会话结束时自动删除（关闭浏览器） Cookie的存储路径问题 存储的cookie发送到服务器时，判断是否发送的依据是：域名相同，路径相同 为了避免路径问题，通常会将cookie设置统一路径为根路径：cookie.setPath(“/“); 5.2 Cookie的优缺点 缺点： Cookie技术存储的数据类型，只能是字符串，且早期版本(8.5之前)不可存储中文。 数据存储在客户的计算机中，不安全，不建议存储安全敏感数据 保存数据量有限制，大约4kb左右 依赖于用户的浏览器设置，用户可以金庸cookie，可能被用户主动删除 优点： 分散服务器的压力 5.3 Session 获取Session 格式1：request.getSession();//等价参数传true 格式2：request.getSession(boolean isNew); true，根据浏览器的SessionId查找一个session，若没有就新创建一个对象并返回 false，根据浏览器的SessionId查找一个session，若没有就返回null Session常用方法 session.setAttribute(String key, object value);//设置/替换值 session.getAttribute(String key);//获取值 session.invalidate();//销毁 设置session存活时长 默认会话时长30分钟，当浏览器最后一次访问服务器后30分钟后，若没有再次连接，则session被销毁。 可以通过修改配置文件，修改所有的session时长 修改conf/web.xml的&lt;session-config&gt;&lt;session-tiomeout&gt;数值分钟&lt;/session-tiomeout&gt;&lt;/session-config&gt; 可以通过session对象，修改单个对象的session时长 void session.setMaxInactiveInterval(int seconds) 5.4 Session的优缺点 缺点： 数据存储在服务器端，当用户量大时，对服务器造成极大的压力，很容易耗尽服务器资源 优点： 数据存储在服务器中，安全 数据类型为Object，在Java中表示可以存储所有类型的数据 session存储的数据大小，理论上无限的。 5.5 Cookie和Session的使用 Cookie和Session不是互斥的，是相辅相成的 在项目开发时： 对安全敏感的数据，存储在session中 对安全不敏感的字符串数据，可以选择存储在Cookie中 对于大的数据，应该存在数据库和文件中 注意：cookie和session是为了管理状态而非存储数据。 6.JSP6.1 JSP语法基础 Java Server Pages：java动态网页技术 JSP引擎原理：JSP引擎读取JSP文件，将文件转换为Servlet，由servlet给用户响应 注意： JSP文件的转换 发生在服务器启动时，当用户访问JSP时，其实访问的是JSP文件转换的Servlet 执行流程：浏览器请求–&gt;tomcat–&gt;JSP引擎转换为Servlet–&gt;转换的Servlet–&gt;准备响应体–&gt;响应给浏览器–&gt;浏览器解析html JSP语法结构 html代码 Java代码 Jsp特有的语法结构 Java代码声明区：指的是类的成员位置 123&lt;%! // Java代码声明区%&gt; Java代码执行区：指的是Servlet的service方法中，每次用户请求，执行区的代码都会执行起来 123&lt;% // Java代码执行区%&gt; JSP输出表达式 用于快速的将Java中的数据，输出到网页中.. 语法格式：&lt;%=数据 %&gt;，编译后被转换成out.print(数据) JSP注释： html中可以用&lt;!-- --&gt; java中可以用//，/**/，/** */ jsp注释&lt;%-- --%&gt; html和java注释会被编译，其中html注释会被编译到页面，jsp注释编译器会自动忽略 6.2 JSP三大指令 page指令 include指令 taglib指令 指令使用格式：&lt;%@ 指令名称 属性1=值 属性2=值 属性n=值 %&gt;*语法上，JSP允许在单个页面出现多个相同的JSP指令 6.2.1 page指令 用于配置页面信息 12345678910111213&lt;%@ page language=\"java\"：语言 contentType=\"text/html;charset=utf-8\"：响应的内容类型，以及响应的编码格式 pageEncoding=\"UTF-8\"：文件存储的编码格式 extends=\"继承的父类\" buffer=\"数字/none\"：是否允许缓存，默认值8kb autoFlush=\"true/false\"：是否自动清除缓存，默认true session=\"true/false\"：是否提前准备session对象，默认true isThreadSafe=\"true/false\"：是否线程安全的 import=\"java.util.List\"：用于导包，多个包使用\",\"隔开 errorPage=\"网址\"：当页面发生BUG后，显示哪个页面 isErrorPage=\"true/false\"：当前页面是否是一个错误处理页面，如果结果为true，当别的页面产生错误，跳转到此页面，会提前准备好一个对象exception，此对象封装了错误信息%&gt; 6.3 项目发生错误时，统一的处理方式 打开项目的web.xml 加入子节点&lt;error-page&gt;&lt;error-code&gt;错误码&lt;/error-code&gt;&lt;location&gt;处理网址&lt;/location&gt;&lt;/error-page&gt; 12345678&lt;error-page&gt; &lt;error-code&gt;500&lt;/error-code&gt; &lt;location&gt;/error.jsp&lt;/location&gt;&lt;/error-page&gt;&lt;error-page&gt; &lt;error-code&gt;404&lt;/error-code&gt; &lt;location&gt;/404.jsp&lt;/location&gt;&lt;/error-page&gt; include指令：用于将jsp或html引入到另一个jsp中 语法格式：&lt;%@ include file=&quot;地址&quot; %&gt; include动作：用于将jsp或html引入到另一个jsp中 语法格式：&lt;jsp:include page=&quot;地址&quot;&gt; include指令 与 include动作区别： include指令：引入文件操作，是在JSP引擎的转换时发生，将多个jsp文件，生产为了一个Servlert（多个jsp =&gt; 一个Servlet） include动作：引入文件操作，是在浏览器请求时，将引用文件的响应体添加到了请求文件的响应体中（多个jsp =&gt; 多个Servlet） 7.内置对象(隐含对象) 在JSP中，我们的代码执行在service中，所谓内置对象，指的是在JSP引擎转换时期，在我们代码生成位置的上面，提前准备好的一些变量，对象。 内置对象通常是我们会主动创建的对象 7.1 九大内置对象 request 对象类型：java.servlet.HttpServletRequest request内置对象中包含了有关浏览器请求的信息，提供了大量get方法，用于获取cookie、header以及session内数据等。 response 对象类型：javax.servlet.HttpServletResponse response对象提供了多个方法用来处理HTTP响应，可以调用response中的方法修改ContentType中的MIME类型以及实现页面的跳转等。 config 对象类型：javax.servlet.ServletConfig 在Servlet初始化的时候，JSP引擎通过config向它传递信息。这种信息可以是属性名/值匹配的参数，也可以是通过ServletContext对象传递的服务器的有关信息。 out 对象类型：javax.servlet.jsp.JspWriter 在JSP开发过程中使用得最为频繁的对象 page 对象类型：java.lang.Object page对象有点类似于Java编程中的this指针，就是指当前JSP页面本身。 pageContext 对象类型：pageContext pageContext对象是一个比较特殊的对象。它相当于页面中所有其他对象功能的最大集成者，即使用它可以访问到本页面中所有其他对象 session 对象类型：java.servlet.http.HttpSession session是与请求有关的会话期，用来表示和存储当前页面的请求信息。 application 对象类型：javax.servlet.ServletContext 用于实现用户之间的数据共享（多使用于网络聊天系统）。 exception 对象类型：java.lang.Throwable 作用 exception内置对象是用来处理页面出现的异常错误。 7.2 JSP四大域对象 九大内置对象中，存在四个较为特殊的对象，这四个对象用户在不同的作用域中存储数据，获取数据，删除数据 域对象的特点：每一个内置对象，都类似一个Map集合，可以存取删除数据，都具备如下三个方法： 存储数据：setAttribute(String key, Object value); 获取数据：Object value = getAttribute(String); 删除数据： removeAttribute(String key); 四大内置对象，分别指的是： pageContext: (作用域：1个页面) 页面上下文，存储在pageContext中的数据, 作用域是最小的, pageContext在JSP代码执行时 创建, 在JSP代码执行完毕时, 销毁. request: (作用域：一次请求，如果请求被转发，可能跨越多个页面) 请求对象, 存储在请求对象中的数据, 域范围是一次请求, 请求一旦进行了响应, 就会被销毁. session: (作用域：一次会话，一次会话可能包含多个请求) 会话对象，存储在会话对象中的数据，只有在当前用户会话中可以使用，用户再次访问服务器的时间间隔超过30分钟，session就销毁了。 application: (域范围：一次服务，应用从启动到关闭application一直都在) Servlet上下文对象, 存储在application中的数据, 域范围是最大的. 在应用关闭之前 都可以使用. 7.3 EL表达式 用于将计算的结果输出到网页，也常用于快速的从域对象中取出数据，并输出到网页。 格式：${表达式} EL表达式用于运算 在JSP中, 可以直接使用el表达式运算一些数据，例如: ${123+123} , 最终网页中显示的效果是: 246 用于取出域对象中的数据 取出数据直接输出：${域对象中存储的键} 如果取出的数据不存在, 则不输出 (不可能显示null) 取出对象数据的属性值: 格式1： ${对象存储的键.属性名} 格式2： ${对象存储的键[“属性名”]} 格式3(动态取值)： ${对象存储的键[属性存储的键]} 取出集合中的数据 格式: ${集合存储时的key[下标]} 7.4 EL表达式取出数据的流程 四个域对象之间, 有时数据的键可能重复,优先从域范围较小的对象中, 取出数据. 步骤: 先从pageContext中, 寻找数据是否存在. 如果pageContext中数据不存在, 则去request中寻找数据是否存在 如果request 中数据不存在, 则去session中寻找数据是否存在 如果session中数据不存在, 则去application中寻找数据是否存在 如果application中数据不存在,则不输出任何数据. 8. taglib指令用于在JSP文件中，引入标签库文件。 格式： &lt;%@ taglib prefix=&quot;&quot; uri=&quot;&quot; %&gt; prefix: 是引入标签库后，标签库的名称。作用是用于区分引入的多个标签库，在使用标签库中的标签时，标签的写法：&lt;标签库名称:标签名&gt; uri: 每个标签库，都会拥有一个uri，它是用于区分标签库的，我们在引入这个库时，需要匹配uri属性 JSTL(JSP Standard Tag Library): JSP标准标签库 使用时，需要引入jar文件 if 标签，格式：&lt;库名称:if text=”${ booble }”&gt; forEach 标签，格式：&lt;库名称:forEach items=”${ List }” var=”item”&gt; 自定义标签库: 编写一个Java类, 继承SimpleTagSupport类. 重写父类的doTag方法. 在doTag方法中, 通过getJspContext方法, 的到JSP页面的上下文 通过上下文对象, 得到JSP中的out对象, 通过out对象, 向网页中输出内容 编写tld文件 , 描述标签库 以及 标签. 自定义标签库案例: 1234567891011121314public class MyTag1 extends SimpleTagSupport &#123; private static ArrayList&lt;String&gt; data = new ArrayList&lt;&gt;(); static &#123; data.add(\"流水在碰到底处时才会释放活力。——歌德\"); &#125; @Override public void doTag() throws JspException, IOException &#123; JspContext context = getJspContext(); JspWriter out = context.getOut(); Random r = new Random(); int index = r.nextInt(data.size()); out.println(\"&lt;span&gt;\"+data.get(index)+\"&lt;/span&gt;\"); &#125;&#125; 12345678910111213141516171819202122232425262728&lt;taglib xmlns=\"http://java.sun.com/xml/ns/j2ee\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd\"version=\"2.0\"&gt; &lt;!-- 描述标签库 --&gt; &lt;!-- 是对于标签库的介绍 --&gt; &lt;description&gt;我们这个标签库, 是闲的慌 , 所以写的.&lt;/description&gt; &lt;!-- 描述标签库的名称 --&gt; &lt;display-name&gt;xdl&lt;/display-name&gt; &lt;!-- 标签库的版本 --&gt; &lt;tlib-version&gt;11.88&lt;/tlib-version&gt; &lt;!-- 建议的短命名称 --&gt; &lt;short-name&gt;xdl&lt;/short-name&gt; &lt;!-- 标签库的表示, 用于引入时匹配标签库 --&gt; &lt;uri&gt;http://shuidianshuisg.com&lt;/uri&gt; &lt;!-- 开始描述标签 --&gt; &lt;tag&gt; &lt;!-- 对于标签的介绍 --&gt; &lt;description&gt;这个标签用于随机向网页中, 输出一句名言&lt;/description&gt; &lt;!-- 标签名称 --&gt; &lt;name&gt;heiheihei&lt;/name&gt; &lt;!-- 标签所对应的的Java类 --&gt; &lt;tag-class&gt;cn.xdl.tag.MyTag1&lt;/tag-class&gt; &lt;!-- 标签的内容 --&gt; &lt;body-content&gt;empty&lt;/body-content&gt; &lt;/tag&gt;&lt;/taglib&gt; 9. JavaWeb三大组件(Servlet,filter,Lister)9.1 Filter过滤器 请求的过滤器，面向切面编程思想（AOP） 使用步骤： 编写一个类，实现Filter接口 通过注解或web.xml配置过滤器规则 过滤器链： 当多个过滤器，过滤同一个请求地址时，就形成了过滤器链，所有过滤器都放行后，servlet才会处理用户请求 过滤器链执行顺序：（若同时包含注解与web.xml,优先执行web.xml） 注解方式：按照类名的自然顺序先后 web.xml配置方式：按照web.xml配置顺序，先后执行 案例： 123456789101112131415161718192021222324252627282930313233343536373839@WebFilter(\"/home.jsp\")public class AdminFilter implements Filter &#123; /** * 当Filter即将销毁时执行 */ @Override public void destroy() &#123; &#125; /** * 有新的请求, 满足了过滤器的过滤规则, 正在过滤 * 参数1. 请求对象 * 参数2. 响应对象 * 参数3. 过滤器链对象 */ @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123; System.out.println(\"过滤管理员登录的过滤器 正在执行\"); //1. 从请求中, 得到session HttpServletRequest req = (HttpServletRequest) request; HttpSession session = req.getSession(); //2. 判断session中是否存在username Object username = session.getAttribute(\"username\"); //3. 如果存在, 且值为admin , 则放行 if(username !=null &amp;&amp; username.equals(\"admin\")) &#123; //放行 chain.doFilter(request, response); &#125;else &#123; //4. 否则拦截, 并响应, 提示请先以管理员身份登录 response.getWriter().append(\"&lt;script&gt;alert('请先以管理员身份登录, 再访问管理页面');window.location.href='login.jsp'&lt;/script&gt;\"); &#125; &#125; /** * 当Filter初始化时 执行 */ @Override public void init(FilterConfig arg0) throws ServletException &#123; &#125;&#125; web.xml配置方式 12345678&lt;filter&gt; &lt;filter-name&gt;encoding&lt;/filter-name&gt; &lt;filter-class&gt;cn.xdl.demo1.EnCodingFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;encoding&lt;/filter-name&gt; &lt;url-pattern&gt;/home.jsp&lt;/url-pattern&gt;&lt;/filter-mapping&gt; 9.2 Listener监听器 监听服务器的一些状态事件，事件驱动机制。 分为两类状态事件： 服务器中组件的生命周期 一些域对象中数据变化的事件 监听服务器的启动与关闭：ServletContextListener 监听ServletContext中数据的增加,删除,以及替换：ServletContextAttributeListener 监听Session会话的开启与关闭：HttpSessionListener 监听session中数据的增加,删除,以及替换：HttpSessionAttributeListener 10. JSON在Java中的使用 JSON：JavaScript Object Notation GSON.jar，将Java中的对象转换为JSON字符串，将JSON字符串转换为Java中的对象 1234//引入jar文件Gson g = new Gson();String str = g.toJson(Java对象);//转换JSON字符串类型 对象名 = g.fromJson(Json字符串, 类型.class);//转换为Java对象 11. AJAX 一种用于网页异步请求的技术，用于与服务器进行异步交互以及对网页局部刷新操作 Ajax请求的状态（readyState） 0：正在初始化 1：请求正在发送 2：请求发送完毕 3：服务器开始响应 4：响应接收完毕，连接断开 Ajax响应的状态（status） 200：成功 404：找不到资源 500：服务器错误 11.1 GET请求AJAX12345678910var xhr = new XMLHttpRequest();xhr.open(\"GET\", \"地址?参数列表\");xhr.onreadystatechange = function()&#123; if(xhr.readyState === 4 &amp;&amp; xhr.status === 200)&#123; //通过xhr.responseText接收响应体 &#125;else&#123; //失败处理 &#125;&#125;xhr.send(); 11.2 POST请求AJAX123456789101112var xhr = new XMLHttpRequest();xhr.open(\"POST\", \"地址\");xhr.onreadystatechange = function()&#123; if(xhr.readyState === 4 &amp;&amp; xhr.status === 200)&#123; //通过xhr.responseText接收响应体 &#125;else&#123; //失败处理 &#125;&#125;//POST请求设置请求头xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); xhr.send(参数列表); //发送请求参数 11.2 Jquery中的AJAX $.ajax({url,[settings]}) 1234567891011$.ajax(&#123; url:\"请求的网址\", type:\"请求方式GET/POST...\", async:\"请求是否异步, 默认true\", data:\"请求的参数列表, 格式与GET请求?后的格式一致\", dataType:\"TEXT或JSON\",//服务器返回的数据类型 success:function(data)&#123;//当服务器响应状态码在200-299之间时, 这里执行 //参数data:就是响应的内容, 当dataType为TEXT时, 类型为string , 当dataType为JSON时, 类型为Object &#125;, error:function()&#123;&#125; //当服务器响应状态码不再200-299之间时, 这里执行&#125;); $.get(url, [data], [callback], [type]) 123$.get(\"请求的网址\", &#123; 请求参数键值对 &#125;,function(data)&#123; //data:响应的内容&#125;); $.post(url, [data], [callback], [type]) 123$.post(\"请求的网址\", &#123; 请求参数键值对 &#125;,function(data)&#123; //data:响应的内容&#125;, \"json\"); $.getJSON(url, [data], [callback]) 123$.getJSON(\"请求的网址\", &#123; 请求参数键值对 &#125;,function(data)&#123; //data:响应的内容&#125;); jquery对象.load(url, [data], [callback]) 载入远程 HTML 文件代码并插入至 DOM 中，load函数是使用jquery对象来调用.返回的结果无需解析, 直接显示到调用函数的jquery对象中。 123$(\"#dom\").load(\"请求的网址\", &#123; 请求参数键值对 &#125;,function()&#123; //加载成功&#125;); 11.3 Vue中的AJAX 使用vue的ajax , 除了需要引入vue.js以外, 还需要引入vue-resource.js 不创建Vue对象的情况下, 使用的ajax: Vue.http.get(&quot;请求地址&quot;,[&quot;请求的参数&quot;]).then(success,error); Vue.http.post(&quot;请求地址&quot;,[&quot;请求的参数&quot;],{&quot;emulateJSON&quot;:true}).then(success,error); 创建Vue实例, 使用ajax this.$http.get(&quot;请求地址&quot;,[&quot;请求的参数&quot;]).then(success,error); this.$http.post(&quot;请求地址&quot;,[&quot;请求的参数&quot;],{&quot;emulateJSON&quot;:true}).then(success,error); 1234567891011121314//GET请求: 传递参数列表: &#123; params:&#123; 参数名1:值1, 参数名2:值2 ... &#125; &#125;POST请求: 传递参数列表:&#123; 参数名1:值1, 参数名2:值2 ...&#125; success函数 与 error函数 格式: function(res){} //res , 就是响应对象, 包含了响应的相关信息 响应对象的常用属性: url : 响应的网址 body : 响应的内容 (响应体) , 如果是JSON格式, 则返回对象, 否则返回string ok : boolean值, 响应码在200-299之间时 为 true status : 响应码, 例如: 200,302,404,500 statusText :响应码对应的文字信息, 例如: 状态码为200时, 信息为ok 响应对象的常用函数: text() : 以字符串的形式, 返回响应体 json() : 以对象的形式, 返回响应体 blob() : 以二进制的形式 , 返回响应体. 11.4 AJAX缓存问题 浏览器ajax得到响应结果后, 会缓存起来，当再次访问相同地址时, 会优先使用缓存。 缓存的原理, 是按照网址来缓存的, 我们只要让我们每次请求的网址都不一样, 就可以避免缓存出现。 在请求地址加上随机参数可以比避免缓存，如:&quot;s1.do?time=&quot;+new Date().getTime(); 11.5 AJAX跨域问题 默认编写的Servlet . 不允许其他网站的ajax跨域请求. 我们只需要给servlet的响应头中加入两个键值 , 就可以允许跨域: response.addHeader(&quot;Access-Control-allow-Origin&quot;,&quot;*&quot;); response.addHeader(&quot;Access-Control-allow-Methods&quot;,&quot;GET,POST&quot;);","tags":[{"name":"Java","slug":"Java","permalink":"http://chaooo.github.io/tags/Java/"},{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"}]},{"title":"【Java教程】数据结构与算法入门","date":"2017-06-05T10:12:38.000Z","path":"article/20170605.html","text":"数据结构，它是储存数据的一种结构体，在此结构中储存一些数据，而这些数据之间有一定的关系。算法（Algorithm）是对特定问题求解步骤的一种描述，它是指令的有限序列，其中每一条指令表示一个或者多个操作。 Java数据结构 时间复杂度与空间复杂度 算法的基本概念 1.Java数据结构(Data Structure)1.1 数据结构 数据结构，它是储存数据的一种结构体，在此结构中储存一些数据，而这些数据之间有一定的关系。 而各数据元素之间的相互关系，又包括三个组成成分，数据的逻辑结构，数据的存储结构和数据运算结构。 而一个数据结构的设计过程分成抽象层、数据结构层和实现层。 1.2 Java数据结构 数据结构在Java的语言体系中按数据的逻辑结构可以分为两大类：线性数据结构和非线性数据结构。 线性数据结构：常见的有：一维数组，线性表，栈，队列，双队列，串。 非线性数据结构：常见的有：多维数组，集合，树，图，散列表(hash)。 按数据的存储结构分为：顺序存储结构和链式存储结构 顺序存储结构:用数据元素在存储器中的相对位置来表示数据元素之间的逻辑关系。 链式存储结构：在每一个数据元素中增加一个存放地址的指针，用此指针来表示数据元素之间的逻辑关系。 1.2.1 线性数据结构常见的线性数据结构有：一维数组，线性表，栈，队列，双队列，串。 一维数组 在Java里面常用的util有：String [],int [],ArrayList,Vector,CopyOnWriteArrayList等。 ArrayList和Vector的区别是:Vector是线程安全的，方法同步。CopyOnWriteArrayList也是线程安全的但效率要比Vector高很多。 数组的插入/更新/删除效率比较低，而查询效率非常高,查询效率时间复杂度是1。 线性表 线性表是有序的储存结构、链式的储存结构。 链表的物理储存空间是不连续的，链表的每一个节点都知道上一个节点、或者下一个节点是谁，通常用Node表示。 常见的有顺序链表(LinkedList、Linked***)，单项链表（里面只有Node类），双向链表(两个Node类)，循环链表(多个Node类)等。 线性表插入效率比较高，而查询效率就比较低（add(),get()）。 栈Stack 栈，最主要的是要实现先进后出，后进先出的逻辑结构（push(),pop()）。 队列 队列是一种特殊的线性数据结构，队列只能允许在队头，队尾进行添加和查询等相关操作。队列又有单项有序队列，双向队列，阻塞队列等。 Queue这种数据结构注定了基本操作方法有：add(E e)加入队列，remove(),poll()等方法。 使用场景也非常多，如线程池，mq，连接池等。 串 串：也称字符串，是由N个字符组成的优先序列。在Java里面就是指String,而String里面是由chat[]来进行储存。（KMP算法） 1.2.2 非线性数据结构常见的线性数据结构有：多维数组，集合，树，图，散列表(hash)。 多维数组 Java里面很少提供这样的工具类，而java里面tree和图底层的native方法用了多维数组来储存。 集合 由一个或多个确定的元素所构成的整体叫做集合。在Java里面可以去广义的去理解为实现了Collection接口的类都叫集合。 树 在一个树结构中，有且仅有一个结点没有直接父节点，它就是根节点。 除了根节点，其他结点有且只有一个直接父节点 每个结点可以有任意多个直接子节点。 树的数据结构又分为： 自由树/普通树：对子节点没有任何约束。 二叉树：每个节点最多含有两个子节点的树称为二叉树。 二叉搜索树/BST：binary search tree,又称二叉排序树、二叉查找树。是有序的。（二叉平衡树，AVL树，红黑树） B-tree：又称B树、B-树。又叫平衡(balance)多路查找树。 B+tree：又称B+。是B-树的变体，也是一种多路搜索树。 Hash Hash，一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入（又叫做预映射， pre-image），变换成固定长度的输出，该输出就是散列值。一般通过Hash算法实现。（如：MD5,SHA1,加解密算法等） 简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。 Java中的hashCode：默认情况就是native方法通过对象的内存的+对象的值然后通过hash散列算法计算出来个int的数字。最大的特性是：不同的对象，不同的值有可能计算出来的hashCode可能是一样的。 Hash表：Hash表综合了数组和链表两种数据结构。如：HashTable,HashMap。哈希表具有较快（常量级）的查询速度，及相对较快的增删速度，所以很适合在海量数据的环境中使用。一般实现哈希表的方法采用“拉链法”，我们可以理解为“链表的数组”。 需要注意的是，相同的内容算出来的hash一定是一样的。既：幂等性。 图 图状结构或网状结构：结构中的数据元素之间存在多对多的关系。 2. 时间复杂度与空间复杂度2.1 时间复杂度一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为T(n) 在刚才提到的时间频度中，n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化。但有时我们想知道它变化时呈现什么规律。为此，我们引入时间复杂度概念。 一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=O(f(n)),称O(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。 有时候，算法中基本操作重复执行的次数还随问题的输入数据集不同而不同，如在冒泡排序中，输入数据有序而无序，其结果是不一样的。此时，我们计算平均值。 常见的算法的时间 复杂度之间的关系为：O(1)&lt;O(logn)&lt;O(n)&lt;O(nlog n)&lt;O(n2)&lt;O(2n)&lt;O(n!)&lt;O(nn) 2.2 空间复杂度空间复杂度：算法所需存储空间的度量，记作：S(n)=O( f(n) )，其中 n 为问题的规模。 一个算法在计算机存储器上所占用的存储空间，包括存储算法本身所占用的存储空间，算法的输入输出数据所占用的存储空间和算法在运行过程中临时占用的存储空间这三个方面。如果额外空间相对于输入数据量来说是个常数，则称此算法是原地工作。 算法的输入输出数据所占用的存储空间是由要解决的问题决定的，是通过参数表由调用函数传递而来的，它不随本算法的不同而改变。存储算法本身所占用的存储空间与算法书写的长短成正比，要压缩这方面的存储空间，就必须编写出较短的算法。 空间复杂度：一句来理解就是，此算法在规模为n的情况下额外消耗的储存空间。 时间复杂度：一句来理解就是，此算法在规模为n的情况下，一个算法中的语句执行次数称为语句频度或时间频度。 稳定性：主要是来描述算法，每次执行完，得到的结果都是一样的，但是可以不同的顺序输入，可能消耗的时间复杂度和空间复杂度不一样。 3.算法的基本概念 算法: 简单来说就是解决问题的步骤。 算法的五个特征:有穷性，确定性，可行性，有输入，有输出 有穷性：对于任意一组合法输入值，在执行又穷步骤之后一定能结束，即：算法中的每个步骤都能在有限时间内完成。 确定性：在每种情况下所应执行的操作，在算法中都有确切的规定，使算法的执行者或阅读者都能明确其含义及如何执行。并且在任何条件下，算法都只有一条执行路径。 可行性：算法中的所有操作都必须足够基本，都可以通过已经实现的基本操作运算有限次实现之。 有输入：作为算法加工对象的量值，通常体现在算法当中的一组变量。有些输入量需要在算法执行的过程中输入，而有的算法表面上可以没有输入，实际上已被嵌入算法之中。 有输出：它是一组与“输入”有确定关系的量值，是算法进行信息加工后得到的结果，这种确定关系即为算法功能。 算法的设计原则：正确性，可读性，健壮性，高效率与低存储量需求 描述算法的速度必须要和数据项的个数联系起来。 算法的存储量，包括： 程序本身所占空间； 输入数据所占空间； 辅助变量所占空间； 一个算法的效率越高越好，而存储量是越低越好。 4. 常用的查找算法4.1 线性（顺序）查找算法 使用目标元素与样本数列中第一个元素起依次进行比较 若目标元素等于样本元素，则表示查找成功 若目标元素与样本元素比较完毕也不相等，则表示查找失败 4.2 二分查找算法二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好，占用系统内存较少；其缺点是要求待查表为有序表，且插入删除困难。 普通循环实现二分查找算法 12345678910111213141516171819202122232425262728public static void main(String[] args) &#123; int srcArray[] = &#123;3,5,11,17,21,23,28,30,32,50,64,78,81,95,101&#125;; System.out.println(binSearch(srcArray, 28));&#125;/** * 二分查找普通循环实现 * * @param srcArray 有序数组 * @param key 查找元素 * @return */public static int binSearch(int srcArray[], int key) &#123; int mid = srcArray.length / 2; if (key == srcArray[mid]) return mid; int start = 0; int end = srcArray.length - 1; while (start &lt;= end) &#123; mid = (end - start) / 2 + start; if (key &lt; srcArray[mid]) &#123; end = mid - 1; &#125; else if (key &gt; srcArray[mid]) &#123; start = mid + 1; &#125; else &#123; return mid; &#125; &#125; return -1;&#125; 二分查找算法如果没有用到递归方法的话，只会影响CPU。对内存模型来说影响不大。时间复杂度log2n，2的开方。空间复杂度是2。一定要牢记这个算法。应用的地方也是非常广泛，平衡树里面大量采用。 递归实现二分查找递归实现算法 123456789101112131415161718192021222324252627public static void main(String[] args) &#123; int srcArray[] = &#123;3,5,11,17,21,23,28,30,32,50,64,78,81,95,101&#125;; System.out.println(binSearch(srcArray, 0,15,28));&#125;/** * 二分查找递归实现 * * @param srcArray 有序数组 * @param start 数组低地址下标 * @param end 数组高地址下标 * @param key 查找元素 * @return 查找元素不存在返回-1 */public static int binSearch(int srcArray[], int start, int end, int key) &#123; int mid = (end - start) / 2 + start; if (srcArray[mid] == key) &#123; return mid; &#125; if (start &gt;= end) &#123; return -1; &#125; else if (key &gt; srcArray[mid]) &#123; return binSearch(srcArray, mid + 1, end, key); &#125; else if (key &lt; srcArray[mid]) &#123; return binSearch(srcArray, start, mid - 1, key); &#125; return -1;&#125; 递归不光影响的CPU。JVM里面的线程栈空间也会变大。所以当递归的调用链长的时候需要-Xss设置线程栈的大小。 4. 常用的排序算法 八大排序算法 一、直接插入排序（Insertion Sort） 二、希尔排序（Shell Sort） 三、选择排序（Selection Sort） 四、堆排序（Heap Sort） 五、冒泡排序（Bubble Sort） 六、快速排序（Quick Sort） 七、归并排序（Merging Sort） 八、基数排序（Radix Sort） 4.1 冒泡排序算法冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 算法描述： 比较相邻的元素。如果第一个比第二个大，就交换他们两个。 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。 针对所有的元素重复以上的步骤，除了最后一个。 持续每次对越来越少的元素重复上面的步骤①~③，直到没有任何一对数字需要比较。 代码实现： 123456789101112131415public static void bubbleSort(int[] arr)&#123; for (int i=1; i&lt;arr.length; i++)&#123; boolean flag = true;//声明标志位 for(int j=0; j&lt;arr.length-i; j++)&#123; if(arr[j] &gt; arr[j+1])&#123; int temp = arr[j+1]; arr[j] = arr[j+1]; arr[j++1] = temp; flag = false; &#125; &#125; //若此轮结束flag还是为true,则证明已经有序 if(flag) break; &#125;&#125; 冒泡排序算法复杂度: 平均时间复杂度O(n²)，最好情况O(n)，最坏情况O(n²)，空间复杂度O(1) 冒泡排序是最容易实现的排序, 最坏的情况是每次都需要交换, 共需遍历并交换将近n²/2次, 时间复杂度为O(n²). 最佳的情况是内循环遍历一次后发现排序是对的, 因此退出循环, 时间复杂度为O(n). 平均来讲, 时间复杂度为O(n²). 由于冒泡排序中只有缓存的temp变量需要内存空间, 因此空间复杂度为常量O(1). Tips:由于冒泡排序只在相邻元素大小不符合要求时才调换他们的位置, 它并不改变相同元素之间的相对顺序, 因此它是稳定的排序算法。","tags":[{"name":"Java","slug":"Java","permalink":"http://chaooo.github.io/tags/Java/"},{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"}]},{"title":"【Java教程】常用设计模式","date":"2017-05-30T00:34:55.000Z","path":"article/20170530.html","text":"设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 常用的设计原则 设计模式分类 单例模式 模板模式 工厂模式 适配器模式 1.常用的设计原则 开闭原则：对扩展开发，对修改方便 里氏代换原则：任何父类出现的的地方，子类一定可以出现（多使用继承和多态） 依赖倒转原则：尽量多依赖于抽象类或接口而不是具体实现类，对子类具有强制性和规范性 接口隔离原则：尽量多依赖小接口而不是大接口 迪米特法则（最少知道原则）：一个实体应当少与其他实体之间发生相互作用，使系统功能模块相对独立。高内聚，低耦合。 合成复用原则：尽量多使用合成/聚合的方式，而不是继承的方式。 2.设计模式分类2.1 基本概念 设计模式是一套被反复使用多数人知晓，经过分类编目，代码设计经验的总结。 设计模式用来解决某些特定场景下的某一类问题–&gt;通用的解决方案。 设计模式可以让代码更容易被理解，确保了复用性、可靠性、可扩展性 2.2 具体分类 创建型模式：用于对象创建的过程 单例模式、工厂方法模式、抽象工厂模式、建造者模式(生成器模式)、原型模式 结构型模式：用于把类或对象通过某种形式结合在一起，构成某种复杂或合理的结构 适配器模式、装饰者模式、代理模式、外观模式、桥接模式、组合模式、享元模式(过滤器/标准模式) 行为型模式：用于解决类或对象之间的交互，更合理的优化类或对象之间的关系 责任链模式、命令模式、迭代子模式(迭代器模式)、观察者模式、中介者模式、解析器模式、状态模式、空对象模式、策略模式、模板模式、访问者模式、备忘录模式、 JEE 设计模式 数据访问对象模式 3.单例模式（Singleton）3.1 实现流程： 私有的构造方法 私有的静态的当前类的对象作为属性 共有的静态方法返回当前对象3.1 实现方式： 饿汉式：立即加载，对象启动时就加载 懒汉式：延迟加载，对象什么时候用到时才会加载 生命周期托管：单例对象交给别人处理 4.模板模式在模板模式中，父抽象类公开几个抽象方法供子类实现。在父抽象类中有另一个方法或几个方法使用抽象方法来实现业务逻辑。 eg: 对于使用不同的软件，我们只需要从抽象类继承并提供详细的实现,模板模式是一种行为模式。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849 // 抽象类abstract class Software &#123; abstract void initialize(); abstract void start(); abstract void end(); public final void play()&#123; initialize(); start(); end(); &#125;&#125; // 不同子类以不同方法实现抽象类的的方法class Browser extends Software &#123; @Override void end() &#123; System.out.println(\"Browser Finished!\"); &#125; @Override void initialize() &#123; System.out.println(\"Browser Initialized!.\"); &#125; @Override void start() &#123; System.out.println(\"Browser Started.\"); &#125;&#125;class Editor extends Software &#123; @Override void end() &#123; System.out.println(\"Editor Finished!\"); &#125; @Override void initialize() &#123; System.out.println(\"Editor Initialized!\"); &#125; @Override void start() &#123; System.out.println(\"Editor Started!\"); &#125;&#125;// 使用public class Main &#123; public static void main(String[] args) &#123; Software s1 = new Browser(); s1.play(); s1 = new Editor(); s1.play(); &#125;&#125; 4.1 模式模式优缺点： 优点 模板方法模式通过把不变的行为搬移到超类，去除了子类中的重复代码。子类实现算法的某些细节，有助于算法的扩展。通过一个父类调用子类实现的操作，通过子类扩展增加新的行为，符合“开放-封闭原则”。 缺点 每个不同的实现都需要定义一个子类，这会导致类的个数的增加，设计更加抽象。 适用场景 在某些类的算法中，用了相同的方法，造成代码的重复。控制子类扩展，子类必须遵守算法规则。 5. 工厂模式 简单工厂模式：一个工厂方法，依据传入的参数，生成对应的产品对象； 工厂方法模式：将工厂提取成一个接口或抽象类，具体生产什么产品由子类决定； 抽象工厂模式：为创建一组相关或者是相互依赖的对象提供的一个接口，而不需要指定它们的具体类。 5.1 简单工厂模式的实现：1234567891011121314151617181920212223242526 // 产品接口public interface Fruit &#123; void whatIm(); &#125; // 具体类public class Apple implements Fruit &#123; @Override public void whatIm() &#123; /*苹果*/&#125;&#125;public class Pear implements Fruit &#123; @Override public void whatIm() &#123; /* 梨 */ &#125;&#125; // 工厂public class FruitFactory &#123; public Fruit createFruit(String type) &#123; if (type.equals(\"apple\")) &#123;//生产苹果 return new Apple(); &#125; else if (type.equals(\"pear\")) &#123;//生产梨 return new Pear(); &#125; return null; &#125;&#125; // 使用FruitFactory mFactory = new FruitFactory();Apple apple = (Apple) mFactory.createFruit(\"apple\");//获得苹果Pear pear = (Pear) mFactory.createFruit(\"pear\");//获得梨 简单工厂只适合于产品对象较少，且产品固定的需求 5.2 工厂方法模式实现：12345678910111213141516171819202122 // 工厂接口public interface FruitFactory &#123; Fruit createFruit();//生产水果&#125; // 具体工厂public class AppleFactory implements FruitFactory &#123; @Override public Fruit createFruit() &#123; return new Apple(); &#125;&#125;public class PearFactory implements FruitFactory &#123; @Override public Fruit createFruit() &#123; return new Pear(); &#125;&#125; // 使用AppleFactory appleFactory = new AppleFactory();PearFactory pearFactory = new PearFactory();Apple apple = (Apple) appleFactory.createFruit();//获得苹果Pear pear = (Pear) pearFactory.createFruit();//获得梨 工厂方法模式虽然遵循了开闭原则，但如果产品很多的话，需要创建非常多的工厂 5.3 抽象工厂模式实现： 抽象工厂和工厂方法的模式基本一样，区别在于，工厂方法是生产一个具体的产品，而抽象工厂可以用来生产一组相同，有相对关系的产品；重点在于一组，一批，一系列； eg：假如生产小米手机，小米手机有很多系列，小米note、红米note等；假如小米note生产需要的配件有825的处理器，6英寸屏幕，而红米只需要650的处理器和5寸的屏幕就可以了；用抽象工厂来实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 // cpu接口和实现类public interface Cpu &#123; void run(); class Cpu650 implements Cpu &#123; @Override public void run() &#123;/* 625 也厉害 */ &#125; &#125; class Cpu825 implements Cpu &#123; @Override public void run() &#123; /* 825 处理更强劲 */ &#125; &#125;&#125; // 屏幕接口和实现类public interface Screen &#123; void size(); class Screen5 implements Screen &#123; @Override public void size() &#123;/* 5寸 */&#125; &#125; class Screen6 implements Screen &#123; @Override public void size() &#123; /* 6寸 */ &#125; &#125;&#125; // 工厂接口public interface PhoneFactory &#123; Cpu getCpu();//使用的cpu Screen getScreen();//使用的屏幕&#125; // 具体工厂实现类public class XiaoMiFactory implements PhoneFactory &#123; @Override public Cpu getCpu() &#123; return new Cpu.Cpu825();//高性能处理器 &#125; @Override public Screen getScreen() &#123; return new Screen.Screen6();//6寸大屏 &#125;&#125;public class HongMiFactory implements PhoneFactory &#123; @Override public Cpu getCpu() &#123; return new Cpu.Cpu650();//高效处理器 &#125; @Override public Screen getScreen() &#123; return new Screen.Screen5();//小屏手机 &#125;&#125; 对于大批量，多系列的产品，用抽象工厂可以更好的管理和扩展； 5.4 三种工厂方式总结： 对于简单工厂和工厂方法来说，两者的使用方式实际上是一样的，如果对于产品的分类和名称是确定的，数量是相对固定的，推荐使用简单工厂模式； 抽象工厂用来解决相对复杂的问题，适用于一系列、大批量的对象生产； 6.适配器模式（Adapter） 适配器模式Adapter是结构型模式的一种，分为类适配器模式，对象适配器模式，缺省适配器模式。 类的适配器模式把适配的类的API转换成为目标类的API。使用对象继承的方式，是静态的定义方式； 对象的适配器模式把被适配的类的API转换成为目标类的API，与类的适配器模式不同的是，对象的适配器模式不是使用继承关系，而是使用委派关系。一个适配器可以把多种不同的源适配到同一个目标。 适配器模式的缺点过多的使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是A接口，其实内部被适配成了B接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 6.1 缺省适配器模式 缺省适配(Default Adapter)模式为一个接口提供缺省实现，这样子类型可以从这个缺省实现进行扩展，而不必从原有接口进行扩展。作为适配器模式的一个特例，缺省是适配模式在JAVA语言中有着特殊的应用。 缺省适配模式是一种“平庸”化的适配器模式。(实现类不必实现接口所有方法或留空的方法，可以有选择性了) 适配器(通常是一个抽象类)添加某些具体实现(需要缺省的方法内部抛出异常)。","tags":[{"name":"Java","slug":"Java","permalink":"http://chaooo.github.io/tags/Java/"},{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"}]},{"title":"【Java教程】网络编程基础","date":"2017-05-22T03:59:46.000Z","path":"article/20170522.html","text":"网络编程是指编写运行在多个设备（计算机）的程序，这些设备都通过网络连接起来。java.net 包中的类和接口，它们提供低层次的通信细节。你可以直接使用这些类和接口，来专注于解决问题，而不用关注通信细节。 网络编程常识 基于tcp协议的编程模型 基于udp协议的编程模型 1. 网络编程常识1.1 七层网络模型为了保证数据传输的可靠和安全，ISO(国际标准委员会组织)将数据的传递从逻辑上划分为以下7层：应用层、表示层、会话层、传输层、网络层、数据链路层、物理层 当发送数据时，需要按照上述七层模型从上到下层层加包再发送出去； 当接收数据时，需要按照上述七层模型从下到上层层拆包再显示出来； 1.2 IP地址 IP地址：是互联网中的唯一地址标识，也就是根据IP地址可以定位到具体某一台设备，IP地址本质上是32位二进制组成的整数叫做IPv4，当然也有128位二进制组成的整数叫做IPv6，目前主流的还是IPv4。 日常生活中采用点分十进制表示法进行IP地址的描述，也就是将每个字节的二进制转换为一个十进制整数，不同的十进制整数之间采用小数点隔开。如：192.168.1.1 1.3 端口号 根据IP地址可以定位到具体某一台设备，而该设备中启动的进程可能很多，此时可以使用端口号来定位该设备中的具体某一个进程。 网络编程需要提供：IP地址 和 端口号 端口号是16位二进制组成的整数，表示范围是：0 ~ 65535，其中0 ~ 1024之间通常被系统占用，因此网络编程需要从1025开始使用。 1.4 tcp协议与udp协议 TCP（Transmission Control Protocol，传输控制协议） 是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“握手”才能建立起来。 UDP（User Data Protocol，用户数据报协议） 是一个非连接的协议，传输数据之前源端和终端不建立连接，当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上。在发送端，UDP传送数据的速度仅仅是受应用程序生成数据的速度、计算机的能力和传输带宽的限制；在接收端，UDP把每个消息段放在队列中，应用程序每次从队列中读一个消息段。 tcp协议与udp协议比较： tcp协议 udp协议 传输控制协议，面向连接 用户数据报协议，非面向连接 通信过程全程保持连接 通信过程不需要全程连接 保证了数据传输的可靠性和有序性 不保证数据传输的可靠性和有序性 全双工的字节流的通信方式 全双工的数据报的通信方式 服务器的资源消耗多，压力大，效率低 服务器资源消耗少，压力小，效率高 2. 基于tcp协议的编程模型2.1 编程模型123456服务器端 客户端创建监听服务等待连接 &lt;----建立连接------ 连接服务器 进行通讯 &lt;----进行通讯-----&gt; 进行通讯关闭连接 关闭连接 服务器： 创建ServerSocket类型的对象并提供端口号； 等待客户端的连接请求，调用accept方法； 使用输入输出流进行通信； 关闭Socket； 客户端： 创建Socket类型的对象并提供服务器的通信地址和端口号； 使用输入输出流进行通信； 关闭Socket； 2.2 ServerSocket类和Socket类 java.net.ServerSocket类主要用于描述服务器套接字信息。 常用方法 ServerSocket(int port) 根据参数指定的端口号来构造对象 Socket accept() 监听并接收到此套接字的连接请求 void close() 用于关闭套接字 java.net.Socket类主要用于描述客户端套接字，是两台机器间通信的端点。 常用方法 Socket(String host, int port) 根据指定主机名和端口号来构造对象 InputStream getInputStream() 用于获取当前套接字的输入流 OutputStream getOutputStream() 用于获取当前套接字的输出流 void close() 用于关闭套接字 3.客户端与服务端通信演示：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103//服务端线程public class ServerThread extends Thread &#123; private Socket s; public ServerThread(Socket s) &#123; this.s = s; &#125; @Override public void run() &#123; try &#123; // 3.使用输入输出流进行通信 BufferedReader br = new BufferedReader( new InputStreamReader(s.getInputStream())); PrintStream ps = new PrintStream(s.getOutputStream()); while(true) &#123; // 实现服务器接收到字符串内容后打印出来 // 当客户端没有发送数据时，服务器会在这里阻塞 String str = br.readLine(); //System.out.println(\"服务器接收到的数据是：\" + str); // 当服务器接收到\"bye\"后，则聊天结束 if(\"bye\".equalsIgnoreCase(str)) &#123; System.out.println(\"客户端\" + s.getInetAddress() + \"已下线！\"); break; &#125; System.out.println(\"客户端\" + s.getInetAddress() + \"发来的消息是：\" + str); // 当服务器接收到客户端发来的消息后，向客户端回发消息\"I received!\" ps.println(\"I received!\"); //System.out.println(\"服务器发送数据成功！\"); &#125; // 4.关闭Socket ps.close(); br.close(); s.close(); &#125; catch(Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125;//服务端测试public class ServerStringTest &#123; public static void main(String[] args) &#123; try &#123; // 1.创建ServerSocket类型的对象并提供端口号 ServerSocket ss = new ServerSocket(8888); // 2.等待客户端的连接请求，调用accept方法 while(true) &#123; System.out.println(\"等待客户端的连接请求...\"); // 当没有客户端连接时，阻塞在accept方法的调用这里 Socket s = ss.accept(); // 获取连接成功的客户端通信地址 System.out.println(\"客户端\" + s.getInetAddress() + \"连接成功！\"); // 当有客户端连接成功后，则启动一个新的线程为之服务 new ServerThread(s).start(); &#125; //ss.close(); &#125; catch(Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125;//客户端测试public class ClientStringTest &#123; public static void main(String[] args) &#123; try &#123; // 1.创建Socket类型的对象并提供服务器的通信地址和端口号 Socket s = new Socket(\"XDL-20170621QCO\", 8888); System.out.println(\"连接服务器成功！\"); // 2.使用输入输出流进行通信 Scanner sc = new Scanner(System.in); PrintStream ps = new PrintStream(s.getOutputStream()); BufferedReader br = new BufferedReader( new InputStreamReader(s.getInputStream())); while(true) &#123; // 希望客户端连接服务器成功后睡眠10秒再发送数据，测试服务器是否阻塞 //Thread.sleep(10000); // 练习：实现客户端向服务器发送的内容由用户从键盘输入 System.out.println(\"请输入要发送的内容：\"); //String msg = sc.next(); // 读取字符串内容时，遇到空格停止 String msg = sc.nextLine(); // 实现客户端向服务器发送字符串内容\"hello\" //ps.println(\"hello\"); ps.println(msg); System.out.println(\"客户端发送数据成功！\"); // 判断客户端发送的内容是否为\"bye\"，若是则聊天结束 if(\"bye\".equalsIgnoreCase(msg)) &#123; System.out.println(\"聊天结束！\"); break; &#125; // 实现服务器回发消息的接收 // 当客户端没有发送数据时，服务器会在这里阻塞 String str = br.readLine(); System.out.println(\"客户端接收到的数据是：\" + str); &#125; // 3.关闭Socket br.close(); sc.close(); ps.close(); s.close(); &#125; catch(Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 4. 基于udp协议的编程模型4.1 编程模型 主机A(接收方): 创建DatagramSocket类型的对象，并提供端口号； 创建DatagramPacket类型的对象，用于接收发来的数据； 从Socket中接收数据，调用receive()方法； 关闭Socket并释放有关的资源； 主机B(发送方) 创建DatagramSocket类型的对象； 创建DatagramPacket类型的对象，并提供接收方的IP地址和端口号； 通过Socket发送数据，调用send()方法； 关闭Socket并释放有关的资源； 4.2 DatagramSocket类 java.net.DatagramSocket类用于描述发送或接受数据报的套接字(邮局点); 常用方法 DatagramSocket() 无参的方式构造对象。 DatagramSocket(int port) 根据参数指定的端口号来构造对象。 void receive(DatagramPacket p) 用于接收数据并存放到参数指定的变量中。 void send(DatagramPacket p) 用于将参数指定的数据发送出去。 void close() 4.3 DatagramPacket类 java.net.DatagramPacket类用于描述数据报信息(信件)； 常用方法 DatagramPacket(byte[] buf, int length) 用于接收数据包并记录到参数变量中； DatagramPacket(byte[] buf, int length, InetAddress address, int port) 用于将参数指定的数据发送到参数指定的位置 InetAddress getAddress() 用于获取发送方或接收方的通信地址信息。 int getPort() 用于获取发送方或接收方的端口信息。 int getLength() 用于获取发送或接收数据的长度。 4.4 InetAddress类 java.net.InetAddress类用于描述互联网协议地址。 常用方法 static InetAddress getLocalHost() 用于获取本地主机的通信地址信息。 static InetAddress getByName(String host) 根据参数指定的主机名来获取通信地址。 String getHostName() 用于获取通信地址中的主机名信息。 String getHostAddress() 用于获取通信地址中的IP地址信息。","tags":[{"name":"Java","slug":"Java","permalink":"http://chaooo.github.io/tags/Java/"},{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"}]},{"title":"【Java教程】反射机制","date":"2017-05-18T07:47:15.000Z","path":"article/20170518.html","text":"反射(Reflection)是Java 程序开发语言的特征之一，它允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。多数情况下反射是为了提高程序的灵活性，运行时动态加载需要加载的对象。 基本概念 Class类 Constructor类 Field类 Method类 原始方式与反射方式构造对象实例 注解(Annotation) 1. 基本概念JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。 反射（reflect）就是把java类中的各种成分映射成一个个的Java对象；类是用来描述一组对象，反射机制可以理解为是用来描述一组类 通俗来讲，反射机制就是用于动态创建对象并且动态调用方法的机制；目前主流的框架底层都采用反射机制实现的。 1.1 相关类及描述 Class：用来描述类和接口；该类没有公共构造方法，由虚拟机和类加载器自动构造完成 Package：用来描述类所属的包 Field：用来描述类中的属性 Method：用来描述类中的方法 Constructor：用来描述类中的构造方法 Annotation：用来描述类中的注解 2. Class类java.lang.Class：用来描述类和接口；该类没有公共构造方法，由虚拟机和类加载器自动构造完成 2.1 获取Class类型对象的三种方式1234Class clazz = Class.forName(\"包名.类名\");//用的最多，但可能抛出ClassNotFoundException异常Class clazz = 类名.class;//任何类都有一个隐含的静态成员变量classClass clazz = 对象.getClass();//Object类中的方法Class clazz = 包装类.TYPE;//获取对应基本数据类型的class对象 2.2 常用方法 static Class&lt;?&gt; forName(String className) 用于获取参数指定对应的Class对象并返回 T newInstance() 默认调用无参数构造方法创建对象，若类中不存在无参数构造方法抛出异常NoSuchMethodException Constructor getConstructor(Class&lt;?&gt;… parameterTypes) 用于获取此Class对象所表示类型中参数指定的公共构造方法。 Constructor&lt;?&gt;[] getConstructors() 用于获取此Class对象所表示类型中所有的公共构造方法 Field getDeclaredField(String name) 用于获取此Class对象所表示类中参数指定的单个成员变量信息 Field[] fs = getDeclaredFields() 用于获取此Class对象所表示类中所有成员变量信息 Method getMethod(String name, Class&lt;?&gt;… parameterTypes) 用于获取该Class对象所表示类型中名字为name参数为parameterTypes的指定公共成员方法 Method[] getMethods() 用于获取该Class对象表示类中所有公共成员方法。 获取私有相关方法 getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)；获取该类对象表示的类或接口的指定构造函数(包括私有) getDeclaredConstructors()；获取该类对象所表示的类声明的所有构造函数(包括私有) getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes) 获取一个方法(自己类 公有 私有) getDeclaredMethods(); 获取全部的方法(自己类 公有 私有) 2.3 其他方法 int result = getModifiers(); 获取类的修饰符(权限+特征) 每一个修饰符 用一个整数来进行表示：0–默认不写，1–public，2–private，4–protected，-static， 16–final，32–synchronized，64volatile，128–transient，256–native，512–interface，1024–abstract String name = getName(); 获取类的全名(包名.类名) String name = getSimpleName(); 获取类简单名(只有类名 缺少包) Package p = getPackage(); 获取当前类所属的包 p.getName(); 获取包名(Package类中的方法) Class sclazz = getSuperClass(); 获取超类(父类)对应Class Class[] classes = getInterface(); 获取当前类父亲接口 Class[] classes = getClasses(); 获取类中的内部类 Object obj = newInstance(); 默认调用无参数构造方法创建对象，若类中不存在无参数构造方法抛出异常NoSuchMethodException Field f = getField(“属性名”); 获取类中的属性(公有的 自己类+父类) Field[] fs = getFields(); 获取类中的全部属性(公有的 自己类+父类) getDeclaredField(“属性”); 获取当前类中的属性(公有+私有 自己类) Field[] fs = getDeclaredFields(); 获取当前类中全部的属性(公有+私有 自己类) 3. Constructor类java.lang.reflect.Constructor类主要用于描述获取到的构造方法信息 3.1 Constructor类中的常用方法 T newInstance(Object… initargs) 使用此Constructor对象描述的构造方法来构造Class对象代表类型的新实例；该方法的参数用于给新实例中的成员变量进行初始化操作。 3.2 其他方法 con.getModifiers(); con.getName(); con.getParameterTypes(); con.getExceptionTypes(); 如何操作构造方法 执行一次,创建对象 Object = newInstance(执行构造方法时的所有参数); con.setAccessible(true); 4. Field类java.lang.reflect.Field类主要用于描述获取到的单个成员变量信息。 4.1 Field类中的常用方法 Object get(Object obj) 调用该方法的意义就是获取参数对象obj中此Field对象所表示成员变量的数值。 Object set(Object obj, Object value) 将参数对象obj中此Field对象表示成员变量的数值修改为参数value的数值。 void setAccessible(boolean flag) 当实参传递true时，则反射的对象在使用时应该取消java语言访问检查 4.2 其他方法 int = getModifiers(); 获取属性修饰符(权限+特征) Class = getType(); 获取属性的类型对应的那个class String = getName(); 获取属性的名字 操作属性: set(对象,值); Object = get(对象); 如果是私有属性不能直接操作的，需设置一个使用权setAccessable(true);准入 5. Method类java.lang.reflect.Method类主要用于描述获取到的单个成员方法信息。 5.1 Method类中的常用方法 Object invoke(Object obj, Object… args) 使用对象obj来调用此Method对象所表示的成员方法，实参传递args。 5.2 其他方法 int mm = m.getModifiers(); 获取方法的修饰符(权限+特征) Class mrt = m.getReturnType(); 获取返回值数据类型 String mn = m.getName(); 获取方法的名字 Class[] mpts = m.getParameterTypes(); 获取方法参数列表的类型 Class[] mets = m.getExceptionTypes(); 获取方法抛出异常的类型 如何操作方法 调用方法 让他执行一次 Object result = invoke(对象,执行方法需要传递的所有参数…); 若方法是私有的方法 不允许操作 可以设置setAccessable(true) 设置方法使用权 准入 6. 原始方式与反射方式构造对象实例 使用原始方式来构造对象 123456789 //1.采用无参的方式构造Person对象并打印Person p = new Person();System.out.println(p); //null 0 //2.使用有参方式来构造Person对象Person p2 = new Person(\"zhangfei\", 30);System.out.println(p2); //zhangfei 30 //3.修改与获取属性(成员变量)，调用get,set方法p2.setName(\"guanyu\");System.out.println(\"修改后的姓名是：\" + p2.getName()); //guanyu 使用反射机制来构造对象 123456789101112131415161718192021 //1.使用获取到的Class对象来构造Person对象并打印Class c1 = Class.forName(\"myproject.Person\");//不可省略包名System.out.println(c1.newInstance());//null 0 //2.使用有参方式来构造对象Class c2 = Class.forName(\"myproject.Person\");Constructor ct2 = c2.getConstructor(String.class, int.class);Object obj = ct2.newInstance(\"zhangfei\", 30);System.out.println(obj);//zhangfei 30 //3.修改与获取属性(成员变量)Field f2 = c2.getDeclaredField(\"name\");f2.setAccessible(true);//暴力反射，设置使用权f2.set(obj, \"guanyu\");System.out.println(\"修改后的姓名是：\" + f2.get(obj)); //guanyu //4.获取成员方法getName，使用获取到的成员方法来获取姓名并打印出来Method m1 = c2.getMethod(\"getName\");System.out.println(\"获取到的姓名是：\" + m1.invoke(obj)); //zhangfei //5.成员方法setName，调用getMethod方法来修改姓名并打印出来Method m2 = c2.getMethod(\"setName\", String.class);Object res = m2.invoke(obj, \"guanyu\");System.out.println(\"方法调用的返回值是：\" + res); //nullSystem.out.println(\"修改后的姓名是：\" + m1.invoke(obj)); //guanyu 7. 注解(Annotation)7.1 注解相关概念 注释 单行注释：// 多行注释：/* */ 文档注释：/** */ 注解的写法 @XXX [(一些信息)] 注解位置 类的上面，属性上面，方法上面，构造方法上面，参数前面 注解的作用 用来充当注释的作用(仅仅是一个文字的说明)，@Deprecated 用来做代码的检测(验证)，@Override *可以携带一些信息(内容)，文件.properties/.xml，注解 常用的注解 @Deprecated：用来说明方法是废弃的 @Override：用来做代码检测 检测此方法是否是一个重写 @SuppressWarnings(String[])：{“”}，如果数组内的元素只有一个长度，可以省略{} unused：变量定义后未被使用 serial：类实现了序列化接口 不添加序列化ID号 rawtypes：集合没有定义泛型 deprecation：方法以废弃 *unchecked：出现了泛型的问题 可以不检测 all：包含了以上所有(不推荐) 注解中可以携带信息，可以不携带；信息不能随意写，信息的类型只能是如下的类型： 基本数据类型 String类型 枚举类型enum 注解类型@ 数组类型[]，数组的内部需要是如上的四种类型 注解的分类 按运行机制分：源码注解，编译时注解，运行时注解 按照来源分：来自JDK的注解，来自第三方的注解，自定义注解 7.2 自定义注解类型的语法要求： 使用@interface关键字定义注解 成员以无参无异常方式声明 可以用default为成员指定一个默认值 成员类型是受限的，合法类型包括原始类型及String,Class,Annotation,Enumeration 如果注解只有一个成员，则成员名必须取名value(),在使用时可以忽略成员名和赋值号(=) 注解类可以没有成员，没有成员的注解称为标识注解 需要元注解来描述说明 @Target：当前注解的放置(CONSTRUCTOR，FIELD，LOCAL_VARIABLE，METHOD，PACKAGE，PARAMETER，TYPE) @Retention：当前注解的生命周期作用域(SOURCE，CLASS，RUNTIME)，源代码文件(SOURCE)—&gt;编译—&gt;字节码文件(CLASS)—&gt;加载—&gt;内存执行(RUNTIME) @Inherited：允许子类继承 @Document：当前注解是否能被文档(javadoc)所记录 123456789@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Inherited@Documentedpublic @interface Description&#123; String desc(); String author(); int age() default 18;&#125; 7.3 使用自定义注解： @&lt;注解名&gt;(&lt;成员名1&gt;=&lt;成员值1&gt;,&lt;成员名2&gt;=&lt;成员值2&gt;,…) 1234@Description(desc=\"I am eyeColor\", author=\"Chao\", age=18)public String eyeColor()&#123; return \"red\";&#125; 如果自定义注解只有一个value成员，在使用的时候就可以省略方法名，如果方法是两个以上，每一个方法必须写名字 1234567891011121314@Description(\"I am class annotation\")public class Child implements Person&#123; @Override @Description(\"I am method annotation\") public String name()&#123; return null; &#125; @Override public int age()&#123; return 0; &#125; @Override public void sing()&#123; &#125;&#125; 7.4 解析注解通过反射获取类、函数或成员上的运行时注解信息，从而实现动态控制程序运行的逻辑。 使用类加载器加载类 Class c=Class.forName（&quot;com.ann.test.Child&quot;) 找到类上面的注解 isAnnotationPresent（类类型）：Class对象的方法，判断当前类类型是否存在某个类类型的注解，返回类型为boolean。 拿到注解实例，需要强制类型转换。 Description d=（Description）c.getAnnotation(Description.class); 找到方法上的注解，首先，遍历所有方法，通过方法对象的isAnnotation查看是否有自定义注解。 12345678910111213141516171819202122232425public class ParseAnn&#123; public static void main(String[])&#123; try&#123;//1. 使用类加载器加载类 Class c=Class.forName（\"com.ann.test.Child\") //2. 找到类上面的注解 boolean isExist = c.isAnnotationPresent(Description.class); if(isExist)&#123; //3. 拿到注解实例 Description d=（Description）c.getAnnotation(Description.class); System.out.println(d.value()); &#125; //4.找到方法上的注解 Method[] ms = c.getMethods(); for(Method m:ms)&#123; boolean isMExist = m.isAnnotationPresent(Description.class); if(isMExist)&#123; Description md=（Description）c.getAnnotation(Description.class); System.out.println(md.value()); &#125; &#125; &#125;catch(ClassNotFoundException e)&#123; e.printStackTrace(); &#125; &#125;&#125; 另一种解析方法上的注解: 获取这个方法的所有注解，Annotation [] as=m.getAnnotations();然后遍历该注解，如果遍历的注解是Description类型，则把遍历的注解强转为Description类型，并进行输出value()信息。 123456789for(Method m:ms)&#123; Annotation [] as=m.getAnnotations(); for(Annotation a:as)&#123; if(a instanceof Description)&#123; Description md = (Description)a; System.out.println(md.value()); &#125; &#125;&#125; @Inherited:当自定义注解上使用了该注解，如果在父类上标识该注解，解析一个子类，子类也可以获取该注解的信息。","tags":[{"name":"Java","slug":"Java","permalink":"http://chaooo.github.io/tags/Java/"},{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"}]},{"title":"【Java教程】多线程","date":"2017-05-12T10:07:41.000Z","path":"article/20170512.html","text":"多线程的存在，不是提高程序的执行速度。其实是为了提高应用程序的使用率。程序的执行其实都是在抢CPU的资源，CPU的执行权。多个进程是在抢这个资源，而其中的某一个进程如果执行路径(线程)比较多，就会有更高的几率抢到CPU的执行权。 基本概念 实现线程的过程 线程常用方法 线程池 线程的主要状态 线程的同步机制 线程的死锁 内存可见性 1. 基本概念 程序：数据结构 + 算法，主要指存放在硬盘上的可执行文件。 进程：主要指运行在内存中的程序；每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含n个线程；(进程是系统进行资源分配和调度的一个独立单位)。 线程：线程是进程的一个实体，同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小；(线程是cpu调度和分派的最小单位)。 多进程是指操作系统能同时运行多个任务（程序）。 多线程是指在同一程序(一个进程)中有多个顺序流在执行。 并行与并发： 并行：多个cpu实例或者多台机器同时执行一段处理逻辑，是真正的同时。 并发：通过cpu调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时。并发往往在场景中有公用的资源，那么针对这个公用的资源往往产生瓶颈，我们会用TPS或者QPS来反应这个系统的处理能力。 线程和进程一样分为五个阶段：创建、就绪状态、执行状态、等待/挂起/阻塞、终止/异常/消亡。 2. 实现线程的过程java.lang.Thread类主要用于描述线程，Java虚拟机允许应用程序并发地运行多个执行线程。 自定义类继承Thread类并重写run方法，然后创建该类的实例调用start方法。 自定义类实现Runnable接口并重写run方法，然后创建该类的对象作为实参去构造Thread类型的对象，最后使用Thread类对象调用start方法。 2.1 实现方式一：继承Thread类 自己描述一个类 继承父类Thread 重写run方法 new一个线程对象，调用start()方法，让线程进入就绪状态(需要注意的是start方法是Thread类中的) 12345678class MyThread extends Thread&#123; @Override public void run()&#123; //这里编写该线程的执行任务 &#125;&#125;MyThread mt = new MyThread();mt.start(); 2.2 实现方式二：实现Runnable接口 自己描述一个类 实现一个父接口Runnable 重写run方法 new一个线程对象，new一个Thread并传入线程对象，调用start()方法，让线程进入就绪状态 123456789class MyThread implements Runnable&#123; @Override public void run()&#123; //这里编写该线程的执行任务 &#125;&#125;MyThread mt = new MyThread();Thread td = new Thread(mt);td.start(); 2.3 两种方式优缺点： 使用继承Thread方式代码简单，但Java语言只支持单继承，若该类继承Thread类后则无法继承其他类 使用实现Runnable的方式代码复杂，但不影响该类继承其他类，并且支持多实现，适合多个相同程序代码的线程去处理同一个资源，增加程序健壮性，代码可以被多个线程共享，代码和数据独立。 3. 线程常用方法 3.1 相关方法的解析： Thread()：使用无参方式构造对象 Thread(String name)：根据参数指定的名称来构造对象。 Thread(Runnable target)：根据参数指定的Runnable引用来构造对象。 Thread(Runnable target, String name)：根据参数指定的Runnable引用和名称构造对象。 void run()：若使用Runnable对象作为参数构造的对象来调用该方法，则最终调用Runnable对象中的run方法，否则该方法啥也不做。 void start()：用于启动线程，除了主方法线程外新启动一个线程同时执行，Java虚拟机会自动调用该线程的run方法。 int getPriority()：用于获取线程的优先级，优先级1-10 void setPriority(int)：更改线程的优先级 3.2 多线程原理分析 执行main方法的线程叫做主线程，而执行run方法的线程叫做子线程。 对于start方法之前的代码来说，由主线程执行一次，当start方法调用成功之后，线程的个数由1个变成了2个，主线程继续向下执行，而新启动的线程去执行run方法的代码，两个线程各自独立运行。 当run方法执行完毕后，则子线程结束；当main方法执行完毕后，则主线程结束。 两个线程执行的先后次序没有明确的规定，由系统的调度算法决定。 3.3 线程的编号和名称 long getId()：用于获取调用对象所表示线程的编号 String getName()：用于获取调用对象所表示线程的名称 void setName()：用于设置线程的名称为参数指定的数值 static Thread currentThread()：获取当前正在执行线程的引用 4. 线程池 为了避免重复的创建线程，线程池的出现可以让线程进行复用。通俗点讲，当有工作来，就会向线程池拿一个线程，当工作完成后，并不是直接关闭线程，而是将这个线程归还给线程池供其他任务使用。 在线程池的编程模式下，任务是提交给整个线程池，而不是直接交给某个线程，线程池在拿到任务后，它就在内部找有无空闲线程，再把任务交给内部某个空闲线程。 一个线程同时只能执行一个任务，但可以同时向一个线程池提交多个任务 接口：Executor,CompletionService,ExecutorService，ScheduledExecutorService 抽象类：AbstractExecutorService 实现类：ExecutorCompletionService，ThreadPoolExecutor，ScheduledThreadPoolExecutor 创建线程的第三种方式是实现Callable接口，主要用于线程池 5. 线程的主要状态 新建状态：使用new关键字创建线程后进入状态，此时线程还没有开始执行 就绪状态：调用start()进入的状态，此时线程还是没有开始执行 运行状态：使用线程调度器调用该线程后进入的状态(获得CPU执行权)，此时线程开始执行，当线程的时间片执行完毕后若没有完成就回到就绪状态，若任务完成进入消亡状态 消亡状态：当线程的任务执行完成之后进入的状态，此时线程已经终止 阻塞状态：当线程执行过程中发生了阻塞事件进入的状态，阻塞解除后再回到就绪状态 5.1 线程的休眠 终止线程：通常使用退出标识，使线程正常退出，也就是当 run() 方法完成后线程终止。 static void yield()：当线程让出处理器(离开Running状态)，使用当前线程进入Runnable状态等待。 static void sleep(times)：使当前线程从Running放弃处理器进入Block状态，休眠times毫秒，再返回到Runnable如果其他线程打断当前线程的Block(sleep)，就会发生InterruptException。 5.1 线程的等待 void join()：等待该线程终止，让多个线程同步执行，变成单个线程 void join(long millis)：表示等待参数指定的毫秒数 对象.wait() 和 对象.notify()/notifyAll()可以让线程的状态来回切换 sleep()和wait()的区别： sleep()和wait()的区别 sleep() wait() 1.类 Thread类 Object类 2.调用 静态 类名. 对象. 3.理解 调用位置的线程等待 对象调用，访问对象的其他线程等待 4.唤醒 不需要唤醒 需要其他对象调用notify唤醒 5.锁 不会释放锁 等待后会释放锁 5.2 守护线程 boolean isDeamon()：用于判断是否为守护线程 void setDeamon(boolean on)：用于设置线程为守护线程 Java线程有两类： 用户线程：运行在前台，执行具体任务；程序的主线程、连接网络的子线程等都是用户线程 守护线程：运行在后台，为其他前台线程服务 守护线程特点： 一旦所有线程都结束运行，守护线程会随JVM一起结束工作 守护线程应用： 数据库连接池中检测的线路，JVM虚拟机启动后的监测线程；最常见的是垃圾回收线程。 设置守护线程： 可以通过调用Thread类的setDeamon(true)方法来设置当前的线程为守护线程 6. 线程的同步机制 条件争用：当多个线程同时共享访问同一数据时，每个线程都尝试操作该数据，从而导致数据被破坏(corrupted)，这种现象称为争用条件。 当多个线程同时访问同一种共享资源时，可能会造成数据的覆盖等不一致性问题，此时就需要对多个线程之间进行通信和协调，该机制就叫做线程的同步机制。 Java提供了一种内置的锁机制来支持原子性，使用synchronized关键字来保证线程执行操作的原子性，叫做对象/同步锁机制。 特征修饰符synchronized：表示同步，一个时间点只有一个线程访问 线程安全锁：两种形式是（锁定的永远是对象） 使用同步代码块的方式，将synchronized关键字放在方法体内部 123synchronized(对象)&#123; //需同步执行(锁定)的代码&#125; 使用同步方法的方式处理，直接使用synchronized关键字修饰整个方法，锁定的是调用方法的那个对象 1public synchronized void 方法名()&#123;&#125; 使用synchronized保证线程同步时应当注意： 多个需要同步的线程在访问该同步块时，看到的应该时同一个锁对象引用 在使用同步块时应当尽量减少同步范围以提高并发的执行效率 无论synchronized关键字加在方法上还是对象上，它取得的锁都是对象，而不是把一段代码或函数当作锁――而且同步方法很可能还会被其他线程的对象访问。 每个对象只有一个锁（lock）与之相关联。 实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。 7. 线程的死锁Java线程死锁是一个经典的多线程问题，因为不同的线程都在等待那些根本不可能被释放的锁，从而导致所有的工作都无法完成。 123456789101112131415161718/**当两个线程或多个线程之间相互锁定时就形成了死锁**///线程一：public void run() &#123; synchronized(a) &#123; //表示:持有对象锁a,等待对象锁b synchronized(b) &#123; //... &#125; &#125;&#125;//线程二：public void run() &#123; synchronized(b) &#123; //表示:持有对象锁b,等待对象锁a synchronized(a) &#123; //... &#125; &#125;&#125;// 注意：在以后的开发中尽量不要使用同步代码块的嵌套结构。 产生死锁的必要条件：a.互斥条件、b.不可抢占条件、c.占有且申请条件、d.循环等待条件。 隐性死锁：隐性死锁由于不规范的编程方式引起，但不一定每次测试运行时都会出现程序死锁的情形。由于这个原因，一些隐性死锁可能要到应用正式发布之后才会被发现，因此它的危害性比普通死锁更大。 两种导致隐性死锁的情况：加锁次序和占有并等待。 加锁次序：当多个并发的线程分别试图同时占有两个锁时，会出现加锁次序冲突的情形。如果一个线程占有了另一个线程必需的锁，就有可能出现死锁。 占有并等待：如果一个线程获得了一个锁之后还要等待来自另一个线程的通知，可能出现另一种隐性死锁。 7.1 死锁的避免 避免死锁的原则：顺序上锁，反向解锁，不要回头 静态策略：使产生死锁的四个必要条件不能同时具备，从而对进程申请资源的活动加以限制，以保证死锁不会发生。 动态策略：不限制进程有关申请资源的命令，而是对进程所发出的每一个申请资源命令加以动态地检查，并根据检查结果决定是否进行资源分配。具体策略有：安全序列和银行家算法。 8.内存可见性8.1 基本概念 可见性：一个线程对共享变量值的修改，能够及时的被其他线程看到 共享变量：如果一个变量在多个线程的工作内存中都存在副本，那么这个变量就是这几个线程的共享变量 Java内存模型(JMM)： Java Memory Model描述了Java程序中各种变量(线程共享变量)的访问规则，以及在JVM中将变量存储到内存中和从内存中读取变量这样的底层细节。 所有的变量都存储在主内存中 每个线程都有自己的独立的工作内存，里面保存该线程使用到的变量的副本(来自主内存的拷贝) Java内存模型规定： 线程对共享变量的所有操作都必须在自己的工作内存中进行，不能直接从主内存中读写。 不同线程之间无法直接访问其他线程工作内存中的变量，线程间变量值的传递需要通过主内存来完成。 要实现共享变量的可见性，必须保证两点： 线程修改后的共享变量值能够及时从工作内存中刷新到主内存中 其他线程能够及时把共享变量的最新值从主内存更新到自己的工作内存中。 Java语言层面支持的可见性实现方式：Synchronized，volatile 8.2 Synchronized实现可见性 Synchronized能够实现：原子性(同步)、可见性 JMM关于synchronized的两条规定： 线程解锁前，必须把共享变量的最新值刷新到主内存中 线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从内存中重新读取最新的值（注意：加锁与解锁需要是同一把锁） 线程执行互斥代码的过程： 获得互斥锁 清空工作内存 从主内存拷贝变量的最新副本到工作内存 执行代码 将更改后的共享变量的值刷新到主内存 释放互斥锁 重排序：代码的书写顺序与实际的执行顺序不同，指令重排序是编译器或处理器为了性能而做的优化 编译器优化重排序（编译器处理） 指令级并行重排序（处理器优化） 内存系统的重排序（处理器读写缓存的优化） as-is-serial:无论如何重排序，程序执行的结果应该与代码的顺序执行结果一致 单线程中重排序不会带来内存可见性问题 多线程中程序交错执行时，重排序可能造成内存可见性问题 不可见的原因 syschronized解决方案 1.线程的交叉执行 原子性 2.重排序结合线程交叉执行 原子性 3.共享变量未及时更新 可见性 8.3 volatile实现可见性 深入来说：通过加入内存屏障和禁止重排序优化来实现的。 对volatile变量执行写操作时，会在写操作后加入一条store屏蔽指令 对volatile变量执行读操作时，会在读操作前加入一条load屏蔽指令 通俗地讲：volatile变量在每次被线程访问时，都强迫从主内存中重读该变量的值，而当该变量发生变化时，又会强迫线程将最新的值刷新到主内存。这样任何时刻，不同的线程总能看到该变量的最新值。 线程写volatile变量的过程： 改变线程工作内存中volatile变量副本的值 将改变后的副本的值从工作内存刷新到主内存 线程读volatile变量的过程： 从主内存中读取volatile变量的最新值到线程的工作内存中 从工作内存中读取volatile变量的副本 volatile不能保证volatile变量复合操作的原子性 volatile适用场景： 对变量的写操作不依赖其当前值 该变量没有包含在具有其他变量的不变式中 8.4 Synchronized和volatile比较 volatile不需要加锁，比synchronized更轻量级，不会阻塞线程； 从内存可见性角度讲，volatile读相当于加锁，volatile写相当于解锁 synchronized既能保证可见性，又能保证原子性，而volatile只能保证可见性，无法保证原子性 volatile没有synchronized使用广泛。","tags":[{"name":"Java","slug":"Java","permalink":"http://chaooo.github.io/tags/Java/"},{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"}]},{"title":"【Java教程】IO机制","date":"2017-05-05T09:31:22.000Z","path":"article/20170505.html","text":"输入输出（I/O）是指程序与外部设备或其他计算机进行交互的操作。几乎所有的程序都具有输入与输出操作，Java把这些输入与输出操作用流来实现，通过统一的接口来表示，从而使程序设计更为简单。 File类 IO流 文件流 字节型文件流 字符型文件流 *缓冲流 转换流 对象流 打印流(PrintStream类) Properties类的使用 1. File类 File与真实硬盘中的文件或文件夹 不是一个东西 File是在内存中的一个对象&lt;—映射—&gt;硬盘上的文件或文件夹 java.io.File类用于文件或目录信息(名称、大小等)的抽象表示方式，不能对文件内容进行访问。 File类中的常用的方法 canRead()，canWrite()，isHidden()，isFile()，isDirectory() length()，获取文件中字节的个数 lastModified()，获取文件最后的修改时间—&gt;毫秒值 *String path = getAbsolutePath()，获取文件的绝对路径 D://test//Test.txt 绝对路径&lt;—-&gt;相对路径 绝对路径可以通过完整的字符串，定位盘符，文件夹，文件 相对路径没有盘符的写法，当前工程(项目)所在的位置找寻 String name = getName()，获取文件的名字 Test.txt boolean = *createNewFile()**，创建新的文件 boolean = *mkdir** ，创建新的文件夹 外层没有 不能创建 boolean = *mkdirs**，创建新的文件夹 外层没有 可以自动创建 String pname = getParent()，获取当前file的父亲file名字 *File file = getParentFile()，获取当前file的父亲file对象 String[] names = list()，获取当前file的所有儿子名字 *File[] files = listFiles()，获取当前file的所有儿子对象 *boolean = delete()，删除文件或空的文件夹 不能删除带元素的文件夹 文件夹的路径(找父目录) 1234567//查找当前file的所有父目录File file = new File(\"D:\\\\test\\\\bbb\\\\inner\\\\InnerTest.txt\");File pfile = file.getParentFile();while(pfile!=null)&#123; System.out.println(pfile.getAbsolutePath()); pfile = pfile.getParentFile();//再找一遍&#125; 文件夹的遍历—-需要一个递归 123456789101112131415//设计一个方法 用来展示(遍历)文件夹,参数--&gt;file(代表文件或文件夹)public void showFile(File file)&#123; //获取file的子元素 //files==null是个文件 //files!=null是个文件夹 //files.length!=0是一个带元素的文件夹 File[] files = file.listFiles();//test文件夹所有子元素 if(files!=null &amp;&amp; files.length!=0)&#123; for(File f:files)&#123; this.showFile(f); &#125; &#125; //做自己的显示(file是文件或file是一个空的文件夹) System.out.println(file.getAbsolutePath());&#125; 文件夹的删除—-需要一个递归 123456789101112//设计一个方法 删除文件夹,参数 filepublic void deleteFile(File file)&#123; //判断file不是空文件夹 File[] files = file.listFiles(); if(files!=null &amp;&amp; files.length!=0)&#123; for(File f:files)&#123; this.deleteFile(f); &#125; &#125; //删除file (file是个文件或file是一个空文件夹) file.delete();&#125; 2. IO流 流的本质是数据传输，根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作。 流的分类: 根据处理数据类型的不同分为：字符流和字节流 根据数据流向不同分为：输入流in(读取)和输出流out(写入) 操作的目标来区分: 文件流，数组流，字符串流，数据流，对象流，网络流… IO流的框架结构 123456789101112131415161718|——IO流 |————字节流 |————InputStream |————FileInputStream |————DataInputStream |————ObjectInputStream |————OutputStream |————FileOutputStream |————DataOutputStream |————ObjectOutputStream |————PrintStream |————字符流 |————Reader |————BufferedReader |————InputStreamReader |————Writer |————BufferedWriter |————OutputStreamWriter 3. 文件流读取文件中的信息in，将信息写入文件中out；文件流按照读取或写入的单位(字节数)大小来区分 字节型文件流(1字节)：FileInputStream/FileOutputStream 字符型文件流(2字节–1字符)：FileReader/FileWriter 字节流和字符流的区别： 读写单位不同：字节流以字节（8bit）为单位，字符流以字符为单位，根据码表映射字符，一次可能读多个字节。 处理对象不同：字节流能处理所有类型的数据（如图片、avi等），而字符流只能处理字符类型的数据。 结论：只要是处理纯文本数据，就优先考虑使用字符流。 除此之外都使用字节流。 输入流和输出流 对输入流只能进行读操作，对输出流只能进行写操作。 4. 字节型文件流4.1 字节型文件输入流FileInputStream(读) FileInputStream类在java.io包，继承自InputStream类(字节型输入流的父类)。 创建对象 调用一个带File类型的构造方法 调用一个带String类型的构造方法 常用方法 int code = read(); 每次从流管道中读取一个字节，返回字节的code码 *int count = read(byte[] ) 每次从流管道中读取若干个字节，存入数组内 返回有效元素个数 int count = available(); 返回流管道中还有多少缓存的字节数 skip(long n);跳过几个字节 读取 多线程—&gt;利用几个线程同时读取文件 *close() 将流管道关闭—必须要做,最好放在finally里 注意代码的健壮性，判断严谨（eg:非空判断） 4.2 字节型文件输出流FileOutputStream(写) FileOutputStream类在java.io包，继承自OutputStream类(所有字节型输出流的父类)。 创建对象 调用一个带File参数，还有File boolean重载 调用一个带String参数，还有String boolean重载 eg: new FileOutputStream(“D://test//bbb.txt”, true)//第二个参控制每次写入追加还是重载 常用方法 write(int code); 将给定code对应的字符写入文件 ‘=’ write(byte[]); 将数组中的全部字节写入文件 getByte() write(byte[] b, int off, int len); flush(); 将管道内的字节推入(刷新)文件 close(); 注意在finally中关闭 创建的是文件输入流，若文件路径有问题，则抛出异常 FileNotFoundException 创建的是文件输出流，若文件路径有问题，则直接帮我们创建一个新的文件 设计一个文件复制的方法 12345678910111213141516171819202122232425262728293031323334public void copyFile(File file, String path) &#123; FileInputStream fis = null; FileOutputStream fos = null; try &#123; //创建输入流读取信息 fis = new FileInputStream(file); //创建一个新的File对象 File newFile = new File(path +\"\\\\\"+ file.getName());//\"E:\\\\test\\\\test.txt\" //创建一个输出流 fos = new FileOutputStream(newFile); byte[] b = new byte[1024];//通常1kb-8kb之间 int count = fis.read(b); while(count != -1) &#123; fos.write(b, 0, count);//将读取到的有效字节写入 fos.flush(); count = fis.read(b); &#125; System.out.println(\"复制完毕！\"); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; //关闭 if(fis!=null) &#123; try &#123; fis.close(); &#125; catch (IOException e) &#123;e.printStackTrace();&#125; &#125; if(fos!=null) &#123; try &#123;fos.close();&#125; catch (IOException e) &#123;e.printStackTrace();&#125; &#125; &#125;&#125; 5. 字符型文件流FileReader/FileWriter：只能操作纯文本的文件 .txt / .properties 5.1 字符型文件输入流FileReader(读) FileReader类在java.io包，继承自InputStreamReader，Reader 创建对象 调用一个带File类型的构造方法 调用一个带String类型的构造方法 常用方法 read() read(char[]) close() 12345678910111213141516File file = new File(\"F://test//Test.txt\");try &#123; FileReader fr = new FileReader(file); // int code = fr.read(); // System.out.println(code); char[] c = new char[1024]; int count = fr.read(c); while(count!=-1) &#123; System.out.println(new String(c, 0, count)); count = fr.read(c); &#125;&#125; catch (FileNotFoundException e) &#123; e.printStackTrace();&#125; catch (IOException e) &#123; e.printStackTrace();&#125; 5.2 字符型文件输出流FileWriter(写) FileWriter类在java.io包，继承自OutputStreamWriter，Writer 构造方法 带file参数，带file,boolean参数 带String参数，带String,boolean参数 常用方法 write(int) write(char[]) write(string) flush()，close() 6. *缓冲流 缓冲流,也叫高效流，是对4个基本的File…流的增强，所以也是4个流，按照数据类型分类： 字节缓冲流：BufferedInputStream，BufferedOutputStream 字符缓冲流：BufferedReader，BufferedWriter 缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。 缓冲流读写方法与基本的流是一致 6.1 字节缓冲流 BufferedInputStream，BufferedOutputStream 构造方法 public BufferedInputStream(InputStream in) ：创建一个 新的缓冲输入流。 public BufferedOutputStream(OutputStream out)： 创建一个新的缓冲输出流。 1234// 创建字节缓冲输入流BufferedInputStream bis = new BufferedInputStream(new FileInputStream(\"bis.txt\"));// 创建字节缓冲输出流BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(\"bos.txt\")); 6.2 字符缓冲流 BufferedReader，BufferedWriter 构造方法 public BufferedReader(Reader in) ：创建一个 新的缓冲输入流。 public BufferedWriter(Writer out)： 创建一个新的缓冲输出流。 1234// 创建字符缓冲输入流BufferedReader br = new BufferedReader(new FileReader(\"br.txt\"));// 创建字符缓冲输出流BufferedWriter bw = new BufferedWriter(new FileWriter(\"bw.txt\")); 字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。 特有方法: BufferedReader：public String readLine(): 读一行文字。 BufferedWriter：public void newLine(): 写一行行分隔符,由系统属性定义符号。 12345678910111213141516171819202122//设计一个方法，用来用户登录认证public String login(String username, String password) &#123; try &#123; BufferedReader br = new BufferedReader(new FileReader(\"F://test//User.txt\")); //User.txt每行存储格式：张三-123 String user = br.readLine();//user表示一行记录，记录账号密码 while(user!=null) &#123; //将user信息拆分，分别与参数比较 String[] value = user.split(\"-\");//value[0]账号，value[1]密码 System.out.println(value[0]); if(value[0].equals(username)) &#123; if(value[1].equals(password)) &#123; return \"登录成功\"; &#125; &#125; user = br.readLine(); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; return \"账号或密码错误！\";&#125; readLine方法演示: 12345678try &#123; BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;F://test//User.txt&quot;, true)); bw.newLine(); bw.write(&quot;java-888&quot;); bw.flush();&#125; catch (IOException e) &#123; e.printStackTrace();&#125; 7. 转换流7.1 字符编码 字符编码Character Encoding : 就是一套自然语言的字符与二进制数之间的对应规则。 字符集 Charset：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。 常见字符集: ASCII字符集 ： ASCII（American Standard Code for Information Interchange，美国信息交换标准代码） ISO-8859-1字符集： 拉丁码表，别名Latin-1，用于显示欧洲使用的语言；ISO-8859-1使用单字节编码，兼容ASCII编码。 GBxxx字符集： GB就是国标的意思，是为了显示中文而设计的一套字符集。 GB2312（简体中文码表），GBK（最常用的中文码表），GB18030（最新的中文码表） Unicode字符集 ： Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。 UTF-8、UTF-16和UTF-32；最为常用的UTF-8编码。 编码引出的问题 在IDEA中，使用FileReader 读取项目中的文本文件。由于IDEA的设置，都是默认的UTF-8编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。 7.2 InputStreamReader类转换流java.io.InputStreamReader，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 构造方法 InputStreamReader(InputStream in): 创建一个使用默认字符集的字符流。 InputStreamReader(InputStream in, String charsetName): 创建一个指定字符集的字符流。 12InputStreamReader isr = new InputStreamReader(new FileInputStream(\"in.txt\"));InputStreamReader isr2 = new InputStreamReader(new FileInputStream(\"in.txt\") , \"GBK\"); 指定编码读取: 12345678910111213141516171819202122public class ReaderDemo2 &#123; public static void main(String[] args) throws IOException &#123; // 定义文件路径,文件为gbk编码 String FileName = \"E:\\\\file_gbk.txt\"; // 创建流对象,默认UTF8编码 InputStreamReader isr = new InputStreamReader(new FileInputStream(FileName)); // 创建流对象,指定GBK编码 InputStreamReader isr2 = new InputStreamReader(new FileInputStream(FileName) , \"GBK\");// 定义变量,保存字符 int read; // 使用默认编码字符流读取,乱码 while ((read = isr.read()) != -1) &#123; System.out.print((char)read); // ��Һ� &#125; isr.close(); // 使用指定编码字符流读取,正常解析 while ((read = isr2.read()) != -1) &#123; System.out.print((char)read);// 大家好 &#125; isr2.close(); &#125;&#125; 7.3 OutputStreamWriter类转换流java.io.OutputStreamWriter ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 构造方法 OutputStreamWriter(OutputStream in): 创建一个使用默认字符集的字符流。 OutputStreamWriter(OutputStream in, String charsetName): 创建一个指定字符集的字符流。 12OutputStreamWriter isr = new OutputStreamWriter(new FileOutputStream(\"out.txt\"));OutputStreamWriter isr2 = new OutputStreamWriter(new FileOutputStream(\"out.txt\") , \"GBK\"); 指定编码写出 123456789101112131415161718public class OutputDemo &#123; public static void main(String[] args) throws IOException &#123; // 定义文件路径 String FileName = \"E:\\\\out.txt\"; // 创建流对象,默认UTF8编码 OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(FileName)); // 写出数据 osw.write(\"你好\"); // 保存为6个字节 osw.close();// 定义文件路径String FileName2 = \"E:\\\\out2.txt\"; // 创建流对象,指定GBK编码 OutputStreamWriter osw2 = new OutputStreamWriter(new FileOutputStream(FileName2),\"GBK\"); // 写出数据 osw2.write(\"你好\");// 保存为4个字节 osw2.close(); &#125;&#125; 8. 对象流 对象序列化和反序列化 Java 提供了一种对象序列化的机制。用一个字节序列可以表示一个对象，该字节序列包含该对象的数据、对象的类型和对象中存储的属性等信息。字节序列写出到文件之后，相当于文件中持久保存了一个对象的信息。 反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化。对象的数据、对象的类型和对象中存储的数据信息，都可以用来在内存中创建对象 简单来讲 对象的序列化指的是：将一个完整的对象 拆分成字节碎片 记录在文件中 对象的反序列化指的是：将文件中记录的对象随便 反过来组合成一个完整的对象 如果想要将对象序列化到文件中：需要让对象实现Serializable接口，是一个示意性接口；如果想要将对象反序列化：需要给对象提供一个序列化的版本号，private long serialVersionUID = 任意L; 8.1 ObjectOutputStream类 java.io.ObjectOutputStream 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。 构造方法 public ObjectOutputStream(OutputStream out)： 创建一个指定OutputStream的ObjectOutputStream。 12FileOutputStream fileOut = new FileOutputStream(\"employee.txt\");ObjectOutputStream out = new ObjectOutputStream(fileOut); 序列化操作 一个对象要想序列化，必须满足两个条件: 该类必须实现java.io.Serializable 接口，Serializable 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出NotSerializableException 。 该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用transient 关键字修饰。 写出对象方法 public final void writeObject (Object obj) : 将指定的对象写出。1234567891011121314151617181920212223242526272829303132//满足两个条件public class Employee implements java.io.Serializable &#123; public String name; public String address; public transient int age; // transient瞬态修饰成员,不会被序列化 public void addressCheck() &#123; System.out.println(\"Address check : \" + name + \" -- \" + address); &#125;&#125;//写出对象方法public class SerializeDemo&#123; public static void main(String [] args) &#123; Employee e = new Employee(); e.name = \"zhangsan\"; e.address = \"beiqinglu\"; e.age = 20; try &#123; // 创建序列化流对象 ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\"employee.txt\")); // 写出对象 out.writeObject(e); // 释放资源 out.close(); fileOut.close(); System.out.println(\"Serialized data is saved\"); // 姓名，地址被序列化，年龄没有被序列化。 &#125; catch(IOException i) &#123; i.printStackTrace(); &#125; &#125;&#125;//输出结果：//Serialized data is saved 8.1 ObjectInputStream类 ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。 构造方法 public ObjectInputStream(InputStream in)： 创建一个指定InputStream的ObjectInputStream。 反序列化操作1 如果能找到一个对象的class文件，我们可以进行反序列化操作，调用ObjectInputStream读取对象的方法。 对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 ClassNotFoundException 异常。 public final Object readObject () : 读取一个对象。 12345678910111213141516171819202122232425262728public class DeserializeDemo &#123; public static void main(String [] args) &#123; Employee e = null; try &#123; // 创建反序列化流 FileInputStream fileIn = new FileInputStream(\"employee.txt\"); ObjectInputStream in = new ObjectInputStream(fileIn); // 读取一个对象 e = (Employee) in.readObject(); // 释放资源 in.close(); fileIn.close(); &#125;catch(IOException i) &#123; // 捕获其他异常 i.printStackTrace(); return; &#125;catch(ClassNotFoundException c) &#123; // 捕获类找不到异常 System.out.println(\"Employee class not found\"); c.printStackTrace(); return; &#125; // 无异常,直接打印输出 System.out.println(\"Name: \" + e.name);// zhangsan System.out.println(\"Address: \" + e.address); // beiqinglu System.out.println(\"age: \" + e.age); // 0 &#125;&#125; 反序列化操作2 另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个InvalidClassException异常。发生这个异常的原因如下： 该类的序列版本号与从流中读取的类描述符的版本号不匹配 该类包含未知数据类型 该类没有可访问的无参数构造方法 Serializable 接口给需要序列化的类，提供了一个序列版本号。serialVersionUID 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。 123456789101112public class Employee implements java.io.Serializable &#123; // 加入序列版本号 private static final long serialVersionUID = 1L; public String name; public String address; // 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值. public int eid; public void addressCheck() &#123; System.out.println(\"Address check : \" + name + \" -- \" + address); &#125;&#125; 9. 打印流(PrintStream类) 平时我们在控制台打印输出，是调用print方法和println方法完成的，这两个方法都来自于java.io.PrintStream类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。 构造方法 public PrintStream(String fileName); 使用指定的文件名创建一个新的打印流。 1PrintStream ps = new PrintStream(\"ps.txt\")； 改变打印流向 System.out就是PrintStream类型的，只不过它的流向是系统规定的，打印在控制台上。不过，我们可以改变它的流向。 123456789101112public class PrintDemo &#123; public static void main(String[] args) throws IOException &#123; // 调用系统的打印流,控制台直接输出97 System.out.println(97); // 创建打印流,指定文件的名称 PrintStream ps = new PrintStream(\"ps.txt\"); // 设置系统的打印流流向,输出到ps.txt System.setOut(ps); // 调用系统的打印流,ps.txt中输出97 System.out.println(97); &#125;&#125; 10. Properties类的使用 Java.util.Properties，主要用于读取Java的配置文件。 Properties类继承自Hashtable 配置文件：在Java中，其配置文件常为.properties文件，格式为文本文件，文件的内容的格式是“键=值”的格式，文本注释信息可以用”#”来注释。 Properties类的主要方法： getProperty ( String key)，用指定的键在此属性列表中搜索属性。也就是通过参数 key ，得到 key 所对应的 value。 load ( InputStream inStream)，从输入流中读取属性列表（键和元素对）。通过对指定的文件（比如说上面的 test.properties 文件）进行装载来获取该文件中的所有键 - 值对。以供 getProperty ( String key) 来搜索。 setProperty ( String key, String value) ，调用 Hashtable 的方法 put 。他通过调用基类的put方法来设置 键 - 值对。 store ( OutputStream out, String comments)，以适合使用 load 方法加载到 Properties 表中的格式，将此 Properties 表中的属性列表（键和元素对）写入输出流。与 load 方法相反，该方法将键 - 值对写入到指定的文件中去。 clear ()，清除所有装载的 键 - 值对。该方法在基类中提供。","tags":[{"name":"Java","slug":"Java","permalink":"http://chaooo.github.io/tags/Java/"},{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"}]},{"title":"【Java教程】异常处理机制","date":"2017-04-25T00:34:31.000Z","path":"article/20170425.html","text":"Java语言提供了完善的异常处理机制。正确运用这套机制，有助于提高程序的健壮性。 基本概念 异常的分支结构 添加处理异常的手段 异常的捕获 异常的抛出 自定义异常 总结 1. 基本概念 异常用于在Java语言中描述运行阶段发生的错误。 在Java中有一个定义好的规则Throwable（可以抛出的） java.lang.Throwable类是所有错误(Error)和异常(Exception)的超类。 Error类主要用于描述比较严重无法编码解决的错误，如：JVM内存资源耗尽等。 Exception类主要用于描述比较轻微可以编码解决的错误，如：文件损坏、非法输入等。 java.lang.Exception类是所有异常的超类，主要分为两大类： RuntimeException - 运行时异常，也叫非检测性异常 IOException和其他异常 - 其他异常也叫做检测性异常 注意：当程序运行过程中发生异常而又没有手动处理时，则由java虚拟机采用默认方式处理，即打印异常名称、原因、发生位置并终止程序。在开发中尽量使用条件判断避免异常的发生。 12345678910Throwable类 |————Exception类 |————RuntimeException异常 |————ArithmeticException类 |————ArrayIndexOutOfBoundsException类 |————NullPointerException类 |————ClassCastException类 |————NumberFormatException类 |————IOException和其他异常 |————Error类 2. 异常的分支结构2.1 运行时异常（非检查异常） Error和RuntimeException都算作运行时异常 javac编译的时候，不会提示和发现的， 在程序编写时不要求必须做处理，如果我们愿意可以添加处理手段(try throws) 要求大家出现这样异常的时候 知道怎么产生及如何修改 InputMisMatchException 输入不匹配 int value = input.nextInt();// abc *NumberFormatException 数字格式化 int value = Integer.parseInt(“123.45”); NegativeArraySizeException 数组长度负数 int[] array = new int[-2]; *ArrayIndexOutOfBoundsException 数组索引越界 int[] array = {1,2,3}; array[5]; *5NullPointerException 空指针异常 int[][] array = new int[3][]; array[0][0] =10; Person p = null; p.getName(); ArithmeticException 数字异常 10/0 整数不允许除以0 Infinity小数除以0会产生无穷 *ClassCastException 造型异常 Person p = new Teacher(); Student s = (Student)p; *StringIndexOutOfBoundsException 字符串越界 String str = “abc”; str.charAt(5); *IndexOutOfBoundsException 集合越界 List家族 ArrayList list = new ArrayList(); list.add(); list.add(); list.add(); list.get(5); IllegalArgumentException 非法参数异常 ArrayList list = new ArrayList(-1); 2.2 编译时异常(检查异常) 除了Error和RuntimeException以外其他的异常 javac编译的时候，强制要求我们必须为这样的异常做处理(try或throws) 因为这样的异常在程序运行过程中极有可能产生问题的 异常产生后后续的所有执行就停止 123456//eg: InterruptExceptiontry&#123; Thread.sleep(5000);&#125;catch(Exception e)&#123; //...&#125; 3. 添加处理异常的手段 处理异常不是 异常消失了 处理异常指的是：处理掉异常之后，后续的代码不会因为此异常而终止执行 两种手段： 异常的捕获：try{}catch(){}[ finally{} ] throws抛出 final，finally，finalize区别 final：特征修饰符，修饰变量，属性，方法，类 修饰变量：基本类型:值不能改变；引用类型:地址不能改变(如果变量没有初值,给一次机会赋值) 修饰属性：特点与修饰变量类似(要求必须给属性赋初始值,否则编译报错) 修饰方法：不能被子类重写 修饰类：不能被其他的子类继承 finally：处理异常手段的一部分 try{}catch(){}后面的一个部分 这个部分可有可无，如果有只能含有一份，且必须执行 finalize：是Object类中的一个protected方法 对象没有任何引用指向的时候 – 会被GC回收 当对象回收的时候 默认调用finalize方法 若想要看到对象回收的效果，可以重写 public void finalize(){} 4. 异常的捕获12345678try&#123; 可能发生异常的代码;&#125;catch(异常类型 引用变量)&#123; 针对该异常的处理代码;&#125;catch ...finally&#123; 无论是否发生异常都要执行的代码;&#125; 处理异常放在方法内部 可能会出现的小问题 如果在方法内部含有返回值，不管返回值return关键字在哪里，finally一定会执行完毕，返回值的具体结果得看情况。 1234567891011public String test() &#123; try &#123; //...可能产生异常的的代码 return &quot;值1&quot;;//事先约定好 返回值 &#125;catch(Exception e)&#123; e.printStackTrace();//打印输出异常的名字 &#125;finally &#123; System.out.println(&quot;finally块执行啦&quot;); &#125; return &quot;值2&quot;;&#125; 上述执行结果：若try中代码块产生异常return返回 值2，若try中无异常则return返回 值1，无论return在哪finally都会执行。 异常捕获的注意事项： 当需要多分catch分子时，切记小类型应该放在大类型的前面； 懒人写法：catch(Exception e){…} finally通常用于善后处理，如：关闭已经打开的文件等。 5. 异常的抛出 当程序中发生异常又不方便直接处理时，可以将异常转移给方法调用者进行处理，这个过程叫做异常的抛出。 语法格式：访问权限 返回值类型 方法名(形参列表) throws 异常类型1,异常类型2,…{} ，如：public void show() throw Exception {} 重写方法的抛出规则： 不抛出异常 抛出父类异常中的子类异常 抛出和父类一样的异常 不能抛出同级不一样的异常 不能抛出更大的异常 6. 自定义异常 可以根据需要自定义异常类。 自定义异常的方式： 继承Exception或者异常的子类。 提供两个构造，无参构造和String做参数的构造。 异常的手段 如果继承是RuntimeException—-&gt;运行时异常(不需要必须添加处理手段) 如果继承是Exception—–&gt;编译时异常(必须添加处理手段) 类中可以写带String参数的构造方法，可以做细致的说明 通过throw关键字，new一个异常的对象 主动产生异常：throw new 异常类型(); 7. 总结 1.在开发中尽量使用条件判断避免异常的发生; 2.若实在避免不了，则进行异常捕获； 3.若实在捕获不了，则进行异常抛出； 4.若需要使用针对性异常，则自定义异常。","tags":[{"name":"Java","slug":"Java","permalink":"http://chaooo.github.io/tags/Java/"},{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"}]},{"title":"【Java教程】集合框架","date":"2017-04-17T14:10:57.000Z","path":"article/20170417.html","text":"为了方便对多个对象的操作，对对象进行存储，集合就是存储对象最常用的一种方式。 Collection集合 List集合 泛型机制 Queue集合 *ArrayList类 Vector类 Stack类 *LinkedList类 Set集合 HashSet类 TreeSet类 Map集合 HashMap类 TreeMap类 Lambda表达式 Stream API 1. Collection集合 Collection集合框架，字面意思容器；与数组类似，集合的长度存储之后还能改变，集合框架中包含了一系列不同数据结构的实现类。 数组与集合的比较 数组的特点： 数组本质上就是一段连续的存储单元，用于存放多个类型相同的数据类容； 支持下标访问，实现随机访问非常方便； 增删操作不方便，可能会移动大量元素； 数组一旦声明长度固定无法更改； 数组支持基本数据类型，也支持引用数据类型； 集合的特点： 集合的存储单元可以不连续，数据类容可以不相同； 集合部分支持下标访问，部分不支持； 集合中增删元素可以不移动大量元素； 集合大小可以随时动态调整； 集合中的元素必须是引用数据类型（基本数据类型可用包装类）； 1234567891011121314-Collection接口 |————List接口 |————ArrayList类 |————LinkedList类 |————Stack类 |————Vector类 |————Queue接口 |————LinkedList类 |————Set接口 |————HashSet类 |————TreeSet类-Map接口 |————HashMap类 |————TreeMap类 Collection存储的都是value,其中List有序可重复，Set无序无重复 Map存储的是以key-value形式,key无序无重复 value无序可重复 序 : 顺序–添加进去的元素，取得元素的顺序一致；注意指的不是集合自己的顺序 Collection集合的常用方法 boolean add(E e); 向集合中添加对象 boolean contains(Object o); 判断是否包含指定对象 boolean remove(Object o); 从集合中删除对象 void clear(); 清空集合 int size(); 返回包含对象的个数 boolean isEmpty(); 判断是否为空 1234567Collection c2 = new ArrayList(); //多态boolean b1 = c2.add(new String(\"one\")); //trueboolean b2 = c2.add(new Integer(2)); //trueSystem.out.println(\"c2 = \" + c2); //[one, 2]boolean b3 = c2.contains(new Integer(2));//true//contains方法工作原理：(o==null ? e==null : o.equals(e)); 2. List集合 java.util.List集合是Collection集合的子集合。 List集合中元素有先后放入次序并且元素可以重复；实现类有：ArrayList类、LinkedList类、Stack类以及Vector类。 ArrayList类的底层使用数组进行数据管理，访问元素方便，增删不方便。 LinkedList类的底层使用链表进行数据管理，访问不方便，增删方便。 Stark类的底层使用数组进行数据管理，该类主要描述具有后进先出的特征的数据结构，叫做栈。 Vector类的底层使用数组进行数据管理，与ArrayList类似，与之比线程安全的类，因此效率低。 List类除了继承Collection定义的方法外，还根据线性表的数据结构定义了一系列方法，其中最常用的是基于下标的get()，set()方法。 List类常用方法 void add(int index, E element) 向集合指定位置添加元素 boolean addAll(int index, Collection&lt;?extends E&gt; c) 向集合中添加所有元素 E get(int index) 从集合中获取指定位置的元素 E set(int index, E element) 修改指定位置的元素 E remove(int index) 删除指定位置的元素 int indexOf(Object o) 在集合中检索某个对象，判断逻辑(o==null?get(i)==null:o.equals(get(i))) T[] toArray(T[] a) 将集合中的对象序列化以对象数组的形式返回。 List subList(int fromIndex, int toIndex) 获取List从fromIndex(包括)和 toIndex(不包括)之间的部分视图 3. 泛型机制 集合可以存放不同的对象，本质上都看作Object类型放入，此时从集合中取出也是Object类型，为了表达该元素真实类型需要强制类型转换，而强制类型转换可能发生类型转换异常。 从jdk1.5开始推出泛型机制，在集合名称后面使用&lt;数据类型&gt;的方式明确要求该集合中可以存放的数据类型。如：List&lt;String&gt; lt = new LinkedList&lt;String&gt;();。 从jdk1.7开始可省略后面&lt;&gt;的数据类型，叫做菱形特性，如：List&lt;String&gt; lt = new ArrayList&lt;&gt;();。 泛型本质就是参数化类型，让数据类型作为参数传递，public interface List&lt;E&gt;{}其中E是占位形参，由于实参可以支持各种广泛的类型，因此得名泛型。 泛型可以用在哪里： 泛型类：类定义的时候描述某种数据类型，集合的使用就是这样 泛型接口：与泛型类的使用基本一致，子类实现接口时必须添加泛型 泛型方法：方法调用时传参数，方法的泛型与类无关，带有泛型的方法可以不放在带有泛型的类中 方法参数泛型限制，高级泛型，规范边界，extends，super 4. Queue集合 java.util.Queue集合是Collection集合的子集合。 Queue集合主要描述具有先进先出特性的数据结构，叫做队列(FIFO:First Input First Output)。 Queue集合主要实现类是LinkedList类，因为该类在增删方面有一定优势。 Queue接口中主要方法 boolean offer(E e) 将一个对象添加至队尾，若添加成功则返回true E poll() 从队首删除并返回一个元素 E peek() 返回队首的元素（但并不删除） 12345Queue&lt;Integer&gt; q1 = new LinkedList&lt;Integer&gt;();//将数据11、22、33、44、55依次入队for(int i=1; i&lt;=5; i++) &#123; q1.offer(i*11);&#125; 5. *ArrayList类 底层是利用(动态)数组形式实现，jdk1.5，所属的包 java.util ArrayList特点适合遍历轮询，不适合插入删除 如何构建一个ArrayList对象 无参数构造方法，带默认容量构造方法，带collection参数的构造方法 ArrayList中常用的方法 增删改查：add(E e)，remove(index)，set(index value)，get(index)，size() 类中其他常用的方法 addAll并集，removeAll差集，ratainAll交集; indexOf()，lastIndexOf()，contains()，List=subList(); isEmpty()，clear()，ensureCapacity()，iterator();迭代器 toArray(T[] x)，trimToSize(); 6. Vector类 是ArrayList集合的早期版本，所属的包 java.util Vector底层也是利用(动态)数组的形式存储 Vector是线程同步的(synchronized)，安全性高，效率较低 扩容方式与ArrayList不同 默认是扩容2倍，可以通过构造方法创建对象时修改这一机制 构造方法和常用方法与ArrayList类似 7. Stack类 Stack类，栈，java.util包 构造方法只有一个无参数 除了继承自Vacton类的方法外还有特殊的方法 push(E e)将某一个元素压入栈顶(add()) E = pop()将某一个元素从栈顶取出并删掉(E = remove()) E = peek()查看栈顶的一个元素 不删除(get()) boolean = empty()判断栈内元素是否为空(isEmpty()) int = search()查找给定的元素在占中的位置(indexOf()) 应用场景 中国象棋，悔棋 栈中存储每一次操作的步骤 撤销功能 8. *LinkedList类 LinkedList类，java.util包 底层使用双向链表的数据结构形式来存储 适合于插入或删除 不适合遍历轮询 构建对象 无参数构造方法，带参数的构造方法(collection) 常用的方法 增删改查：add()，remove()，set()，get()，size()，offer，poll，peek 手册中提供的其他常用方法：addAll，addFist，addLast()，clear()，contains()，element()，getFirst()，getLast()，indexOf()，lastIndex() 插入删除的特性是否像想的那样 对比ArrayList Linked 9. Set集合 java.util.Set集合是Collection集合的子集合。 Set集合没有先后放入次序，并且不允许有重复关系，实现类有HashSet类和TreeSet类。 其中HashSet类底层是采用哈希表进行数据管理的。 其中TreeSet类的底层是采用二叉树进行数据管理的。 1234//方法和Collection集合基本一样Set&lt;String&gt; set1 = new HashSet&lt;String&gt;();set1.add(\"one\");System.out.println(\"s1=\"+s1); set集合的无重复特性 HashSet，无重复原则有两个方法同时起作用 equals hashCode 默认比较的是两个对象的地址 若第二个对象地址与之前的一致 不再存入 如果想要改变其比较的规则 可以重写上述两个方法 TreeSet，无重复原则有一个方法起作用 compareTo 上述这个方法不是每一个对象都有的 若想要将某一个对象存入TreeSet集合中，需要让对象所属的类实现接口Comparable 实现接口后将compareTo方法重写，返回值int，负数靠前排布，整数排列靠后 9.1 Set集合的遍历 所有Collection的实现类都实现了其iterator方法，该方法返回Iterator接口类型对象，用于实现对集合元素的迭代遍历。 迭代器Iterator&lt;E&gt; iterator()，主要方法有 boolean hasNext() 判断集合中是否有可以迭代/访问的元素 E next() 用于取出一个元素并指向下一个元素 void remove() 用于删除访问到的最后一个元素 12345678Iterator&lt;String&gt; it = set1.iterator();//获取当前集合的迭代器对象while(it.hasNext()) &#123;//判断是否有可以访问的元素 String temp = it.next();//取出一个并指向下一个 System.out.println( temp ); if(\"two\".equals(temp))&#123; it.remove();//删除set1中该元素 &#125;&#125; 增强for循环(for each结构) 语法格式：for(元素类型 变量名:集合/数组){ 循环体; }。 执行流程：不断从集合/数组中取出一个元素赋值给变量名后执行循环体，直到取出所有元素。 123456789//遍历集合for(String ts : s1) &#123; System.out.println(ts);&#125;//遍历数组int[] arr = &#123;11,22,33,44,55&#125;;for(int ti : arr) &#123; System.out.println(ti);&#125; 10. HashSet类 HashSet集合底层采用HashMap（数组+链表–&gt;散列表），java.util包。 它不保证set 的迭代顺序；特别是它不保证该顺序恒久不变。此类允许使用null元素。 创建对象：无参数，有参数 集合容器的基本使用 增删改查：boolean = add(value)，addAll(collection c)，retainAll，removeAll，boolean = remove(Object) 没有修改方法 iterator() 获取一个迭代器对象 size() 无重复的原则 在HashSet中，元素都存到HashMap键值对的Key上面，而Value时有一个统一的值private static final Object PRESENT = new Object();，(定义一个虚拟的Object对象作为HashMap的value，将此对象定义为static final。) 11. TreeSet类 TreeSet类，无序无重复，java.util包。(底层TreeMap 二叉树 利用Node(left item right)) 创建对象： 无参数构造方法 ，带Collection构造方法 基本常用方法：add(E e)，iterator()，remove(E e)，没有修改，size() 二叉树主要指每个节点最多只有两个子节点的树形结构。 满足以下三个特征的二叉树叫做有序二叉树： 左子树中的任意节点元素都小于根节点元素； 右子树中的任意节点元素都大于根节点元素； 左子树和右子树内部也遵守上述规则； 无序无重复：treeSet集合本身有顺序，我们指的无序存入的和取出来的不一致。 元素放入TreeSet集合过程：由于TreeSet集合底层采用有序二叉树进行数据的管理，当有新元素插入到TreeSet集合时，需要使用新元素与集合中已有的元素依次比较来确定存放合理位置，而比较元素大小规则有两种方式： 使用元素的自然排序规则进行比较并排序，让元素类型实现java.lang.Comparable接口； 使用比较器规则进行比较并排序，构造TreeSet集合时传入java.util.Comparable接口； 注意： 1. 自然排序的规则比较单一，而比较强的规则比较多元化，而且比较器优先于自然排序； 2. 可以使用Collections工具类对集合中的元素进行操作； 12. Map集合 java.util.Map&lt;K, V&gt;集合存取元素的基本单位是：单对元素（键值对key-value）。 Map：映射，通过某一个key可以直接定位到一个value值 key无序无重复 value无序可重复 key无序还是一样，指的是存入顺序与取得顺序不一致，key无重复当然指的是，元素不能一致 主要有两个实现类：HashMap类和TreeMap类。 Map基本使用：HashMap，TreeMap，Properties Map集合常用方法： 增改：put(key,value)，删：remove(key)，查：get(key),containsKey(key),containsValue(value) Map集合的遍历方式：a.迭代Key，b.迭代Entry Map集合的性能调优： 加载因子较小时散列查找性能会提高，同时也浪费了散列桶空间容量。0.75是性能和空间相对平衡的结果，在常见散列表时指定合理容量，减少rehash提高性能。（Capacity:容量，Initial capacity:初始容量，Size:数据大小，Load factor:加载因子(size/capacity),默认0.75） 13. HashMap类 包:java.util，底层散列表的形式（数组+链表） 构造方法创建对象 无参数 带默认容量的 带map参数的构造方法 特点:(数组+链表)底层散列表形式存储，key无序无重复,value无序可重复 找寻某一个唯一元素的时候建议使用map，更适合于查找唯一元素，Map$Entry 基本方法： 增 put(key,value)，存放一组映射关系key-value key存储的顺序与取得顺序不同 不同的key可以存储相同的value key若有相同的 则将 原有的value覆盖而不是拒绝存入(跟set刚好相反) 删 E = remove(key); 改 replace(key,newValue)，put(key,value2) 查 E = get(key)； Set = keySet()获取全部的key Set = entrySet(); size(); 12345678Set&lt;Entry&lt;Integer,String&gt;&gt; entrys = map.entrySet();//获取集合中全部的entry对象Iterator&lt;Entry&lt;Integer,String&gt;&gt; it = entrys.iterator();while(it.hasNext())&#123; Entry&lt;Integer,String&gt; entry = it.next();//entry key value Integer key = entry.getKey(); String value = entry.getValue(); System.out.println(key+\"--\"+value);&#125; 除了上述几个常用的方法外 其他API中提供的方法 clear，containsKey(key)，containsValue(value) getOrDefault(key,defaultValue);如果key存在就返回对应的value 若没有找到则返回默认值 isEmpty() putAll(map) putIfAbsent(key,value);//如果key不存在才向集合内添加 如果key存在就不添加啦 map集合在什么情形下用? 想要存储一组元素 数组 or 集合，如果存储的元素以后长度不变 用数组，如果长度以后不确定 用集合 如果发现长度以后不确定—&gt;集合 list Set Map List家族有序的 Set家族无重复 Map家族k-v 存储有顺序用这个 存储元素希望自动去掉重复元素用这个 通过唯一的k快速找寻v用这个 ArrayList:更适合遍历轮询 HashSet:性能更高 HashMap:性能更高 LinkedList:更适合插入和删除 TreeSet:希望存进去的元素自动去重复,同时还能自动排序 Tree:希望存进去的元素key自动排序 Stack:LIFO - - 14. TreeMap类 java.util包 构造方法：无参数，带map参数 常用方法：put， get，remove，replace，size 底层数据结构的存储：红黑二叉树（层级多余2层可能会左旋或右旋） 自然有序，按照Unicode编码自然有序 ap集合中的key需要可比较的 key的对象需要实现Comparable接口 15. Lambda表达式 java8支持的新的语法格式，Lambda允许把函数作为一个方法的参数(函数作为参数传递进方法中)，使用lambda表达式可以使代码变得更加简洁紧凑。 函数式编程：一种抽象程度很高的编程范式。函数也可以跟变量、对象一样使用，可以作为参数，也可以作为返回值，大大简化了代码的开发。 lambda表达式语法由参数列表、箭头函数-&gt;和函数体组成，函数体即可以是一个表达式，也可以是一个语句块。 123(int a, int b) -&gt; a+b() -&gt; 42(String s) -&gt; &#123;System.out.println(s);&#125; 函数式接口：指仅仅只包含一个抽象方法的接口，每一个该类型的lambda表达式大都会被匹配到这个抽象方法。 jdk1.8提供了一个@FunctionalInterface注解来定义函数式接口，如果我们定义的接口不符合函数式的规范便会报错。 15.1 Lambda表达式-方法引用 方法引用：只需要使用方法的名字，而具体调用交给函数式接口，需要和Lambda表达式配合使用。 方法引用和lambda表达式拥有相同的特性，我们并不需要为方法引用提供方法体，我们可以直接通过方法名称引用已有的方法。 16. Stream API Stream(流)借助lambda表达式来进行集合数据处理,分为中间操作和最终操作两种；最终操作返回一特定类型的计算结果，而中间操作返回Stream本身，这样就可以将多个操作依次串起。 虽然大部分情况下stream是容器调用Collection.stream()方法得到的，但stream和collections有以下不同： 无存储。stream不是一种数据结构，它只是某种数据源的一个视图，数据源可以是一个数组，Java容器或I/O channel等。 为函数式编程而生。对stream的任何修改都不会修改背后的数据源，比如对stream执行过滤操作并不会删除被过滤的元素，而是会产生一个不包含被过滤元素的新stream。 惰式执行。stream上的操作并不会立即执行，只有等到用户真正需要结果的时候才会执行。 可消费性。stream只能被“消费”一次，一旦遍历过就会失效，就像容器的迭代器那样，想要再次遍历必须重新生成。 对stream的操作分为为两类，中间操作和结束操作，二者特点是： 中间操作总是会惰式执行，调用中间操作只会生成一个标记了该操作的新stream，仅此而已。 结束操作会触发实际计算，计算发生时会把所有中间操作积攒的操作以pipeline的方式执行，这样可以减少迭代次数。计算完成之后stream就会失效。 16.1 stream方法使用 stream跟函数接口关系非常紧密，没有函数接口stream就无法工作（通常函数接口出现的地方都可以使用Lambda表达式，所以不必记忆函数接口的名字)。 12345// 找出最长的单词Stream&lt;String&gt; stream = Stream.of(\"I\", \"love\", \"you\", \"too\");Optional&lt;String&gt; longest = stream.reduce((s1, s2) -&gt; s1.length()&gt;=s2.length() ? s1 : s2);//Optional&lt;String&gt; longest = stream.max((s1, s2) -&gt; s1.length()-s2.length());System.out.println(longest.get());","tags":[{"name":"Java","slug":"Java","permalink":"http://chaooo.github.io/tags/Java/"},{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"}]},{"title":"【Java教程】核心工具类","date":"2017-04-12T08:42:47.000Z","path":"article/20170412.html","text":"API (Application Programming Interface) 应用程序编程接口，Java中的API，就是JDK提供的各种功能的Java类。 Object类与其常用方法 包装类 数学处理类 Scanner类和System类 日期类 String类 StringBuilder类/StringBuffer类 Optional类 常用的包 java.lang包：是Java最核心的包，JVM(Java虚拟机)启动时自动加载lang包的所有类和接口，无需import。如：System类、String类、Object类、Class类… java.util包：是Java工具包，包括很多工具类和集合。如：Scanner类、Random类… java.io包：是输入输出包，包括读写各种设备。 java.net包：是网络编程的包，包括各种网络编程。 java.sql包：是操作数据库的所有类和接口。 1. Object类与其常用方法1.1 Object类 java.lang.Object类在Java类继承结构中位于顶端(根类)，任何类都是该类的直接或间接子类。 Object定义了“对象”的基本行为，被子类默认继承。 1.2 equals() 和 hashCode() boolean equals()方法用于非空对象的“相等”逻辑，默认比较两个对象的地址，返回布尔值。 equals()方法要求：自反性/对称性/传递性/一致性/非空性。 Java类可以根据需要重写继承自Object的equals()方法。 注意：当equals()方法被重写时，必须重写hashCode方法，以维护hashCode方法的常规协定，该协定声明相等对象必须具有相等的哈希码。 int hashCode():返回对象的哈希码值，对应一个内存。 hashCode规范要求： 一致性，同一对象，若没有改变属性值，多次调用其hashCode应该时一致的 如果两个对象判定相等，它们的hashCode应该时同一个值 如果两个对象不相等，它们的hashCode可以相同，但最好不相同而可以提高哈希表的性能。 hashCode()方法和equals()方法的判断条件必须保持一致，如果重写一个，另一个也必须重写。 1.3 toString() String toString()：用于获取调用对象的字符串形式，返回”包名.类名@hashCode值的16进制”。 Java类可以根据需要重写toString方法返回更有意义的信息。 Java在使用System.out.println()打印对象时或者+连接字符串时，默认调用toString()方法。 2. 包装类2.1 包装类 由于某些特殊场合(集合)中要求所有数据内容都必须是对象，而对于基本数据类型的变量来说不满足该要求，为了使得该变量也能够使用就需要对变量打包处理变成对象，此时就需要借助包装类。 Java语言8种基本类型分别对应了8中“包装类”，每一种包装类都封装了一个对应的基本类型成员变量，还提供了一些针对该数据类型的实用方法。 基本类型 对应包装类 byte java.lang.Byte short java.lang.Short int java.lang.Integer long java.lang.Long float java.lang.Float double java.lang.Double boolean java.lang.Boolean char java.lang.Character 八个包装类都在同一个包下（java.lang包），不需要import导包直接使用 八个包装类中有六个是与数字相关，都默认继承父类Number 八个包装类都实现了Serializable, Comparable 八个包装类都有带自己对应类型参数的构造方法，其中有七个(除了Character)还有构造方法重载，带String类型 八个包装类都提供了各自对应的拆包方法，如intValue,floatValue,将包装类对象拆成基本类型 2.2 Integer类 java.lang.Integer类是int类型的包装类，该类型对象中包含一个int类型的成员变量。该类由final关键字修饰表示不能被继承。 Integer类重写了equals()方法（重写后比较的是数值）、hashCode()以及toString()方法。 Integer类的常用方法 Integer(int i) 根据参数指定整数来构造对象 Integer(String s) 根据参数指定的字符串来构造对象 int intValue() 获取调用对象中整数值并返回 static Integer valueOf(int i) 根据参数指定整数值得到Integer类型对象 static int parseInt(String s) 将字符串类型转换为int类型并返回 2.3 装箱和拆箱123456int i = 100;Integer it = Integer.valueOf(i); //实现了int类型到Integer类型的转换，这个过程叫做装箱int ia = it.intValue();//实现了Integer类型到int类型的转换，这个过程叫做拆箱//jdk5增加了自动拆箱和装箱功能（编译器预处理）:Integer i = 100;//自动装箱int ia = i;//自动拆箱 笔试考点： 在Integer类部提供了自动装箱池技术，将-128~127间的整数已经装箱完毕，当使用该范围整数时直接取池中的对象即可，从而提高效率。 Integer类加载的时候，自己有一个静态的空间立即加载Integer类型的数组，存储256个Integer对象（-128 ~ 127），当使用该范围整数时，直接取静态区中找对应的对象；如果我们用的对象范围会帮我们创建一个新的Integer对象。 1234567891011121314151617Integer it1 = 128;Integer it2 = 128;Integer it3 = new Integer(128);Integer it4 = new Integer(128);System.out.println(it1.equals(it2));//比较内容 trueSystem.out.println(it1 == it2);//比较地址 falseSystem.out.println(it3.equals(it4));//比较内容 trueSystem.out.println(it3 == it4);//比较地址 falseInteger it5 = 127;Integer it6 = 127;Integer it7 = new Integer(127);Integer it8 = new Integer(127);System.out.println(it5.equals(it6));//比较内容 trueSystem.out.println(it5 == it6);//比较地址 true, 自动装箱池范围-128~127。System.out.println(it7.equals(it8));//比较内容 trueSystem.out.println(it7 == it8);//比较地址 false 3. 数学处理类 java.lang.Math构造方法是私有的，我们不能直接调用创建对象；由于Math中提供的属性及方法都是static 不需要创建对象。 常用的方法 返回值类型 Math.abs() 返回给定数字的绝对值(参数 int long float double) Math.ceil() double 向上取整 Math.floor() double 向下取整 Math.rint() double 临近的整数 如果两边距离一样 则返回偶数 Math.round() int 四舍五入的整数 Math.max(a,b)/min(a,b) (参数int long float double) Math.pow(a,b) double a的b次方 (参数double 返回值double) Math.sqrt(double a) 获取给定参数的平方根 Math.random() double 随机产生一个[0.0–1.0) 0-9之间的随机整数：int value = (int)(Math.random()*10); Math.random()计算小数的时候精确程度可能有些损失 3.1 Random类 java.util.Random，在java.util包中的类，需要import导入，没有任何继承关系 默认继承Object类 常用的方法 Random r = new Random(); r.nextInt(); 随机产生 int取值范围的整数 有正有负(-2^31~2^31-1即正负21亿之间) r.nextInt(int bound); 随机产生一个[0–bound)整数；注意bound必须为正数，否则会出现如下的运行时异常：IllegalArgumentException r.nextFloat() 随机产生一个 [0.0—1.0) r.nextBoolean() 随机产生一个boolean值 true false 3.2 UUID类 java.util.UUID，在java.util包中的类，需要import导入，没有任何继承关系 默认继承Object类 只有有参构造方法，我们通常不会创建对象 UUID uuid = UUID.randomUUID();//通常用于数据库表格主键 primary key 产生一个32位的随机元素 每一个位置是一个16进制的数字 3.3 BigDecimal java.math.BigDecimal类处理大浮点数，需要import导入，继承自Number Java浮点数据类型(float和double)在运算时会有舍入误差，如果希望得到精确运算结果，可以使用java.math.BigDecimal类。 提供的构造方法全部都是带参数的 通常利用带String参数的构造方法创建这个类的对象：BigDecimal bi = new BigDecimal(“1.23”); BigDecimal类的常用方法 BigDecimal(String val) 根据参数指定的字符串来构造对象 BigDecimal setScale(int newScale, RoundingMode roundingMode) 两个参数前面是保留小数点之后的位数，后面参数是设置的模式(向上取整或向下等) BigDecimal add(BigDecimal augend) 用于实现加法运算 BigDecimal subtract(BigDecimal subtrahend) 用于实现减法运算 BigDecimal multiply(BigDecimal multiplicand) 用于实现乘法运算 BigDecimal divide(BigDecimal divisor) 用于实现除法运算，也可传入更多参数设置保留小数点位数和取值模式 123456BigDecimal d3 = new BigDecimal(\"3.0\");BigDecimal d4 = new BigDecimal(\"2.9\");System.out.println(d3.add(d4));//加：5.9System.out.println(d3.subtract(d4));//减：0.1System.out.println(d3.multiply(d4));//乘：8.70System.out.println(d3.divide(d4, 8, BigDecimal.ROUND_HALF_UP));//除：1.03448276 对于divide方法，通常需要制定精度和舍入模式，否则当遇到无限小数时，除法会一直进行下去直至抛出异常。 3.4 BigInteger java.math.BigInteger类处理大整数，需要import导入，继承自Number java提供的整数类型(int\\long)的存储范围有限，当需要进行很大整数运算时可以使用java.math.BigInteger类，理论上其储值范围只受内存容量限制。 如何创建对象，提供的构造方法全部都是带参数的 通常利用带String参数的构造方法创建这个类的对象：BigInteger bi = new BigInteger(“123”); 和BigDecimal类似，BigInteger也提供add()、substract()、multiply()、divide()等方法。 3.5 DecimalFormat类 所属的包 java.text，import导入才能使用 通过带String参数的构造方法创建一个格式化对象(0:未满会补齐，#：未满不补） 123456789101112 //调用format方法将一个小数格式化成一个字符串DecimalFormat df = new DecimalFormat(\"000.000\");System.out.println(df.format(12.45)); //012.450System.out.println(df.format(12345.6789)); //12345.679DecimalFormat df2 = new DecimalFormat(\"###.###\");System.out.println(df2.format(12.45)); //12.45System.out.println(df2.format(12345.6789)); //12345.679DecimalFormat df3 = new DecimalFormat(\"000.###\");System.out.println(df3.format(12.45)); //012.45System.out.println(df3.format(12345.6789)); //12345.679 4. Scanner类和System类4.1 Scanner类 所属的包java.util包 需要import导包 通过一个带输入流的构造方法创建对象 常用方法 nextInt() nextFloat() next() nextLine() 4.1 System类 所属的包java.lang包 不需要导入 不需要创建对象 通过类名就可以访问 有三个属性及若干的方法 三个属性out in err 方法：gc() exit(0); currentTimeMillis()获取系统当前时间毫秒; 5. 日期类5.1 Date类 java.util.Date类表示特定的瞬间，精确到毫秒。 通常使用无参数的构造方法，或者带long构造方法 Date类中常用的方法 before(); after(); setTime() getTime();—–&gt;long compareTo(); //-1 1 0 Date类大多数用于进行时间分量计算的方法已经被Calender取代。 1234Date date = new Date();//当前日期信息 //Date类重写了toString方法，输出格式如：Sun Jan 06 11:52:55 CST 2019long time = date.getTime();//1970年1月1日距今毫秒数。date.setTime(time + 24\\*60\\*60\\*1000);//通过毫秒数设置时间 5.2 SimpleDateFormat类 java.text.SimpleDateFormat类主要用于实现日期和文本类型之间的转换。是DateFormat(抽象类)的子类 其构造方法 SimpleDateFormat(String pattern) 12345678Date date = new Date();SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年MM月dd日\");String dateStr = sdf.format(date);// format用于将日期按指定格式转换为字符串String str = \"2013-01-06\";SimpleDateFormat sdf2 = new SimpleDateFormat(\"yyyy-MM-dd\");Date date2 = sdf2.parse(str);//如果字符串格式不匹配将抛出异常 常用格式字符串 含义 示例 y 年 yyyy年——2013年；yy——13年 M 月 MM月——01月；M月——1月 d 日 dd日——01日；d日——1日 H 小时(24) HH:mm:ss—12:46:33 h 小时(12) hh(a):mm:ss—12(下午):47:48 m 分钟 – s 秒 – 5.3 Calendar类 java.util.Calendar类是一个抽象类,主要用于取代Date类中过时的方法来描述年月日时分秒信息。 有构造方法，用protected修饰的，通常访问不到，通常会调用默认的getInstance(); 通常使用Calendar的静态方法getInstance获得Calendar对象；getInstance方法将根据系统地域信息返回不同的Calendar类的实现 123Calendar c1 = Calendar.getInstance();c1.set(2008,9-1,20,8,8,8);System.out.println(c1.getTime()); 常用方法 after() before() setTime() getTime()—-&gt;Date getTimeInMillis()—-time getTimeZone()—TimeZone Calendar里面包含一个date属性 可以操作date的某一个局部信息 set get calendar.set(Calendar.YEAR,2015); int year = calendar.get(Calendar.YEAR); TimeZone java.util包 可以通过calendar对象.getTimeZone()获取 或 TimeZone.getDefault(); 常用方法 tz.getID() —-&gt; Asia/Shanghai tz.getDisplayName() —-&gt; 中国标准时间 6. String类6.1 基本概念 String类 —&gt; 引用类型 —&gt; java.lang包 没有任何继承关系，实现三个接口Serializable, CharSequence, Comparable java.lang.String类用于描述字符串数据，java程序中所有的字符串字面值都可以使用String类的实例(对象)加以描述，如”abc”等，任何一个字符对应2字节定长编码。 String类由final关键字修饰表示该类不能被继承，该类描述的字符串内容是常量，一旦创建无法更改，因此可以被共享。对字符串重新赋值不是改变其内容，而是改变引用的指向。 12345678910//如何构建对象String str1 = \"abc\"; //直接将字符串常量赋值给str (字符串常量池)String str2 = new String();//无参数构造方法创建空的对象String str3 = new String(\"abc\");//带string参数的构造方法创建对象byte[] bArr = &#123;97, 98, 99, 100, 101&#125;;//a:97，b:98，c:99，d:100String str4 = new String(bArr);//将数组中的每一个元素转化成对应的char 组合成Stringchar[] cArr = &#123;'h', 'e', 'l', 'l', 'o'&#125;;String str5 = new String(cArr);//将数组中的每一个char元素拼接成最终的StringString str6 = String(char[], index, count);//使用char数组中下标从index位置开始的count个字符来构造对象String str7 = String(byte[], index, length);//使用byte数组下标从index位置开始length个字节来构造对象 6.2 字符串常量池 由于String类型对象描述的字符串内容是个常量，若多个相同的内容单独存储会造成时间和空间的浪费。 出于性能考虑，Java虚拟机(JVM)将字符串字面量对象缓存在常量池中；对于重复出现的字符串直接量，JVM会首先在缓存池中查找，如果存在即返回该对象。 12345678910String str1 = \"Hello\";String str2 = \"Hello\";String str3 = new String(\"Hello\");System.out.println(str1.equals(str2));//比较内容 trueSystem.out.println(str1==str2);//比较地址 true，不会重新创建System.out.println(str1.equals(str3));//比较内容 trueSystem.out.println(str1==str3);//比较地址 false，使用new会重新创建新的String对象 //1.下面的代码中创建了几个对象并分别存放在什么位置？String s1 = \"hello\"; //1个对象，常量池。String s2 = new String(\"world\"); //2个对象，1个在常量池，1个new后在堆区(内容为常量池里的副本) 6.3 String类常用方法 第一梯队(重写): equals hashCode compareTo toString 第二梯队(常用):charAt()，codePointAt()，indexOf()，lastIndexOf()，substring()，split()，replace()，length()，concat()，contains()， trim()，getBytes()， toCharArray()，matches()。 第三梯队(一般):toUpperCase()，toLowerCase()，startsWith()，endsWith()，isEmpty()。 重写了equals(obj)，hashCode()，toString()方法，compareTo(str)方法实现自Comparable接口 boolean = equals(Object obj); 继承自Object类中的方法，重写后改变了规则，比较字符串中的字面值（==与equals()区别）; int = hashCode(); 继承自Object类中的方法，重写了：31*h+和… int = compareTo(); 实现自Comparable接口，实现方法：结果按照字典排布(unicode编码)顺序，按照两个字符串的长度较小的那个(次数)来进行循环，若每次的字符不一致 则直接返回code之差，若比较之后都一致 则直接返回长度之差 String = toString() Object类中返回类名@hashCode(16进制形式) String类重写后返回的是String对象的字面值 忽略大小写比较：equalsIgnoreCase(), compareToIgnoreCase(); String类的成员方法 char charAt(int index) 返回字符串指定位置 int codePointAt(int index) “abc”0–&gt;97，返回给定index对应位置的那个char所对应的code码 String concat(String) 将给定的字符串拼接在当前字符串之后 int length() 返回字符串序列的长度 注意：区别数组的length是属性，String的length()是方法，集合是size()方法 123456789101112131415String str6 = new String(\"hello\");System.out.println(\"下标为0的字符是：\"+str6.charAt(0));// hSystem.out.println(\"字符串长度是：\"+str6.length());// 5 //将字符串\"12345\"转换为整数类型String str = new String(\"123456\"); //方式一：Integer类中的pareseInt方法int ia = Integer.parseInt(str);System.out.println(\"转换出来结果是：\"+ ia);//123456 //方式二：利用ASCII数值进行转换'1'-'0'=1，'2'-'0'=2，...int res = 0;for(int i=0; i&lt;str.length(); i++)&#123; res = res*10 + (str.charAt(i)-'0');&#125;System.out.println(\"转换出来结果是：\"+ res);//123456 String类的常用基本方法 boolean contains(CharSequence s) 判断当前字符串是否包含参数指定的内容 String toLowerCase() 返回小写形式 String toUpperCase() 返回大写形式 String trim() 返回去掉前后空格的字符串 boolean startsWith(String prefix) 判断是否以参数字符开头 boolean endsWith(String suffix) 判断是否以参数字符结尾 boolean equals(Object anObject) 比较字符串内容是否相等，String类已重写 boolean equalsIgnoreCase(String anotherString) 同上，并且忽略大小写 int indexOf(String str) 返回第一次出现str位置，找不到返回-1 int indexOf(String str, int fromIndex) 同上，从fromIndex开始检索 String substring(int beginIndex, int endIndex) 截取字符串，beginIndex开始，endIndex结束 String substring(int beginIndex) 截取字符串，beginIndex开始到结尾 6.4 正则相关方法 正则表达式本质就是一个字符串，用于对用户输入数据的格式进行验证。 正则相关方法 boolean matches(String regex) 用于判断是否匹配正则表达式规则。 String[] split(String regx) 以正则为分割符，将字符串拆分成字符串数组 String replaceAll(String regex, String replacement) 正则替换 7. StringBuilder类/StringBuffer类7.1 基本概念 java.lang.StringBuilder类和java.lang.StringBuffer类描述的字符串内容是个可以改变的字符串序列。 StringBuffer和StringBuilder继承AbstractStringBuilder间接继承 Object，实现接口Serializable,CharSequence,Appendable StringBuffer/StringBuilder没有compareTo方法 StringBuffer/StringBuilder含有一个String没有的方法 append();拼接 7.2 特性可变字符串，char[] value; 动态扩容 7.3 对象的构建123456 //无参数构造方法 构建一个默认长度16个空间的对象 char[]StringBuilder builder = new StringBuilder(); //利用给定的参数 构建一个自定义长度空间的对象 char[]StringBuilder builder = new StringBuilder(20); //利用带String参数的构造方法 默认数组长度字符串长度+16个StringBuilder builder = new StringBuilder(\"abc\"); 7.4 StringBuilder中常用的方法 最主要的方法 append() 频繁的拼接字符串的时候使用此方法 提高性能 ensureCapacity(int minimumCapacity) 确保底层数组容量够用 capacity();//字符串底层char[]的容量 length();//字符串有效元素个数(长度) setLength();//设置字符串的有效元素个数 char = charAt(int index); int = codePointAt(int index); String = substring(int start [,int end]);//注意需要接受返回值 看见截取出来的新字符串效果 StringBuilder = delete(int start [,int end]);//StringBuilder类中独有的方法String类没有，将start到end之间的字符串删掉 不用接受返回值就看到效果啦 StringBuilder = deleteCharAt(int index);//String类中没有的方法，将给定index位置的某一个字符删除掉啦 int = indexOf(String str [,int fromIndex]); int = lastIndexOf(String str [,int fromIndex]);//找寻给定的str在字符串中第一次出现的索引位置 带重载 则从某一个位置开始找 insert(int index,value);//将给定的value插入在index位置之上 replace(int start,int end,String str);//将start和end之间的部分替换成str, builder.replace(2,5,”zzt”); setCharAt(int index,char value);//将index位置的字符改成给定的value toString();//将StringBuilder对象 构建成一个string对象 返回 trimToSize();//将数组中无用的容量去掉 变成length长度的数组 7.5 总结 StringBuilder类不一定需要，是为了避免String频繁拼接修改字符串信息的时候才用的，底层数组是可变的，提高了性能； 常用方法 与String类不同的独有方法：append()，insert()，delete()，deleteCharAt()，reverse()； 与String类相同的方法：length()，charAt()，codePointAt()，indexOf()，lastIndexOf()，substring()，replace()；名字相同 用法不一致 不是很常用的方法：ensureCapacity()，capacity()，setLength()，trimToSize()，setCharAt(); String家族笔试中经常容易考察的知识点 String所属的包 继承关系 实现接口 java.lang 继承Object 接口Serializable,CharSequence,Comparable String构建方式 常量 构造方法 String对象内存结构 字符串常量区 new堆内存对象 == equals()区别 “a”+”b”+”c” String不可变特性 长度及内容 String中的常用方法 concat(); toUpperCase(); String和StringBuilder区别 | String和StringBuffer区别 String不可变字符串 JDK1.0 有一个接口Comparable 不可变体现在长度及内容 有一些方法StringBuilder没有 concat compareTo toUpperCase StringBuilder可变字符串 JDK1.5 有一个接口Appendable 可变字符串 没有final修饰 底层可以进行数组扩容 有一些方法String没有 append() insert() delete() reverse() StringBuffer和StringBuilder的不同 它们方法基本相同 StringBuffer早期版本1.0，早期版本，线程同步，安全性比较高，执行效率相对较低 StringBuilder后来的版本1.5，后期版本，线程非同步，安全性比较低，执行效率相对较高 8. Optional类 可能包含或不包含非空值的容器对象。 如果一个值存在， isPresent()将返回true和get()将返回值。 获取字符串长度： 方式1：if(null==str){return 0;}else{return str.length();} 方式2：return Optional.ofNullable(str).map(String::length).orElse(0); 1234567891011121314// 获取两个字符串长度和String str1 = \"zhangsan\";String str2 = null;int str1Length = Optional.ofNullable(str1).map(String::length).orElse(0);int str2Length = Optional.ofNullable(str2).map(String::length).orElse(0);System.out.println(str1Length + str2Length);//8，8+0//步骤分解://构建Optional对象Optional&lt;String&gt; op1 = Optional.ofNullable(str1);//将str1的长度的结果构建成Optional对象Optional&lt;Integer&gt; op2 = op1.map(String::length);//如果长度不为空，则获取长度值，否则返回默认值int len = op2.orElse(0);System.out.println(len);//8","tags":[{"name":"Java","slug":"Java","permalink":"http://chaooo.github.io/tags/Java/"},{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"}]},{"title":"【Java教程】面向对象","date":"2017-04-10T10:50:47.000Z","path":"article/20170410.html","text":"面向对象是相对于面向过程而言，过程其实就是函数，对象是将函数和属性进行了封装。Java中的面向对象（Object Oriented）是一种新兴的程序设计方法，或者是一种新的程序设计规范(paradigm)，其基本思想是使用对象、类、继承、封装、多态等基本概念来进行程序设计。 类与对象 构造方法和方法重载 this关键字 方法的传递和递归 封装 static关键字 单例设计模式 继承（extends） 方法的重写（Override） 访问控制 包（Package） final关键字 对象的创建过程 多态 抽象类 接口 内部类 回调模式 抽象方法的笔试考点 枚举类（enum） 内存机制问题 1. 类与对象1.1 类的定义1class 类名 &#123;类体&#125; 类名由多个单词组成时，要求每个单词首字母大写 1.2 成员变量的定义1class 类名 &#123; 数据类型 成员变量名=初始值; ... &#125; 成员变量名由多个单词组成时，要求第二个起每个单词首字母大写 1.3 对象的创建1new 类名(); 当一个类定义完毕后使用new关键字创建/构造该类的对象的过程叫做类的实例化。 1.4 引用12类名 引用变量名;Person p = new Person(); //声明person类型的引用p指向Person类型对象 12引用变量名.成员变量名;p.name = 'zhangsan'; 在JAVA中，使用引用数据类型声明的变量叫做引用变量，简称‘引用’。 使用引用可以记录对象在堆区中存放的内存地址信息，便于下次访问。 除八种基本类型之外，用类名（接口，数组）声明的变量称为引用类型变量，引用类型变量存的某个对象的地址信息，引用的功能在于访问对象。 1.5 成员方法123class 类名 &#123; 返回值类型 成员方法名(形参列表)&#123;方法体;&#125;&#125; 返回值类型：可以是基本数据类型，也可以是引用，当方法不需要返回数据用void 形参列表：数据类型 形参1, 数据类型 形参2, … 2. 构造方法和方法重载2.1 构造方法1class 类名 &#123; 构造方法名(形参列表)&#123;构造方法体;&#125; &#125; 构造方法名与类名相同且没有返回值 当使用new关键字构造对象时，会自动调用构造方法，实现成员变量的初始化工作。 2.2 默认构造方法 当一个类中没有没有自定义任何构造方法时，编译器会提供一个无参的空构造方法，叫做默认/缺省构造方法。 若类中出现自定义构造方法，则编译器不再提供构造方法。 2.3 方法重载（overload）在Java中，方法名相同，参数列表不同的方法构成重载关系。 体现形式：参数个数，参数顺序，参数类型。（与形参变量名和返回值无关，但最好返回值类型相同） 实际意义：调用者只需要记住一个方法名就可以不同的版本，从而实现不同的效果。 3. this关键字在构造方法中出现this时,this代表当前正在构造的对象；在成员方法中出现this,this代表当前正在调用的对象。 使用方式： 当形参变量和成员变量同名时，在方法体中优先使用形参变量，若希望使用成员变量，则需要加上this，即this.变量名 在构造方法的的第一行，可以调用本类中的其他构造方法。 4. 方法的传递和递归4.1 传参 基本数据类型变量作为参数传递时，型参数值改变不会影响实参变量的数值。 引用类型变量作为参数传递时，形参指向内容的改变会影响实参变量指向的内容。 引用数据类型变量作为参数传递时，形参改变指向后再改变指向内容不会影响实参指向的内容。 4.2 递归的调用 递归是指方法体内部调用自身 必须有递归的规律和退出条件 使用递归必须使得问题简单化而不是复杂化 若递归影响到程序的执行性能时，则用递推取代之 5. 封装面向对象的三大特征：封装，继承，多态。 封装基本概念：封装就是对成员变量的数值进行密封包装处理以及合理性判断 封装基本流程： 私有化成员变量(private) 提供公有的get、set方法，并在set方法体中进行合理性判断 在构方法中调用set方法进行合理值的判断 6. static关键字基本概念：通常情况下成员变量隶属于对象层级，也就是每创建一个对象就会申请一块独立的内存空间来存储就会造成内存空间的浪费。 为了解决上诉问题，Java中使用static关键字修饰该成员变量表达静态的含义，此时成员变量提升到类层级，所有对象共享，随着类的加载准备就绪，与对象创建再无关。 static可以修饰：修饰属性 修饰方法 修饰块 修饰类(内部类) 特点 静态元素在类加载时就初始化，此时还没创建对象，可以通过类名直接访问 静态元素存储在静态元素区，每个类有一个自己的区域，与别的类不冲突 静态元素只加载一次，全部类对象及类本身共享 静态元素区Carbage Collection无法管理，可以粗暴理解为常驻内存 非静态成员和静态成员都可以访问静态成员 静态成员不可以访问非静态成员 静态元素中不可出现this或super关键字，静态元素属于类的 7. 单例设计模式基本概念：当一个类有且只能对外提供一个对象时，这样的类就叫作单例类，而设计单例类的思想和模式，叫做单例设计模式。 12345678910/** * 编程实现Singleton类的封装 */public class Singleton&#123; private static Singleton sin = new Singleton();//2.提供本类的引用指向本类的对象 private Singleton()&#123;&#125; //1.私有化构造方法 public static Singleton getInstance()&#123;//3.提供公有的get方法将上述成员变量的数值返回出去 return sin; &#125;&#125; 实现流程： 私有化构造方法（private） 提供本类类型的引用指向本类类型对象（private static） 提供公有的get方法将上述对象return出去（public static） 实现方式：饿汉式和懒汉式，开发中推荐饿汉式。 8. 继承（extends） 继承就是子类复用父类的代码，关键字extends表示类和类的继承关系 使用继承可以提高代码复用性、扩展性、以及可维护性。 子类不能继承父类的构造方法和私有方法，私有成员变量可以继承但不能直接使用。 无论使用何种方式构造方式构造子类的对象都会自动调用父类的无参构造方法来初始化从父类中继承下来的成员变量，相当于在构造方法的第一行增加super()的效果。 使用继承必须满足逻辑关系：子类 is a 父类，不能滥用继承。 在Java中只能支持单继承，也就是一个一个子类只能有一个父类，但一个父类可以有多个子类。 1234567891011class Cricle extends Shape&#123; int r; Cricle()&#123;&#125; //编译器会加入无参的调用 super()。 Cricle(int x, int y, int r)&#123; super(x, y); //通过super关键字调用父类的构造方法。 setR(r); &#125; public void setR(int r)&#123; this.r = r; &#125;&#125; 9. 方法的重写（Override）概念：从父类继承下来的方法不满足子类的需求时，就需要子类中重新写一个和父类一样的方法，覆盖从父类中继承下来的版本，该方法就叫方法的重写。原则： 要求方法名相同，参数列表相同，返回值类型相同；jdk1.5开始返回子类类型。 要求访问权限不能变小，可以相同或变大 重写的方法不能抛出更大的异常 10. 访问控制 public修饰的内容可以在任意位置使用，private修饰的内容只能在本类中使用， 通常情况下，成员变量都使用private修饰，成员方法都使用pubic修饰 访问控制符 访问权限 本类内部 本类中的包 子类 其他包 public 共有的 Y Y Y Y protected 保护的 Y Y Y N 不写 默认的 Y Y N N private 私有的 Y N N N 11. 包（Package）为了解决命名冲突问题，便于文件的管理 1234package 包名；package 包名1.包名2.包名3...包名n;/* 指定包名时应按照一定的规范，eg: 公司域名反写.项目名称.模块名称.类名 */org.apache.commons.lang.StringUtil; 12. final关键字 final关键字修饰类体现该类不能被继承（防止滥用继承）。 final关键字修饰方法体现在该方法不能被重新，但可以被继承（防止不经意间造成的方法重写）。 final关键字修饰成员变量体现在改成员变量必须初始化且不能更改（防止不经意间造成的数据更改）。 扩展：在开发中很少单独使用static或者final单独修饰成员变量，而是使用public static final共同修饰成员变量来表达常量的含义，而常量的命名规范是：所有字母大写，不同单词之间下划线连接。 13. 对象的创建过程 单个对象的创建过程 main方法是程序的入口，若创建对象时没有指定初始值则采用默认初始化方式处理； 若声明成员变量时进行了显示初始化操作，则最终采用显示初始化的初始值处理； 执行构造块中的代码可以对成员变量进行赋值； 执行构造方法体中的代码可以对成员变量进行再次赋值； 此时对象构造完毕，继续向下执行后续的代码； 子类对象的创建过程 main方法是程序的入口，先加载父类的的代码再加载子类的代码； 先执行父类静态代码块，再执行子类的静态代码块； 先执行父类的构造块，再执行父类的构造方法体，此时包含的父类对象构造完毕； 先执行子类的构造块，再执行子类的构造方法体，此时子类对象构造完毕，继续向下执行后续代码。 14. 多态 语法：父类的引用指向子类的对象 123父类类型 引用变量名 = new 子类类型();Person pw = new Worker();pw.show();//再编译阶段调用Person的show()方法，在运行阶段调用Worker的show()方法。 多态的效果： 父类的引用可以直接调用父类独有的方法。 父类的引用不可以直接调用子类独有的方法。 对于父类子类都有的非静态方法来说，编译阶段调用父类的，运行阶段调用子类重写后的。 对于父类子类都有的静态方法来说，只调用父类的。 多态的实际意义：屏蔽不同子类的差异性实现通用的编程，从而带来不同的结果。 多态的表现形式 多态的前提要有继承的关系 使用父类引用指向子类对象 Person p = new Teacher();//向上转型 该引用只能调用父类中定义的属性/方法 执行结果，如果调用属性:执行父类的，如果调用方法:看子类是否重写 若想要调用子类独有的成员，将身份还原回去(向下转型/造型)，若需要转换的类型与真实对象类型不匹配，会产生一个运行时异常ClassCastException 引用数据类型之间的转换 转换必须发生在父子类之间，否则编译报错。 自动类型转换：小到大，子类型向父类型的转换，eg:Person pw = new Worker();。 强制类型转换：大到小，父类型向子类型转换，eg:((Worker) pw).getSalary();//将父类引用强制转换子类型调用子类方法。 为了避免类型转换异常，对象进行强制类型转换时应该用instanceof判断引用变量真正指向的对象是否是要转换的目标类型。 123456/*语法格式：*/ 对象 instanceof 类型 //返回布尔值if(pw instanceof Teacher)&#123; Teacher t = (Teacher) pw;&#125;else&#123; System.out.println(\"转换会有异常\");&#125; 多态的使用场合： 1234567// 通过方法的参数传递形成多态。public static void draw(Shape s)&#123;&#125;TestShape.draw(new Rect(1,2,3,4));// 在方法体中直接使用多态的语法格式。TestAbstrat ta = new SubTestAbstract();ta.show(); 15. 抽象类 基本概念 用abstract关键字修饰的类称为抽象类。 抽象类不能实例化，抽象类的意义在于被继承。 抽象类为其子类“抽象”出了公共部分，通常也定义了子类所必须具体实现的抽象方法。 抽象方法：指不能具体实现的方法，没有方法体并使用abstract修饰。 12345public abstract class Shape&#123; //一个类若定义了抽象方法，则必须以abstract关键字声明为抽象类 private int x; private int y; public abstract boolean contains(int x, int y);//用abstract修饰的方法，称之为抽象方法，没有方法体&#125; 注意： 抽象类中可以有成员变量，成员方法，以及构造方法。 抽象类中可以没有抽象方法，也可以有抽象方法。 具有抽象方法的类必须是抽象类，因此其真正意义的抽象类应该是有抽象方法，并且使用abstract修饰。 子类必须实现抽象方法（不同子类可能有不同实现），否则改子类也变抽象。 抽象类对子类具有强制性和规范性，因此叫做模板设计模式。 推荐使用多态的语法格式实现抽象类，若需要更换子类时，该方法中只需要将new关键字后面的类型名称修改而其他位置无需改变就可以立即生效，从而提高了代码的维护性和扩展性。 多态实现抽象类的缺点：若希望调用子类独有的方法时，则需要强制类型转换。 16. 接口 基本概念：接口可以看成是特殊的抽象类。即只包含抽象方法的抽象类。通过interface关键字定义。 1234interface Runner &#123; //-通过interface关键字定义接口 public static final int SEF_SPEED=100;//-接口中不能定义成员变量，只能定义常量 public void run();//-接口中只可以定义没有实现的方法（可以省略public abstract）&#125; 一个类可以通过implements关键字实现接口，一个类可以实现多个接口，并且该类需要实现这些接口中定义的所有方法。 12345678910class American implements Runner,... &#123; //与继承不同，可以实现多个接口 @Override public void run()&#123;//该类需要实现接口中定义的所有方法 System.out.println(\"run...\"); &#125; public static void main(String[] args) &#123; Runner ra = new American();//接口作为一种类型声明，并且声明的变量可以引用实现类的对象 ra.run();//通过该变量可以调用该接口定义的方法 &#125;&#125; 一个接口可以通过extends关键字继承另一个接口，子接口继承了父接口所有的方法。 1interface Hunter extends Runner&#123;...&#125; 类与接口的关系 类和类使用extends继承，仅支持单继承。 接口和接口使用extends继承，支持多继承。 类使用implements实现接口，支持多实现。 抽象类与接口的关系（笔试题） 定义抽象类:abstract class，而定义接口:interface； 类继承抽象类:extends单继承，而类实现接口:implements多实现； 抽象类可以有构造方法，而接口不能有构造方法； 抽象类可以有成员变量，而接口只能有常量； 抽象类可以有成员方法，而接口只能有抽象方法； 抽象类中增加方法子类可以不用重写，而接口中增加方法子类必须重写； 从jdk1.8开始允许接口中有非抽象方法，但需要default关键字修饰。 17. 内部类 内部类指的是在Java中可以将一个类定义在另一个类定义在另一个类的内部 内部类定义在 类的内部 ，与类成员层次一致 内部类定义在 方法/块内部（与类成员相差一个层次，方法的局部变量一个层次） 成员内部类：将一个类直接定义在类的里面，作为成员，与属性或方法层次一致 局部内部类：将一个类定义在方法/块里面，作为成员的内部结构，与临时的局部变量一个层次 匿名内部类：成员匿名内部类，局部匿名内部类 静态内部类：成员静态内部类 17.1 *成员内部类 将一个类直接定义在类的里面，作为成员，与属性或方法层次一致 成员内部类可以与正常类一样 使用不同的修饰符来修饰 好处1.省略了一个.java文件 好处2.成员内部类中可以访问外部类的所有成员 包括私有的 若想要在内部类中通过对象.调用外部类成员 外部类.this.外部类成员; 内部类存在后 源代码进行编译 产生一个字节码 Demo$InnerDemo.class 17.2 局部内部类 将一个类定义在方法/块里面，作为成员的内部结构，与临时的局部变量一个层次 局部内部类像是一个局部的变量一样，不能用public protected private及static 只能用abstract或final 局部内部类命名规则Demo$1InnerTestMethod Demo$2InnerTestMethod 局部内部类使用的变量只能是final修饰 17.3 *匿名内部类将类直接定义在类中 或者类成员中 成员匿名内部类 局部匿名内部类匿名内部类没有类的所有结构(名字 修饰符) 只有类体通常会在抽象类或接口创建的后面使用，当然具体的类也可以有匿名子类匿名类内部没有构造方法，也不能用任何修饰符来修饰 当接口类型的引用作为方法的形参时，实参的传递方式有两种： 自定义类实现接口并重写抽象方法，然后创建该类的对象作为实参传递。 直接使用匿名内部类的语法格式得到接口类型的引用，再作为实参传递。 12345678910111213141516171819202122232425262728293031public interface A &#123; public abstract void show();&#125;//-方式1：自定义类实现接口并重写抽象方法，然后创建该类的对象作为实参传递public class SubA implements A &#123; @Override public void show() &#123; System.out.println(\"这里自定义类实现接口并重写抽象方法！\"); &#125;&#125;//测试类public class ATest &#123; public static void test(A a) &#123; a.show(); &#125; public static void main(String[] args) &#123; //ATest.test(new A());//报错，A是接口，不能new对象 //-方式1：接口实现类的对象作为实参传递 ATest.test(new ASub());//接口类型引用指向实现类的对象，形成了多态。 //-方式2：匿名内部类 // 接口/父类类型 引用变量名 = new 接口/父类类型() &#123;方法的重写&#125;; A ta = new A() &#123; @Override public void show() &#123; System.out.println(\"这里是匿名内部类\"); &#125; &#125;; ATest.test(ta);//得到接口类型的引用，再作为实参传递 &#125;&#125; 匿名内部类定义：如果在一段程序需要创建一个类的对象（通常这个类需要实现某个接口或继承某个类），而且对象创建后这个类的价值就不存在了，这个类不必命名，称之为匿名内部类。 语法格式：接口/父类类型 引用变量名 = new 接口/父类类型() {匿名类类体，这里重写方法};。 1SuperType obj = new SuperType(...)&#123; ... &#125;; 17.4 静态内部类 成员静态内部类 不需要外部类对象，通过正常的方式直接创建内部类 静态元素不能访问非静态成员(自己类和外部类) 18. 回调模式回调模式是指：如果一个方法的参数是接口类型，则在调用该方法时，需要创建并传递一个实现此接口的对象；而该方法在运行时会调用到参数对象中所实现的方法 123456789101112131415interface Action&#123; public void doSth();&#125;//repeat方法需要一个Action接口类型参数，让其doSth方法重复执行n次public static void repeat(int n, Action ac)&#123; for(int i=0; i&lt;n; i++)&#123; ac.doSth();&#125;&#125;//此处的语义可解释为：通过接口回调传递了一个方法给repeat,让repeat将其执行5次。public static void main(String[] args)&#123; repeat(5, new Action()&#123;//通过匿名内部类传递参数 public void doSth()&#123; System.out.println(\"Hello\") &#125; &#125;);&#125; 19. 抽象方法的笔试考点 abstract与哪些关键字不能共存： final关键字；因为final关键字修饰的类不能被继承，方法不能被重写，而abstract关键字修饰的类继承后，该类的方法需要重写，相互冲突。 static关键字；因为static能被实例化可直接调用，而abstract不能被实例化，相互冲突。 private关键字；因为private修饰的私有方法不能被继承，就不能重写，而abstract方法需要重写。 20. 枚举类（enum） 一个类中的对象 认为个数是有限且固定的 可以将每一个对象一一列举出来 创建枚举类型要使用 enum 关键字，隐含了所创建的类型都是 java.lang.Enum 类的子类（java.lang.Enum 是一个抽象类）。枚举类型符合通用模式 Class Enum&lt;E extends Enum&gt;，而 E 表示枚举类型的名称。枚举类型的每一个值都将映射到 protected Enum(String name, int ordinal) 构造函数中，在这里，每个值的名称都被转换成一个字符串，并且序数设置表示了此设置被创建的顺序。 我们自己定义的每一个enum类型 都会默认继承Enum 间接继承Object Enum类型，有两个属性 name—–&gt;枚举对象的名字，name()获取name属性 ordinal—&gt;枚举对象在类中罗列的顺序 类似index 也从0开始 ordinal()获取序号 一些常用的方法 valueOf() 通过给定的name获取对应的枚举对象 values() 获取全部的枚举对象 —&gt; 返回一个数组 Day[] compareTo() 可以比较两个枚举对象 int toString() 由于这个方法没有final修饰 可以覆盖(重写) switch内部判断枚举的应用 我们也可以在enum中描述自己的一些属性或方法 必须在enum类中第一行 描述一下枚举的样子 最后需要分号结束; 可以定义自己的属性 类创建的过程中 帮我们创建枚举类型的对象 需要给枚举类型提供对应样子的构造方法 构造方法只能private修饰 可以重载 1234567891011121314151617181920public enum Day&#123; //描述了七个当前类的对象 monday(\"星期一\",1),tuesday(\"星期二\",2),wednesday,thursday,friday,saturday,sunday; private String name; private int index; private Day()&#123;&#125; private Day(String name,int index)&#123; this.name=name; this.index=index; &#125; public String getName()&#123; return this.name; &#125; public void setName(String name)&#123; this.name=name; &#125;&#125; 21. 内存机制问题 类创建在哪儿 对象创建在哪里 继承关系 静态成员 方法执行 栈内存—&gt;Person p = new Person();—-&gt;堆内存 方法区—类模板 栈内存—-变量空间,方法临时执行空间（从创建开始执行完毕,立即回收） 堆内存—-new申请对象空间（垃圾回收器GC,对象空间没有任何引用指向视为垃圾） 方法区—-常量 类模板 静态成员（有且只有一份,不回收） Runtime类(是单例模式)之中提供了几个管理内存的方法 maxMemory totalMemory freeMemory 栈内存溢出错误StackOverflowError 堆内存溢出错误OutOfMemoryError Object类中有一个finalize方法 如果重写也能看见对象回收的效果 GC系统提供的一个线程 回收算法","tags":[{"name":"Java","slug":"Java","permalink":"http://chaooo.github.io/tags/Java/"},{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"}]},{"title":"【Java教程】语法入门","date":"2017-04-07T09:33:54.000Z","path":"article/20170407.html","text":"这是Java教程的第一篇，梳理Java基础知识是学习其他专业知识的第一步阶梯；要想精通编程必须通过大量的编程训练，在实践中掌握编程知识，培养编程能力，并逐步理解和掌握程序设计的思想和方法。 数据类型 变量与常量 数据类型之间的转换 运算符 循环 数组 函数 1. 数据类型1.1 分为两大类： 基本数据类型：byte，short，int，long，float，double，boolean，char 引用数据类型：数组，类(抽象类)class，接口interface，枚举enum，标注@interface 注：单个字节表示8位二进制位，最左边表示符号位（0：正，1：负）。 1.2 整数类型（byte，short，int，long） byte： 1个字节，范围-2^7~2^7-1，即-128~127。 short：2个字节，范围-2^15~2^15-1，即-32768~32767。 int: 4个字节，范围-2^31~2^31-1，即正负21亿之间。 long： 8个字节，范围-2^63~2^63-1，比int更大。如果要表示long直接量，需要L或l结尾。 1.3 浮点类型（float，double） float： 4个字节，单精度浮点数，取到小数点后7位有效数字。如果要表示float直接量，需要F或f结尾 double：8个字节，双精度浮点数，取到小数点后15位有效数字。 扩展：浮点运算有时会有误差，为了实现精确运算可使用java.math.BigDecimal类型加以描述。 1.4 布尔类型（boolean） boolean：1个字节（未明确规定），值只有true和false。 1.5 字符类型（char） char：2个字节，表示单个字符的数据类型。事实是一个16位无符号整数，值是对应字符的编码，如：’a’,’1’,’中’ 等。 开发中很少用到char类型，而使用String类型描述的多个字符组成的字符串，使用双引号””引起来。 需记住的ASII码字符：’a’:97，’A’:65，’0’:48，空格:32，换行符:10 常用转义符(逃逸字符)：\\t:制表符，\\n:换行，\\&quot;，\\&#39;，\\\\:反斜杠本身，\\b:回退一格，\\r:回车 字符类型计算 一个字符加一个数字，得到Unicode码表中那个数之后的字符 两个字符相减得到它们在表中的距离 char也可以和int之间相互赋值 2. 变量与常量2.1 常量 常量是一个值，在程序运行的过程中不能再次发生改变 基本类型的值都可以认为是常量 4 3.4 ‘a’ true，String类(引用数据类型)值”abc”视为常量 常量存储在常量缓冲区(常量池)中，有且只有一份,常量池中的值默认空间大小 32bit–int 64bit–double 2.2 变量 变量是在栈内存中开辟的一块内存空间(小容器),程序执行过程中可以改变的 变量空间在创建(变量声明)的时候,必须指定数据类型,变量空间的名字 变量空间 里面只能存储一个内容(值/引用) 空间内的内容的类型与定义时一致 内容可以改变 内存结构与执行过程：类的定义，编译，加载 空间各个区，变量 赋值 2.3 标识符（变量）命名规则 必须字母，数字，下划线以及美元$等组成，且首位非数字。 不能使用Java语言中的关键字，如class，static，void，int等。 区分大小写，长度无限制，但不能过长，尽量见名知意。 2.3 命名的规约 类名字：首字母大写，如果两个以上的单词，所有首字母都大写 变量名：首字母小写，如果两个以上的单词，之后的首字母大写 遵循驼峰式命名规约，所有名字都需要见名知义，为了增强程序的可读性 3. 数据类型之间的转换3.1 基本数据类型之间转换 自动类型转换：从小类型到大类型自动转换 12byte --&gt; short --&gt; int --&gt; long --&gt; float --&gt; double char -----^ 强制类型转换：需在被转换数据前加上类型，会造成精度损失或者溢出 12long big = 1024L\\*1024\\*1024;int i = (int)big; 3.2其他数据类型之间转换 同种大数据类型之间才能发生转换 类型转换之前，保证大前提：同种大数据类型一致 基本–基本 可以直接转换(自动 强制) 引用–引用 可以直接转化(自动 强制 – 上转型 下转型) 基本–引用 不可以直接进行转化(间接-桥梁-包装类) 保证大数据类型一致的前提下(都是基本类型) 小数据类型一致:整型–&gt;整型 / 浮点–&gt;浮点 比较内存空间的大小 大数据类型空间可以直接接受小数据类型的值(自动转换) 小数据类型空间不可以直接接受大数据类型的值(强制类型转换) 强制类型转换,写法好用,但是需要注意取值范围的问题,丢失一部分数据1234byte a = 1; int b = a;//自动直接转化就可以int a = 1; byte b = (byte)a;//需要强制类型转换float x = 3.4F; double y = x;//自动直接转化double x = 3.4; float y = (float)x;//强制转换 小数据类型不一致:整型–&gt;浮点 比较精确程度 浮点型的精确程度更高 任何一个浮点型空间都可以直接接受一个整型的值 反之需要进行强制类型转换(强行将小数点之后的部分去掉,只保留整数)12int a = 1; float b = a;//自动直接转化float a =1.0F; int b = (int)a;//强制类型转换 整型–&gt;字符 每一个字符都对应这一个Unicode码 a–9712char x = &apos;a&apos;; int y = x;//自动转化 y--97int x = 97; char y = (char)x;//强制的转化 布尔类型很特殊 不能与其他基本类型之间发生转化 4. 运算符 算术运算符： +，-，*，/，% 关系运算符： &gt;，&lt;，&gt;=，&lt;=，==，!= 自增减运算符： ++，-- 逻辑运算符： &amp;&amp;，||，！（短路特性：逻辑与&amp;&amp;运算，若第一个条件为假,跳过第二个条件；逻辑或||运算，若第一个条件为真，跳过第二个条件） 三目运算符： 条件 ? 表达式1 ： 表达式2 赋值运算符：=，+=，-=，*=，= 5. 循环 while循环和for循环完全可以互换。 while循环主要用于明确循环条件，但不明确循环次数的场合 for循环主要用于明确次数或范围的场合 while(true) 等价于 for(;;)，表示无限循环。 6. 数组6.1 一维数组 数组类型[] 数组名 = new 数据类型[长度] ：动态方式 12数组类型[] 数组名 = new 数据类型[长度] //动态方式int[] arr = new int[5]; 123数组类型[] 数组名 = &#123;初始值1, 初始值1, 初始值1, ...&#125; //静态方式int[] arr = &#123;10, 20, 30, 40&#125;;/*特殊方式：*/ int[] arr = new int[]&#123;10, 20, 30&#125;; 6.2 二维数组12数组类型[][] 数组名 = new 数据类型[行数][列数]int[][] arr = new int[5][6]; 12数组类型[][] 数组名 = &#123;&#123;初始值1, 初始值1, 初始值1&#125;,&#123;值2,...&#125; ...&#125;int[] arr = &#123;&#123;10, 20, 30&#125;, &#123;01, 5, 3&#125;, &#123;8, 20, 6&#125;&#125;; 二维数组arr.length表示行数，arr[0].length表示此行的长度 7. 函数 函数是一块代码，接收零个或多个参数，做一件事情，并返回零个或一个值。 123456789public static int sum(int a, int b)&#123; int i; int sum=0; for(i=a; i&lt;=b; i++)&#123; sum += i; &#125; System.out.println(a +\"到\"+ b +\"的和是\"+ sum); return sum;&#125; 函数的调用：函数名(参数值); 即使没有参数也需要(),()起到了调用函数的作用，如果有参数，则需要给出正确的数量和顺序 函数的返回：return停止函数的执行，并返回一个值，可以再赋值给变量，传递给另一个函数，甚至可以丢弃，有时候要的是副作用","tags":[{"name":"Java","slug":"Java","permalink":"http://chaooo.github.io/tags/Java/"},{"name":"后端开发","slug":"back-end","permalink":"http://chaooo.github.io/tags/back-end/"}]},{"title":"【Hexo博客折腾】BlueLake博客主题的详细配置","date":"2016-12-29T03:25:33.000Z","path":"article/20161229.html","text":"开始之前BlueLake主题写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能。这个主题只是一个小小的雏形，期待您来帮助它成长。 在阅读本文之前，假定您已经成功安装了Hexo，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 需要特别注意的是Hexo有两个_config.yml配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为根_config.yml；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为主题_config.yml。 1. 安装您可以直接到BlueLake发布页下载，然后解压拷贝到themes目录下，修改配置即可。不过我还是推荐使用GIT来checkout代码，之后也可以通过git pull来快速更新。 1.1 安装主题在根目录下打开终端窗口： git bash1$ git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake 1.2 安装主题渲染器BlueLake是基于jade和stylus写的，所以需要安装hexo-renderer-jade和hexo-renderer-stylus来渲染。 git bash12$ npm install hexo-renderer-jade@0.3.0 --save$ npm install hexo-renderer-stylus --save 1.3 启用主题打开根_config.yml配置文件，找到theme字段，将其值改为BlueLake(先确认主题文件夹名称是否为BlueLake)。 根_config.yml_config.yml1theme: BlueLake 1.4 验证首先启动 Hexo 本地站点，并开启调试模式： git bash1$ hexo s --debug 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运行。 1.5 更新主题今后若主题添加了新功能正是您需要的，您可以直接git pull来更新主题。 git bash12cd themes/BlueLakegit pull 2. 配置2.1 配置网站头部显示文字打开根_config.yml，找到： 根_config.yml_config.yml1234title: subtitle: description: author: title和subtitle分别是网站主标题和副标题，会显示在网站头部；description在网站界面不会显示，内容会加入网站源码的meta标签中，主要用于SEO；author就填写网站所有者的名字，会在网站底部的Copyright处有所显示。 2.2 设置语言该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在根_config.yml配置如下： 根_config.yml_config.yml1language: zh-CN 2.3 设置菜单打开主题_config.yml，找到： 主题_config.ymlthemes/BlueLake/_config.yml12345678910111213menu: - page: home directory: . icon: fa-home - page: archive directory: archives/ icon: fa-archive # - page: about # directory: about/ # icon: fa-user - page: rss directory: atom.xml icon: fa-rss 主题默认是展示四个菜单，即主页home，归档archive，关于about，订阅RSS；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。每个页面底部的footer中联系博主的三个图标分别是邮箱，微博主页链接地址，GitHUb个人页链接地址，直接使用主题_config.yml中about页面的配置，若不需要about页面，只需要如下配置就好： 主题_config.ymlthemes/BlueLake/_config.yml12345# About page about: email: ## 个人邮箱 weibo_url: ## 微博主页链接地址 github_url: ## github主页链接地址 2.3.1 添加about页此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面： git bash1$ hexo new page 'about' 打开主题_config.yml，补全关于我页面的详细信息： 主题_config.ymlthemes/BlueLake/_config.yml12345678# About page about: photo_url: ## 头像的链接地址 email: ## 个人邮箱 weibo_url: ## 微博主页链接地址 weibo_name: ## 微博用户名 github_url: ## github主页链接地址 github_name: ## github用户名 当然您也可以自定义重新布局about页面，只需要修改layout/page.jade模板就好。 2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件在根目录下打开命令行窗口： git bash123$ npm install hexo-generator-feed --save$ npm install hexo-generator-sitemap --save$ npm install hexo-generator-baidu-sitemap --save 添加主题_config.yml配置： 主题_config.ymlthemes/BlueLake/_config.yml1234567891011121314Plugins: hexo-generator-feed hexo-generator-sitemap hexo-generator-baidu-sitemapfeed: type: atom path: atom.xml limit: 20sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 2.4 添加本地搜索默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件hexo-generator-json-content来创建JSON数据文件： git bash1$ npm install hexo-generator-json-content@2.2.0 --save 然后在根_config.yml添加配置： 根_config.yml_config.yml123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 最后在主题_config.yml添加配置： 主题_config.ymlthemes/BlueLake/_config.yml1local_search: true 2.5 修改站点图标站点图标存放在主题的Source目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。您需要准备一张ico格式并命名为** favicon.ico ，请将其放入hexo目录的source文件夹，建议大小：32px X 32px。您需要为苹果设备添加网站徽标，请命名为 apple-touch-icon.png **的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。(有很多网站都可以在线生成ico格式的图片。) 2.6 添加站点关键字请在hexo目录的根_config.yml中添加keywords字段，如： 根_config.yml_config.yml1234567# Sitetitle: Hexosubtitle: 副标题description: 网站简要描述,如：Charles·Zheng's blog.keywords: 网站关键字, key, key1, key2, key3author: Charleslanguage: zh-CN 2.7 首页添加文章置顶在根目录下打开命令行窗口安装： git bash12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save 然后在需要置顶的文章的Front-matter中加上top: true即可。 123456---title: BlueLake博客主题的详细配置tags: [hexo,BlueLake]categories: Hexo博客折腾top: true--- 2.8 更换主题背景和添加文章版权信息更换主题背景为深色 主题_config.ymlthemes/BlueLake/_config.yml 12# Theme tonedark: true #true/false 添加文章版权信息 主题_config.ymlthemes/BlueLake/_config.yml 12345# Theme tone#Copyrightcopyright: enable: true #true/false describe: 转载请注明出处(必须保留原文作者署名原文链接) #自定义描述替换默认描述 2.9 其他配置主题_config.yml的其他配置 show_category_count——是否显示分类下的文章数。 widgets_on_small_screens——是否在小屏显示侧边栏，若true,则侧边栏挂件将显示在底部。主题_config.ymlthemes/BlueLake/_config.yml 12show_category_count: true widgets_on_small_screens: true 3.集成第三方服务3.1 添加评论目前主题集成六种第三方评论，分别是多说评论、Disqus评论、来必力评论、友言评论、网易云跟帖评论、畅言评论、基于Github Issue的GITALK，推荐gitalk。 需要 GitHub Application，如果没有点击这里申请。 Application name： 应用名称，随意 Homepage URL： 网站URL，对应自己博客地址 Application description ：描述，随意 Authorization callback URL：# 网站URL，博客地址就好 点击注册，页面会出现其中Client ID和Client Secret在后面的配置中需要用到 配置主题_config.yml： 主题_config.ymlthemes/BlueLake/_config.yml1234567891011#Cmmentscomment: gitalk: enable: true ## 开启gitalk owner: ## GitHub的用户名 repo: ## 此评论存放的GitHub仓库 client_id: ## 复制刚才生成的clientID，例如. 75752dafe7907a897619 client_secret: ## 复制刚才生成的clientSecret，例如. ec2fb9054972c891289640354993b662f4cccc50 admin: ## Github的用户名 language: zh-CN ## Language pagerDirection: last # Comment sorting direction, available values are last and first. 3.2 百度统计 登录百度统计，定位到站点的代码获取页面。 复制//hm.baidu.com/hm.js?后面那串统计脚本id(假设为：8006843039519956000) 配置主题_config.yml:主题_config.ymlthemes/BlueLake/_config.yml 1baidu_analytics: 8006843039519956000 注意： baidu_analytics不是你的百度id或者百度统计id如若使用谷歌统计，配置方法与百度统计类似。 3.3 卜算子阅读次数统计主题_config.ymlthemes/BlueLake/_config.yml1busuanzi: true 若设置为true将计算文章的阅读量(Hits)，并显示在文章标题下的小手图标旁。 3.4 微博秀微博秀挂件的代码放在layout/_widget/weibo.jade下，需要您去微博开放平台获取您自己的微博秀代码来替换。 登录微博开放平台，选择微博秀。 为了与主题风格统一，作如下配置 基础设置：高400px；勾选宽度自适应；颜色选择白色； 样式设置：主字色#333；链接色#40759b；鼠标悬停色#f7f8f8； 模块设置：去掉标题、边框、粉丝的勾选框，只留微博。 复制代码里src=&quot;&quot;里引号包裹的内容，替换到layout/_widget/weibo.jadeweibo.jadelayout/_widget/weibo.jade1234.widget .widget-title i(class='fa fa-weibo')= ' ' + __('新浪微博') iframe(width=\"100%\",height=\"400\",class=\"share_self\",frameborder=\"0\",scrolling=\"no\",src=\"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1\") 这只是为了和主题的风格统一，当然您也可以自由随意发挥。 注意：最主要是是要把src里uid=和verifier=后面的字段替换为您自己代码里的就好。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://chaooo.github.io/tags/hexo/"},{"name":"BlueLake","slug":"BlueLake","permalink":"http://chaooo.github.io/tags/BlueLake/"}]},{"title":"【Hexo博客折腾】自定义HEXO站内搜索Javascript+json","date":"2016-11-09T01:24:56.000Z","path":"article/20161109.html","text":"开始之前目前很多Hexo博客都用的Swiftype和Algolia等第三方搜索服务。其实针对无数据库的情况下，Hexo本身也提供了两个插件来生成数据文件作为数据源： hexo-generator-search生成xml格式的数据文件。 hexo-generator-json-content 生成json格式的数据文件。今天的主角是hexo-generator-json-content，对于 Javascript语言来说还是解析 json 更方便，如果需要用 xml 做数据文件也可以使用已有的atom.xml。 1.安装1$ npm install hexo-generator-json-content@2.2.0 --save 然后执行hexo generate时会自动生成content.json文件，若使用默认设置，生成的数据结构如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445meta: &#123; title: hexo.config.title, subtitle: hexo.config.subtitle, description: hexo.config.description, author: hexo.config.author, url: hexo.config.url&#125;,pages: [&#123; //-&gt; all pages title: page.title, slug: page.slug, date: page.date, updated: page.updated, comments: page.comments, permalink: page.permalink, path: page.path, excerpt: page.excerpt, //-&gt; only text ;) keywords: null //-&gt; it needs settings text: page.content, //-&gt; only text minified ;) raw: page.raw, //-&gt; original MD content content: page.content //-&gt; final HTML content&#125;],posts: [&#123; //-&gt; only published posts title: post.title, slug: post.slug, date: post.date, updated: post.updated, comments: post.comments, permalink: post.permalink, path: post.path, excerpt: post.excerpt, //-&gt; only text ;) keywords: null //-&gt; it needs settings text: post.content, //-&gt; only text minified ;) raw: post.raw, //-&gt; original MD content content: post.content, //-&gt; final HTML content categories: [&#123; name: category.name, slug: category.slug, permalink: category.permalink &#125;], tags: [&#123; name: tag.name, slug: tag.slug, permalink: tag.permalink &#125;]&#125;] 2.配置hexo-generator-json-content默认生成的json数据内容非常全，默认配置如下： 123456789101112131415161718192021222324252627282930313233jsonContent: meta: true keywords: false # (english, spanish, polish, german, french, italian, dutch, russian, portuguese, swedish) pages: title: true slug: true date: true updated: true comments: true path: true link: true permalink: true excerpt: true keywords: true # but only if root keywords option language was set text: true raw: false content: false posts: title: true slug: true date: true updated: true comments: true path: true link: true permalink: true excerpt: true keywords: true # but only if root keywords option language was set text: true raw: false content: false categories: true tags: true 因为默认生成了很多我们不需要的数据，所以我们要对其进行配置让它只生成我们想要的内容,在hexo/_config.yml中加入： 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true #文章标题 date: true #发表日期 path: true #路径 text: true #文本字段 raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true #标签 这样，就只生成每篇文章的标题，日期，路径，标签和文本字段，同时也减小了文件的大小。例如： 1234567891011&#123; \"title\": \"自定义HEXO站内搜索Javascript+json\", \"date\": \"2016-11-09T01:24:56.000Z\", \"path\": \"2016/11/09/自定义HEXO站内搜索Javascript-json.html\", \"text\": \"目前很多Hexo博客都用的Swiftype和Algolia等第三......#这里显示整篇文章的内容\", \"tags\": [&#123; \"name\": \"javascript,hexo\", \"slug\": \"javascript-hexo\", \"permalink\": \"http://chaoo.oschina.io/tags/javascript-hexo/\" &#125;]&#125; 3.JavaScript实现代码接下来就是用JS实现查询方法并把结果渲染到页面。 3.1 xhr加载数据12345678910111213141516171819202122var searchData;function loadData(success) &#123; if (!searchData) &#123; var xhr = new XMLHttpRequest(); xhr.open('GET', '/content.json', true); xhr.onload = function() &#123; if (this.status &gt;= 200 &amp;&amp; this.status &lt; 300) &#123; var res = JSON.parse(this.response || this.responseText); searchData = res instanceof Array ? res : res.posts; success(searchData); &#125; else &#123; console.error(this.statusText); &#125; &#125;; xhr.onerror = function() &#123; console.error(this.statusText); &#125;; xhr.send(); &#125; else &#123; success(searchData); &#125;&#125; 3.2 匹配文章内容返回结果12345678910function matcher(post, regExp) &#123; // 匹配优先级：title &gt; tags &gt; text return regtest(post.title, regExp) || post.tags.some(function(tag) &#123; return regtest(tag.name, regExp); &#125;) || regtest(post.text, regExp);&#125;function regtest(raw, regExp) &#123; regExp.lastIndex = 0; return regExp.test(raw);&#125; 3.3 结果渲染到页面123456789101112131415function render(data) &#123; var html = ''; if (data.length) &#123; html = data.map(function(post) &#123; return tpl(searchTpl, &#123; title: post.title, path: post.path, date: new Date(post.date).toLocaleDateString(), tags: post.tags.map(function(tag) &#123; return '&lt;span&gt;' + tag.name + '&lt;/span&gt;'; &#125;).join('') &#125;); &#125;).join(''); &#125; &#125; 3.3 查询匹配1234567891011function search(key) &#123; // 关键字 =&gt; 正则，空格隔开的看作多个关键字 // a b c =&gt; /a|b|c/gmi var regExp = new RegExp(key.replace(/[ ]/g, '|'), 'gmi'); loadData(function(data) &#123; var result = data.filter(function(post) &#123; return matcher(post, regExp); &#125;); render(result); &#125;);&#125;","tags":[{"name":"hexo","slug":"hexo","permalink":"http://chaooo.github.io/tags/hexo/"},{"name":"Javascript","slug":"Javascript","permalink":"http://chaooo.github.io/tags/Javascript/"},{"name":"BlueLake","slug":"BlueLake","permalink":"http://chaooo.github.io/tags/BlueLake/"}]},{"title":"【工具】好用的Web包管理器-Bower","date":"2016-08-12T07:32:41.000Z","path":"article/20160812.html","text":"Bower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。 开始之前在安装bower之前，必须确认你已经安装了Node.js和Git。 1.安装Bower使用npm，打开终端，键入： 1npm install -g bower #全局安装bower 移步这里查看不同平台上安装的问题。 2.使用Bower使用help命令查看帮助。 12345678910111213141516171819202122232425262728293031323334bower helpUsage: bower &lt;command&gt; [&lt;args&gt;] [&lt;options&gt;]Commands: cache Manage bower cache help Display help information about Bower home Opens a package homepage into your favorite browser info Info of a particular package init Interactively create a bower.json file install Install a package locally link Symlink a package folder list List local packages - and possible updates login Authenticate with GitHub and store credentials lookup Look up a package URL by name prune Removes local extraneous packages register Register a package search Search for a package by name update Update a local package uninstall Remove a local package unregister Remove a package from the registry version Bump a package versionOptions: -f, --force Makes various commands more forceful -j, --json Output consumable JSON -l, --loglevel What level of logs to report -o, --offline Do not hit the network -q, --quiet Only output important information -s, --silent Do not output anything, besides errors -V, --verbose Makes output more verbose --allow-root Allows running commands as root -v, --version Output Bower version --no-color Disable colorsSee 'bower help &lt;command&gt;' for more information on a specific command. 3.安装包到本地通过命令bower install安装软件包默认到bower_components/目录。 1bower install &lt;package&gt; #package为包名 想要下载的包可以是GitHub上的短链接（如jquery/jquery）、.git 、一个URL或者其它. 12345bower install # 通过 bower.json 文件安装bower install jquery # 通过在github上注册的包名安装bower install desandro/masonry # GitHub短链接bower install git://github.com/user/package.git # Github上的 .gitbower install http://example.com/script.js # URL 安装选项 12345-F, --force-latest: Force latest version on conflict-p, --production: Do not install project devDependencies-S, --save: Save installed packages into the project’s bower.json dependencies-D, --save-dev: Save installed packages into the project’s bower.json devDependencies-E, --save-exact: Configure installed packages with an exact version rather than semver 4.用bower.json文件来管理依赖发布项目的时候没有必要把所有依赖的库发布上去，只需在根目录生成一个bower.json文件即可，别人使用时在根目录执行bower install就可根据bower.json来安装依赖的包。在项目中执行 1bower init 会提示你输入一些基本信息，根据提示按回车或者空格即可，然后会生成一个bower.json文件，用来保存该项目的配置.如果想保存依赖信息(dependencies)到你的bower.json文件，安装包时，命令后面跟上--save即可。 5.使用下载好的包对于已经下载下来的包，默认在当前目录的bower_components文件夹。你可以直接在项目里引用。例如： 12&lt;link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.min.css\"&gt;&lt;script type=\"text/javascript\" src=\"bower_components/jquery/dist/jquery.min.js\"&gt;&lt;/script&gt; 6.更新包若下载的包升级了，只需执行update命令即可更新，例如： 1bower update jquery 这样就可以自动升级到最新版的jquery了。更新选项 1234-F, --force-latest: Force latest version on conflict-p, --production: Do not install project devDependencies-S, --save: Update dependencies in bower.json-D, --save-dev: Update devDependencies in bower.json 7.搜索包12bower search #搜索所有包bower search &lt;packageName&gt; #搜索指定名称的包 或者可以在这里:https://bower.io/search/搜索喜欢的包. 8.卸载包1bower uninstall &lt;name&gt; [&lt;name&gt; ..] [&lt;options&gt;] 卸载选项 12-S, --save: Remove uninstalled packages from the project’s bower.json dependencies-D, --save-dev: Remove uninstalled packages from the project’s bower.json devDependencies","tags":[{"name":"工具","slug":"tool","permalink":"http://chaooo.github.io/tags/tool/"},{"name":"bower","slug":"bower","permalink":"http://chaooo.github.io/tags/bower/"}]},{"title":"【数据库】MongoDB学习笔记","date":"2016-07-30T10:20:16.000Z","path":"article/20160730.html","text":"part1 安装配置一、安装：在mongodb官网下载对应自己电脑系统的安装包，地址为： http://www.mongodb.org/downloads。 1、以Windows64bit为例，下载.msi文件双击安装。2、安装过程中，点击 “Custom(自定义)” 按钮来设置安装目录(D:\\MongoDB\\bin)。3、创建数据目录(D:\\MongoDB\\data\\db),MongoDB默认数据目录\\data\\db。4、连接数据库(命令行win+r cmd,到D:\\MongoDB\\bin目录下，执行代码：mongod –dbpath D:\\MongoDB\\data\\db) 123D:cd D:\\MongoDB\\binmongod --dbpath D:\\MongoDB\\data\\db 5、启动 MongoDB JavaScript 工具(D:\\MongoDB\\bin目录下,打开mongo,会看到：) 12MongoDB shell version: 3.2.4 //mongodb版本connecting to: test //默认shell连接的是本机localhost 上面的test库 此时就可以操作数据库了。 二、将MongoDB服务器作为Windows服务运行1、在D:\\MongoDB目录下创建mongodb.config,写入如下： 12345## 数据库文件目录dbpath=D:/MongoDB/data## 日志目录logpath=D:/MongoDB/log/mongo.logdiaglog=3 2、常规命令(cmd管理员): 123D:cd D:\\MongoDB\\binmongod --config D:\\MongoDB\\mongodb.config 3、若常规方式失败，则sc方式(cmd管理员)： 123D:cd D:\\MongoDB\\binsc create mongodb binPath= &quot;D:\\MongoDB\\bin\\mongod.exe --service --config=D:\\mongoDB\\mongodb.config&quot; 访问地址：localhost:27017测试是否启动成功 part2 CRUD操作(Creat,Read,Update,Delete)一、基础：1、document(文档) MongoDB把所有数据存放在类似于JSON数据结构的文档内： 1&#123; \"item\": \"pencil\", \"qty\": 500, \"type\": \"no.2\" &#125; 2、collection(集合) 集合是一组相关的文档，MongoDB存储所有的文档在集合里,他们拥有一套共享的通用索引。 123&#123; \"item\": \"pencil\", \"qty\": 500, \"type\": \"no.1\" &#125;&#123; \"item\": \"pencil2\", \"qty\": 550, \"type\": \"no.2\" &#125;&#123; \"item\": \"pencil3\", \"qty\": 800, \"type\": \"no.3\" &#125; 3、database(数据库) MongoDB的默认数据库为”db”，该数据库存储在data目录中。一个mongodb中可以建立多个数据库。 二、数据库操作：连接及运行mongoDB“show dbs“命令可以显示所有的数据的列表“db“命令可以显示当前数据库对象或集合“use“命令可以连接到一个指定的数据库数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。 1.不能是空字符串（””)。 2.不得含有’ ‘（空格)、.、$、/、\\和\\0 (空宇符)。 3.应全部小写。 4.最多64字节。 1、创建数据库：use Database_Name 1use test ##创建名为test的数据库 2、删除当前数据库： 1db.dropDatabase() 三、文档操作（以 Collection_Name = col 为例）1、插入：12345678910db.col.insert(Document) ##插入一条或多组数据db.col.insertOne(Document) ##插入一条数据db.col.insertMany(Document) ##插入多条数据##例如： db.col.insertOne(&#123; \"item\": \"pencil\", \"type\": \"no.1\" &#125;) db.col.insertMany([ &#123; \"item\": \"dog\", \"type\": \"no.2\" &#125;, &#123; \"item\": \"apple\", \"type\": \"no.3\" &#125;, &#123; \"item\": \"orange\", \"type\": \"no.4\" &#125; ]) 2、删除：123456789db.col.remove(&#123;&#125;) ##删除所有数据db.col.remove(query &lt;,options&gt;) # query: 查询条件(数据索引或名字) # ptions:两个可选参数 # &#123;justOne: &lt;boolean&gt;, //默认false，删除所有匹配到的。 # writeConcern: &lt;document&gt;//抛出异常的级别。 # &#125;db.col.deleteOne(query &lt;,options&gt;) ##同上，无justOne参数，只删除第一条db.col.deleteMany(query &lt;,options&gt;) ##同上，无justOne参数，只删除多条 3、更新：123456789101112131415161718db.col.update(query, update &lt;,options&gt;) # query: 查询条件(数据索引或名字) # update: 更新的内容，语法：&#123;$set:query&#125; # options:三个可选参数 # &#123;upsert: &lt;boolean&gt;, //如果不存在update的记录，是否插入新数据，默认:false。 # multi: &lt;boolean&gt;, //只更新找到的第一条记录，默认是false,如果为true,多条记录全部更新。 # writeConcern: &lt;document&gt;//#抛出异常的级别。 # &#125;##例如： db.col.update( &#123;\"type\": \"no.1\"&#125;, &#123;$set: &#123;\"item\": \"human\"&#125;&#125;, &#123;upsert: true, multi: true&#125; )db.col.updateOne() ##同上，无multi参数，只更新第一条db.col.updateMany() ##同上，无multi参数db.col.replaceOne() ##同updateOnedb.col.save(document &lt;,writeConcern&gt;) ##通过传入的文档整个替换 insert 与 save的区别如果插入的数据的_id相同,save将会更新该文档,而insert将会报错 update常用操作符1234567891011$set ##当文档中包含该字段的时候,更新该字段,如果该文档中没有该字段,则为本文档添加一个字段.$unset ##删除文档中的一个字段.$rename ##重命名某个列$inc ##增长某个列$setOnInsert ##当upsert为true时,并且发生了insert操作时,可以补充的字段$push ##将一个数字存入一个数组,分为三种情况,如果该字段存在,则直接将数字存入数组.如果该字段不存在,创建字段并且将数字插入该数组.如果更新的字段不是数组,会报错的.$pushAll ##将多个数值一次存入数组.上面的push只能一个一个的存入$addToSet ##与$push功能相同将一个数字存入数组,不同的是如果数组中有这个数字,将不会插入,只会插入新的数据,同样也会有三种情况,与$push相同.$pop ##删除数组最后一个元素$pull ##删除数组中的指定的元素,如果删除的字段不是数组,会报错$pullAll ##删除数组中的多个值,跟pushAll与push的关系类似. 4、查询12345db.col.find(&#123;&#125;) ##查询所有文档db.col.find().pretty() ##以易读的方式来读取数据db.collection.find(query, projection) # query：查询条件(数据索引或名字) # projection：可选。指定返回的字段。 4.1、深入查询表达式1234567891011121314151617181920212223242526272829303132333435363738394041424344454647db.col.find()##查询所有db.col.find(&#123;filed: value&#125;) ##等值查询db.col.find(&#123;filed: &#123;$ne: value&#125;&#125;) ##不等于 $nedb.col.find(&#123;filed: &#123;$nin: [value1, value2, ...]&#125;&#125;) ##不能包含给定的值 $nindb.col.find(&#123;filed: &#123;$all: [value1, value2, ...]&#125;&#125;) ##必须包含所有给定的值 $alldb.col.find(&#123;filed: &#123;$in: [value1, value2, ...]&#125;&#125;) ##只要包含一个或多个给定的值 $indb.col.find(&#123;filed: &#123;$exists:1&#125;&#125;) ##存在filed字段的db.col.find(&#123;filed: &#123;$exists:0&#125;&#125;) ##不存在filed字段的db.col.find(&#123;filed: &#123;$mod:[3,1]&#125;&#125;) ##模三余一，$mod(取模操作)db.col.find(&#123;$or: [&#123;filed1: vulue1&#125;, &#123;filed2: vulue2&#125;]&#125;) ##或 $ordb.col.find(&#123;$nor: [&#123;filed1: vulue1&#125;, &#123;filed2: vulue2&#125;]&#125;)##排除 $nordb.col.find(&#123;filed: &#123;$size: 3&#125;&#125;) ##返回值得数组是给定的长度(3) $sizedb.col.find(&#123;$where: function()&#123;return ...&#125;&#125;) ##回调，隐式迭代，符合条件才返回db.col.find(&#123;$where: '...'&#125;&#125;) ##同上db.col.find(&#123;age: &#123;$lt: 5&#125;&#125;).limit(3) ##查询age的值小于5，限制3条 #范围查询： # $lt （小于） # $gt （大于） # $lte （小于等于） # $gte （大于等于） # limit（限制显示）db.col.find().skip(2).limit(3) ##跳过前两个文档查询后面三个 # skip(num):表示跳过前面num个文档db.col.find().sort(&#123;age: 1&#125;) ##查询后以age升序排列显示 # sort():排序，这里 1 代表升序, -1 代表降序.db.col.find(&#123;filed: /user.*/i&#125;) ##正则，查询filed以user开头不区分大小写（正则效率低）db.col.find(&#123;filed: &#123;$type: 1&#125;&#125;) ##查找filed为双精度的文档 # 根据数据类型查询 $type # |类型 |编号| # |双精度 |1 | # |字符串 |2 | # |对象 |3 | # |数组 |4 | # |二进制数据 |5 | # |对象ID |7 | # |布尔值 |8 | # |日期 |9 | # |空 |10 | # |正则表达式 |11 | # |JavaScript |13 | # |符号 |14 | # |JavaScript(带范围)|15 | # |32位整数 |16 | # |时间戳 |17 | # |64位整数 |18 | # |最小键 |255 | # |最大键 |127 | 4.2、group分组查询group做的聚合有些复杂。先选定分组所依据的键，此后MongoDB就会将集合依据选定键值的不同分成若干组。然后可以通过聚合每一组内的文档，产生一个结果文档。 12345group(&#123; key:&#123;字段:1&#125;, initial:&#123;变量:初始值&#125;, $reduce:function(doc,prev)&#123;函数代码&#125;&#125;) 其中key下的字段代表,需要按哪个字段分组.initial下的变量表示这一个分组中会使用的变量,并且给一个初始值.可以在后面的$reduce函数中使用.$reduce的两个参数,分别代表当前的文档和上个文档执行完函数后的结果. 栗子：如下我们按年龄分组,同级不同年龄的用户的多少: 123456789101112131415161718192021222324252627282930313233db.user.find() &#123; \"_id\" : ObjectId(\"5198c286c686eb50e2c843b2\"), \"name\" : \"user0\", \"age\" : 0 &#125; &#123; \"_id\" : ObjectId(\"5198c286c686eb50e2c843b3\"), \"name\" : \"user1\", \"age\" : 1 &#125; &#123; \"_id\" : ObjectId(\"5198c286c686eb50e2c843b4\"), \"name\" : \"user2\", \"age\" : 2 &#125; &#123; \"_id\" : ObjectId(\"5198c286c686eb50e2c843b5\"), \"name\" : \"user3\", \"age\" : 1 &#125; &#123; \"_id\" : ObjectId(\"5198c286c686eb50e2c843b6\"), \"name\" : \"user4\", \"age\" : 1 &#125; &#123; \"_id\" : ObjectId(\"5198c286c686eb50e2c843b7\"), \"name\" : \"user5\", \"age\" : 2 &#125;db.user.group(&#123; key:&#123;age:1&#125;, initial:&#123;count:0&#125;, $reduce:function(doc,prev)&#123; prev.count++ &#125;&#125;); [ &#123;\"age\": 0, \"count\": 1&#125;, &#123;\"age\": 1, \"count\": 3&#125;, &#123;\"age\": 2, \"count\": 2&#125; ]db.user.group(&#123; key:&#123;age:1&#125;, initial:&#123;users:[]&#125;, reduce:function(doc,prev)&#123; prev.users.push(doc.name) &#125;&#125;); [ &#123;\"age\": 0, \"users\": [\"user0\"]&#125;, &#123;\"age\": 1, \"users\": [\"user1\", \"user3\", \"user4\"]&#125;, &#123;\"age\": 2, \"users\": [\"user2\", \"user5\"]&#125; ] 另外本函数还有两个可选参数 condition 和 finalizecondition就是分组的条件筛选类似mysql中的having 123456789101112db.user.group(&#123; key:&#123;age:1&#125;, initial:&#123;users:[]&#125;, $reduce:function(doc,prev)&#123; prev.users.push(doc.name) &#125;, condition:&#123;age:&#123;$gt:0&#125;&#125;&#125;) ##筛选出age大于0的:[ &#123;\"age\": 1, \"users\": [\"user1\", \"user3\", \"user4\"]&#125;, &#123;\"age\": 2, \"users\": [\"user2\", \"user5\"]&#125;] 4.3、count统计12db.goods.count() ##统计该集合总数db.goods.count(&#123;cat_id: 3&#125;) ##统计cat_id=3的总数 4.4、distinct排重12345678910db.user.find() &#123; \"_id\" : ObjectId(\"5198c286c686eb50e2c843b2\"), \"name\" : \"user0\", \"age\" : 0 &#125; &#123; \"_id\" : ObjectId(\"5198c286c686eb50e2c843b3\"), \"name\" : \"user1\", \"age\" : 1 &#125; &#123; \"_id\" : ObjectId(\"5198c286c686eb50e2c843b4\"), \"name\" : \"user2\", \"age\" : 2 &#125; &#123; \"_id\" : ObjectId(\"5198c286c686eb50e2c843b5\"), \"name\" : \"user3\", \"age\" : 1 &#125; &#123; \"_id\" : ObjectId(\"5198c286c686eb50e2c843b6\"), \"name\" : \"user4\", \"age\" : 1 &#125; &#123; \"_id\" : ObjectId(\"5198c286c686eb50e2c843b7\"), \"name\" : \"user5\", \"age\" : 2 &#125; db.user.distinct(\"age\") ## 特殊,传入的参数直接是字符串,而不是对象; [0, 1, 2] 4.5、子文档查询$elemMatchelemMatch投影操作符将限制查询返回的数组字段的内容只包含匹配elemMatch条件的数组元素。注意：(1)数组中元素是内嵌文档。(2)如果多个元素匹配$elemMatch条件，操作符返回数组中第一个匹配条件的元素。假设集合school有如下数据： 1234567891011121314151617181920212223242526272829303132&#123; _id: 1, zipcode: 63109, students: [ &#123; name: \"john\", school: 102, age: 10 &#125;, &#123; name: \"jess\", school: 102, age: 11 &#125;, &#123; name: \"jeff\", school: 108, age: 15 &#125; ]&#125;&#123; _id: 2, zipcode: 63110, students: [ &#123; name: \"ajax\", school: 100, age: 7 &#125;, &#123; name: \"achilles\", school: 100, age: 8 &#125;, ]&#125;&#123; _id: 3, zipcode: 63109, students: [ &#123; name: \"ajax\", school: 100, age: 7 &#125;, &#123; name: \"achilles\", school: 100, age: 8 &#125;, ]&#125;&#123; _id: 4, zipcode: 63109, students: [ &#123; name: \"barney\", school: 102, age: 7 &#125;, ]&#125; 下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102）的元素。 12345db.school.find(&#123;zipcode: 63109 &#125;,&#123; students: &#123; $elemMatch: &#123; school: 102 &#125; &#125; &#125; );&#123;\"_id\": 1, \"students\": [&#123;\"name\":\"john\", \"school\":102, \"age\":10&#125;]&#125;&#123;\"_id\": 3&#125;&#123;\"_id\": 4, \"students\": [&#123;\"name\":\"barney\", \"school\":102, \"age\":7&#125;]&#125; 查询结果说明：_id为1的文档，students数组包含多个元素中存在school键且值为102的元素，$elemMatch只返回一个匹配条件的元素。_id为3的文档，因为students数组中元素无法匹配$elemMatch条件，所以查询结果不包含”students”字段。 $elemMatch可以指定多个字段的限定条件，下面的操作将查询邮政编码键值是63109的所有文档。 $elemMatch操作符将返回 students数组中的第一个匹配条件（内嵌文档的school键且值为102且age键值大于10）的元素。 12345db.school.find( &#123; zipcode: 63109 &#125;,&#123; students: &#123; $elemMatch: &#123; school: 102, age: &#123; $gt: 10&#125; &#125; &#125; &#125; ); &#123;\"_id\": 1, \"students\": [&#123;\"name\":\"jess\", \"school\":102, \"age\":11&#125;]&#125; &#123;\"_id\": 3&#125; &#123;\"_id\": 4&#125;","tags":[{"name":"数据库","slug":"db","permalink":"http://chaooo.github.io/tags/db/"},{"name":"mongodb","slug":"mongodb","permalink":"http://chaooo.github.io/tags/mongodb/"}]},{"title":"【工具】sublime text3个人习惯配置","date":"2016-06-29T01:41:48.000Z","path":"article/20160629.html","text":"1、安装分别在官网下载并安装 nodejs 和 sublime text3。 2、sublime text3注册： 点击菜单【help】－&gt;【Enter License】，粘贴注册码。 3、安装package control组件，用于管理所有插件按ctrl + ~调出控制台(或点击菜单栏的【View】-&gt;【Show Console】)，在Console窗口中输入以下代码，按回车键： 1import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) 等待安装完毕，重启Sublime Text3。按快捷键：Ctrl+Shift+P，调出界面，在其中输入：install，第一个选项即是Package Control： 4、用Package Control安装插件按快捷键：Ctrl+Shift+P，调出界面，按照个人习惯安装插件（以下是我使用的插件）Material ThemeEmmetCSS FormatCSScombjsFormatAutoFileNameAutoprefixerDoc BlockrSublimeLinterSublimeLinter-jshintSublimeLinter-csslintColor HighlighterBracketHighlighter 5、配置nodejs方法1(1)下载sublime Text的nodejs插件(2)下载后解压:直接改名为nodejs 放到 Preferences–&gt;浏览程序包Browse Packages所在的文件夹(3)修改配置:打开Nodejs文件夹，找到文件“Nodejs.sublime-build”， 拖拽到sublime，显示： 12345678910111213141516171819&#123; \"cmd\": [\"node\", \"$file\"], \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\", \"selector\": \"source.js\", \"shell\":true, \"encoding\": \"cp1252\", \"windows\": &#123; \"cmd\": [\"taskkill /F /IM node.exe &amp; node\", \"$file\"] &#125;, \"linux\": &#123; \"cmd\": [\"killall node; node\", \"$file\"] &#125;, \"osx\": &#123; \"cmd\": [\"killall node; node $file\"] &#125;&#125; (4)修改为： 1234567891011121314151617181920&#123; \"cmd\": [\"node\", \"$file\"], \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\", \"selector\": \"source.js\", \"shell\":true, \"encoding\": \"utf-8\", \"windows\": &#123; \"cmd\": [\"taskkill /F /IM node.exe\", \"\"], \"cmd\": [\"node\", \"$file\"] &#125;, \"linux\": &#123; \"cmd\": [\"killall node; node\", \"$file\"] &#125;, \"osx\": &#123; \"cmd\": [\"killall node; node $file\"] &#125;&#125; (5)完成:随便写一段nodejs代码，ctrl+B运行(6)注意：在手动解压sublime Text插件后，需要在preference-&gt;package settings-&gt;package control的user setting下添加installed packages中的“Nodejs”，不然重启sublime Text 会被删除Nodejs插件。 方法2首先需要先安装nodejs。(1)运行Sublime,菜单上找到Tools —&gt; Build System —&gt; new Build System(2)输入：{ “cmd”: [“node”, “$file”], “file_regex”: “^[ ]File &quot;(…?)&quot;, line ([0-9]*)”, “selector”: “source.js”, “shell”:true, “encoding”: “utf-8”, “windows”: { “cmd”: [“taskkill /F /IM node.exe”, “”], “cmd”: [“node”, “$file”] }}(3)保存文件为NodeJs.sublime-build(4)菜单上找到Tools —&gt; Build System —&gt;选择 NodeJs(5)安装sublime插件 JavaScript &amp; NodeJs Snippets(6)新建test.js文件，输入 console.log(‘Hello Node.js’); 按快捷键 Ctrl + B 运行，成功输出","tags":[{"name":"sublime","slug":"sublime","permalink":"http://chaooo.github.io/tags/sublime/"},{"name":"工具","slug":"tool","permalink":"http://chaooo.github.io/tags/tool/"}]},{"title":"【Hexo博客折腾】Hexo3基于github搭建静态博客","date":"2016-05-23T03:16:51.000Z","path":"article/20160523.html","text":"开始之前在安装hexo之前，必须确认你已经安装了Node.js和Git。 1.创建GitHub仓库注册GitHub账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为chaooo,那我的仓库名为：chaooo.github.io，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。 2.配置Git设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入： 12$ git config --global user.name \"username\"$ git config --global user.email \"email@example.com\" 3.本地Git与GitHub建立联系这里介绍SSH的配置，先检查电脑是否已经有SSH 1$ ls -al ~/.ssh 如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。输入以下指令后，一路回车就好： 1$ ssh-keygen -t rsa -C \"emailt@example.com\" 然后键入以下指令： 12$ ssh-agent -s$ ssh-add ~/.ssh/id_rsa 如果出现这个错误:Could not open a connection to your authentication agent，则先执行如下命令即可： 1$ ssh-agent bash 再重新输入指令： 1$ ssh-add ~/.ssh/id_rsa 到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）： 1$ clip &lt; ~/.ssh/id_rsa.pub 在github上点击你的头像–&gt;Your profile–&gt;Edit profile–&gt;SSH and GPG keys–&gt;New SSH keyTitle自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。最后还是测试一下吧，键入以下命令： 1$ ssh -T git@github.com 你可能会看到有警告，没事，输入“yes”就好。 4.初始化hexo文件夹到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址。在E盘或是你喜爱的文件夹下，右键Git Bash Here: 键入git clone -b develop &lt;刚复制的地址&gt; 12$ git clone -b develop https://github.com/chaooo/chaooo.github.io.git$ mkdir Hexo-admin Hexo安装配置1.Hexo初始化进入Hexo-admin文件夹 1$ cd Hexo-admin 接下来只需要使用 npm 即可完成 Hexo 的安装: 1$ npm install -g hexo-cli 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件: 12$ hexo init$ npm install 接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。 12$ hexo generate$ hexo server 输入Ctrl+C停止服务。 2.Hexo配置用编辑器打开 Hexo-admin/ 下的配置文件_config.yml找到： 12345# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: repository: 到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/chaooo/chaooo.github.io.git branch: master 3.完成部署最后一步，快要成功了，键入指令： 123$ npm install hexo-deployer-git --save$ hexo generate$ hexo deploy 输入弹出框的用户名与密码(首次使用git会弹出)。OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：chaooo.github.io/每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样： 123To https://github.com/chaooo/chaooo.github.io.git 7f3b50a..128a10d HEAD -&gt; masterINFO Deploy done: git 当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。 日常操作1.写文章执行new命令，生成指定名称的文章至 Admin-blog\\source_posts\\文章标题.md 。 1$ hexo new [layout] \"文章标题\" #新建文章 然后用编辑器打开“文章标题.md”按照Markdown语法书写文章。 其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout， 同时你也可以编辑现有的layout，比如post的layout默认是 hexo\\scaffolds\\post.md 1234title: &#123; &#123; title &#125; &#125;date: &#123; &#123; date &#125; &#125;tags:--- 我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下： 12345title: &#123; &#123; title &#125; &#125;date: &#123; &#123; date &#125; &#125;categories:tags:--- 文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围。请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件&quot;：&quot;后面都必须有个空格，不然会报错。 2.提交每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。 123$ git add .$ git commit -m \"...\"$ git push origin develop 然后才执行hexo generate -d发布网站到master分支上。 1$ hexo generate -d 3.本地仓库丢失当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤： 3.1拷贝仓库1$ git clone -b develop https://github.com/chaooo/chaooo.github.io.git 3.2配置Hexo在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令: 1234$ npm install -g hexo-cli$ npm install hexo$ npm install$ npm install hexo-deployer-git --save 小Tips:hexo 命令1234567891011121314hexo new \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本hexo deploy -g #生成加部署hexo server -g #生成加预览#命令的简写hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy","tags":[{"name":"hexo","slug":"hexo","permalink":"http://chaooo.github.io/tags/hexo/"}]},{"title":"Hello World","date":"2015-12-31T15:59:59.000Z","path":"article/20151231.html","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"hexo","slug":"hexo","permalink":"http://chaooo.github.io/tags/hexo/"}]}]